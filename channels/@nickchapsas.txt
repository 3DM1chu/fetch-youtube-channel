[
  {
    "link": "watch?v=2VxFVRAOdZk",
    "title": "We Are Getting New Validation Types in .NET 8!",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, dataannotations, new data annotations, data annotations, data annotation validation, data annotation validation in web api, We Are Getting New DataAnnotations in .NET 8",
    "scraped_at": 1685095324.4435768,
    "genre": "Education",
    "views": "17338",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick, and in this video, I will show you the brand new DataAnnotation attributes that we are getting in .NET 8!\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "480",
    "uploadDate": "2023-05-25",
    "thumbnail_url": "https://i.ytimg.com/vi/2VxFVRAOdZk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=YbuSuSpzee4",
    "title": "What\u2019s the Result Type Everyone Is Using in .NET?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, result type, result, result type .net, result type c#, result vs exceptions, replace exceptions with result, What",
    "scraped_at": 1685095324.8435757,
    "genre": "Education",
    "views": "41540",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will introduce you to the Result type in .NET. It might not be a native .NET type but it exists in tons of libraries and codebases so in this video I\\'ll help you understand why.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "886",
    "uploadDate": "2023-05-22",
    "thumbnail_url": "https://i.ytimg.com/vi/YbuSuSpzee4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=lqbYURwM0bw",
    "title": "The New Way of Parsing ANY Type in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, iparsable, parse any type c#, parse any type .net, .net 7 parsable, virtual static members, parse anything c#, parse anything .net, The New Way of Parsing ANY Type in .NET",
    "scraped_at": 1685095324.684577,
    "genre": "Education",
    "views": "41928",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you a really cool feature that was added in .NET 7 that allows you to parse strings into any type with a consistent interface and programming model.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "783",
    "uploadDate": "2023-05-18",
    "thumbnail_url": "https://i.ytimg.com/vi/lqbYURwM0bw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=lFzgUxFb4Yo",
    "title": "3 .NET \"Best Practices\" I Changed My Mind About",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net",
    "scraped_at": 1685095325.5426018,
    "genre": "Education",
    "views": "60234",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will talk about the 3 practices that I used to consider good in the past, but I actually don\\'t use in my own code anymore.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "615",
    "uploadDate": "2023-05-15",
    "thumbnail_url": "https://i.ytimg.com/vi/lFzgUxFb4Yo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4FFYefcx4Bg",
    "title": "Build Clean Messaging in .NET with MassTransit",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, aws, aws .net, aws on .net, .net on aws, masstransit, .net mass transit, mass transit, c# masstransit, .net masstransit, rabbitmq",
    "scraped_at": 1685095324.7645762,
    "genre": "Education",
    "views": "40834",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "1304",
    "uploadDate": "2023-05-11",
    "thumbnail_url": "https://i.ytimg.com/vi/4FFYefcx4Bg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=aLozGWQa2Cc",
    "title": "Working With Images Like a Pro in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, aws, aws .net, aws on .net, .net on aws, image upload .net, upload image .net, serve image .net, upload image c#, aws s3, upload image s3, aws s3 tutorial",
    "scraped_at": 1685095325.6135762,
    "genre": "Education",
    "views": "24392",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "1670",
    "uploadDate": "2023-05-08",
    "thumbnail_url": "https://i.ytimg.com/vi/aLozGWQa2Cc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=aTDUY66tlxk",
    "title": "NativeAOT for .NET APIs Is Here and It\u2019s INSANE!",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# native, nativeaot, native aot, native c# code, compile c# native, run native c#, Compiling C# into NATIVE code, .net 7, .net 7 native aot, .net 7 nativeaot, .net 8, .net 8 nativeaot, .net native aot, c# native code, c# native aot, nick chapsas nativeaot, compile c# native code",
    "scraped_at": 1685095330.2255244,
    "genre": "Education",
    "views": "62448",
    "desc": "Check out my courses: https://dometrain.com and use code LAUNCH for 15% OFF any course\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, we will take a look at the brand new NativeAOT support for .NET APIs. We will see what\\'s supported, what isn\\'t and how, by using it, we can achieve 10 times faster startup times and 10 times smaller application size.\\\\n\\\\nWorkshops: https://dometrain.com/author/nick-chapsas\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "847",
    "uploadDate": "2023-05-04",
    "thumbnail_url": "https://i.ytimg.com/vi/aTDUY66tlxk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4GeEvcKq8Lo",
    "title": "The Most Confusing C# 12 Feature Yet",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 8, c# 12, c# 12 preview, c# new features, c# 12 new features, alias any type, c# alias, c# using, c# using alias, alias c#, global using",
    "scraped_at": 1685095332.3325522,
    "genre": "Education",
    "views": "34763",
    "desc": "Check out my courses: https://dometrain.com and use code LAUNCH for 15% OFF any course\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will introduce you to a brand new C# 12 feature called Alias any type. It\\'s a really cool feature that can get really confusing if you are not careful.\\\\n\\\\nWorkshops: https://dometrain.com/author/nick-chapsas\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "556",
    "uploadDate": "2023-05-01",
    "thumbnail_url": "https://i.ytimg.com/vi/4GeEvcKq8Lo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=J2tBNTDMf1o",
    "title": "Cleaning up Your Validation Code in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, mediatr, mediator, asp.net core, asp.net core api, .net mediatr, mediator c#, mediatr C#, mediatr asp.net core, mediatr pipeline behavior, mediatr pipeline, mediatr preprocessor, mediatr postprocessor, jimmy bogard, mediatr validation, mediator validation",
    "scraped_at": 1685095324.605578,
    "genre": "Education",
    "views": "34481",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you how you can clean up your validation code in .NET by using MediatR\\'s Pipeline Behavior feature but also PreProcessors.\\\\n\\\\nWorkshops: https://dometrain.com/author/nick-chapsas\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "906",
    "uploadDate": "2023-04-27",
    "thumbnail_url": "https://i.ytimg.com/vi/J2tBNTDMf1o/maxresdefault.jpg"
  },
  {
    "link": "watch?v=HRt7KIkdIaw",
    "title": "Move Cross-Cutting Concerns Where They Should Be in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, mediatr, mediator, vertical slices, vertical slice architecture, asp.net core, asp.net core api, .net mediatr, mediator c#, mediatr C#, cross cutting concerns, cross",
    "scraped_at": 1685095325.910578,
    "genre": "Education",
    "views": "24599",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you how you can implement cross-cutting concerns in your .NET applications by utilizing MediatR\\'s Pipeline Behavior feature.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "620",
    "uploadDate": "2023-04-24",
    "thumbnail_url": "https://i.ytimg.com/vi/HRt7KIkdIaw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=mgeuh8k3I4g",
    "title": "Adding JWT Authentication & Authorization in ASP.NET Core",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, asp.net core, asp.net core api, mediator c#, jwt, jwt auth, jwt authentication, jwt authorisation, jwt authorization, json web token, .net jwt, asp.net jwt, Adding JWT Authentication ",
    "scraped_at": 1685095331.038554,
    "genre": "Education",
    "views": "43666",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you how to get started with JWT Authentication and Authorization in your ASP.NET Core applications and APIs.\\\\n\\\\nVideo explaining JWT: https://www.youtube.com/watch?v=qDJYgGzmalQ\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1044",
    "uploadDate": "2023-04-20",
    "thumbnail_url": "https://i.ytimg.com/vi/mgeuh8k3I4g/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Ve__md8LeDY",
    "title": "Getting Started With MediatR and Vertical Slices in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, mediatr, mediator, vertical slices, vertical slice architecture, asp.net core, asp.net core api, .net mediatr, mediator c#, mediatr C#, Getting Started With MediatR and Vertical Slices in .NET",
    "scraped_at": 1685095328.1125765,
    "genre": "Education",
    "views": "31774",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you how you can migrate an existing ASP.NET Core API to use MediatR and a more Vertical Slice-focused architecture.\\\\n\\\\nOriginal MediatR video: https://www.youtube.com/watch?v=YzOBrVlthMk\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "860",
    "uploadDate": "2023-04-17",
    "thumbnail_url": "https://i.ytimg.com/vi/Ve__md8LeDY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=CTHuvYulOpo",
    "title": "How Entity Framework Tries to Copy Dapper in .NET 8",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, ef core vs dapper, ef core, dapper, entity framework vs dapper, entity framework core vs dapper, entity framework vs dapper performance, unmapper queries, unmapped type queries, ef core 8, ef core 8 preview, .net 8, ef core unmapped queries, dapper vs ef core 8",
    "scraped_at": 1685095325.2215757,
    "genre": "Education",
    "views": "28495",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you a new Entity Framework Core 8 feature that is aiming to replace Dapper. We will take a look at what it is, how it works, and why it won\\'t be replacing Dapper in your codebase, at least for now.\\\\n\\\\nOther EF Core vs Dapper videos:\\\\nhttps://www.youtube.com/watch?v=Q4LtKa_HTHU\\\\nhttps://www.youtube.com/watch?v=OxqAUIYemMs\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "586",
    "uploadDate": "2023-04-13",
    "thumbnail_url": "https://i.ytimg.com/vi/CTHuvYulOpo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=kPXBmyhfHZU",
    "title": "Why Microsoft Made Their New Frozen Collections Slower",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, frozenset, frozen dictionary, frozen collections, frozen collections c#, frozen collections .net, .net frozen, c# frozen, What are the Frozen Collections coming in .NET",
    "scraped_at": 1685095325.6845765,
    "genre": "Education",
    "views": "20355",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick, and in this video, I will explain why Microsoft made the speed of read operations of the brand new .NET 8 Frozen Collections slower. \\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "561",
    "uploadDate": "2023-04-10",
    "thumbnail_url": "https://i.ytimg.com/vi/kPXBmyhfHZU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=OxqAUIYemMs",
    "title": "Making Entity Framework Core As Fast As Dapper",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, ef core vs dapper, ef core, dapper, entity framework core, entity framework, entity framework vs dapper, entity framework core vs dapper, ef core vs dapper performance, entity framework vs dapper performance, compiled queries, compiled queries ef core, optimising ef core, dapper vs ef core",
    "scraped_at": 1685095328.3995974,
    "genre": "Education",
    "views": "57517",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello, everybody, I\\'m Nick, and in this video, I will show you how you can use Entity Framework Core\\'s Compiled Queries to achieve very similar performance to Dapper. This technique optimizes both speed and memory; the results are remarkable.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "797",
    "uploadDate": "2023-04-06",
    "thumbnail_url": "https://i.ytimg.com/vi/OxqAUIYemMs/maxresdefault.jpg"
  },
  {
    "link": "watch?v=KLtMtxUihBk",
    "title": "I Lied! The Fastest C# Loop Is Even Weirder",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, fast loop, c# fast loop, c# for vs foreach, for vs foreach, performance loop, loop performance, loop performance c#, .net loop, The weirdest way to loop in C#, The weirdest way to loop in C# is also the fastest, I Lied",
    "scraped_at": 1685095328.254602,
    "genre": "Education",
    "views": "39309",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick, and in this video, I will show you an even weirder way to loop in C#, which in some cases can perform better than every other approach.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "710",
    "uploadDate": "2023-04-03",
    "thumbnail_url": "https://i.ytimg.com/vi/KLtMtxUihBk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=IrlBW2Oa_8Y",
    "title": "3 Features Java Got First And C# Later Copied",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, java vs csharp, java vs c#, c# vs java, 3 Features Java Got First And C# Later Copied, why java is better than c#, java or c# features, java features, java 20 features, java vs c# features, java vs dotnet, java vs .net",
    "scraped_at": 1685095328.478578,
    "genre": "Education",
    "views": "38470",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick, and in this video, I will show you 3 language features that Java got first and then C# ripped off.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#java #dotnet #csharp\"",
    "lengthSeconds": "718",
    "uploadDate": "2023-04-01",
    "thumbnail_url": "https://i.ytimg.com/vi/IrlBW2Oa_8Y/maxresdefault.jpg"
  },
  {
    "link": "watch?v=xa6YusjCFF0",
    "title": "The Problem with Time That .NET 8 Finally Fixed",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, The Problem with Time That .NET 8 Finally Fixed, .net 8 time, mock datetime, datetimeprovider, iclock, clock, timeprovider, itimeprovider",
    "scraped_at": 1685095328.8466074,
    "genre": "Education",
    "views": "60198",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick, and in this video, I will introduce you to the brand new .NET 8 type, called TimeProvider, which aims to solve a problem that has been in .NET since its inception.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "587",
    "uploadDate": "2023-03-30",
    "thumbnail_url": "https://i.ytimg.com/vi/xa6YusjCFF0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=U8gSdQN2jWI",
    "title": "The Best .NET Mapper to Use in 2023",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, The best .NET Mapper to use in 2023, automapper, mapster, .net mapper, .net object mapper, mapper, object mapper, mapperly, agilemapper, tinymapper, expressmapper, automapper vs mapster, automapper vs manual mapping",
    "scraped_at": 1685095332.6115577,
    "genre": "Education",
    "views": "59064",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will compare all the .NET Object Mappers to see which one is the best and which one you should choose. I tested Automapper, AgileMapper, TinyMapper, Mapster, MappingGenerator, Mapperly and also manual mapping to see how they compare.\\\\n\\\\nGive Mapperly a star on GitHub: https://github.com/riok/mapperly\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "716",
    "uploadDate": "2023-03-27",
    "thumbnail_url": "https://i.ytimg.com/vi/U8gSdQN2jWI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Q4LtKa_HTHU",
    "title": "Entity Framework Core vs Dapper Performance in 2023",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, ef core vs dapper, ef core, dapper, entity framework core, entity framework, entity framework vs dapper, entity framework core vs dapper, ef core vs dapper performance, entity framework vs dapper performance",
    "scraped_at": 1685095327.8035762,
    "genre": "Education",
    "views": "73307",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will compare Entity Framework Core\\'s and Dapper\\'s performance to see which one is faster and more memory efficient and by how much. The results were actually pretty interesting.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "838",
    "uploadDate": "2023-03-24",
    "thumbnail_url": "https://i.ytimg.com/vi/Q4LtKa_HTHU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=haEWXLay0yM",
    "title": "The New GitHub Copilot X Powered by GPT-4 is Here!",
    "tags": "Elfocrash, coding, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, chatgpt, openai, copilot, chatgpt developer, chatgpt code, coding ai, coding chat gpt, chatpgt coding, open ai chatgpt, openai chatgpt, gpt 4, gpt 4 demo, gpt 4 coding, gpt 4 code, gpt 4 openai, gpt 4 chatgpt, chat gpt 4, chatgpt 4, chat gpt refactoring, github copilot, github copilot x, github copilot x gpt 4",
    "scraped_at": 1685095325.3205767,
    "genre": "Education",
    "views": "148666",
    "desc": "Hello everybody I\\'m Nick and in this video I take a first look at the recently announce GitHub Copilot X that is powered by GPT-4. It adds many features with the main one being a ChatGPT like experience which is full context aware in your IDE.\\\\n\\\\nGitHub Copilot X: https://github.com/features/preview/copilot-x\\\\nAnnouncement Blog: https://github.blog/2023-03-22-github-copilot-x-the-ai-powered-developer-experience\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#github #copilotx #gpt4 #chatgpt\"",
    "lengthSeconds": "396",
    "uploadDate": "2023-03-22",
    "thumbnail_url": "https://i.ytimg.com/vi/haEWXLay0yM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6hDAgdlzmVU",
    "title": "The Switch Keyword in C# is a LIE!",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 6, c# switch, switch keyword, switch statement, switch keyword c#, switch lowering, What",
    "scraped_at": 1685095328.6256022,
    "genre": "Education",
    "views": "40613",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what\\'s really behind C#\\'s Switch keyword. There are many assumptions about how a switch works behind the scenes but in this video we will debunk all that.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "605",
    "uploadDate": "2023-03-20",
    "thumbnail_url": "https://i.ytimg.com/vi/6hDAgdlzmVU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=y_NHMGZMb14",
    "title": "I Asked GPT-4 To Refactor My Legacy Codebase",
    "tags": "Elfocrash, coding, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, chatgpt, openai, copilot, chatgpt developer, chatgpt code, coding ai, coding chat gpt, chatpgt coding, open ai chatgpt, openai chatgpt, gpt 4, gpt 4 demo, gpt 4 coding, gpt 4 code, gpt 4 openai, gpt 4 chatgpt, chat gpt 4, chatgpt 4, chat gpt refactoring, gpt 4 refactoring, I Asked ChatGPT 4 To Refactor My Legacy Codebase",
    "scraped_at": 1685095329.729551,
    "genre": "Education",
    "views": "335253",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will try to get the brand new GPT-4 model to refactor a legacy codebase using ChatGPT. The old model always failed the task so let\\'s see if the new version improved on it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#openai #gpt4 #chatgpt\"",
    "lengthSeconds": "758",
    "uploadDate": "2023-03-16",
    "thumbnail_url": "https://i.ytimg.com/vi/y_NHMGZMb14/maxresdefault.jpg"
  },
  {
    "link": "watch?v=N4sDzidCudQ",
    "title": "GPT-4 Makes Old ChatGPT Look Like a JOKE!",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, chatgpt, openai, copilot, chatgpt developer, chatgpt code, coding ai, coding chat gpt, chatpgt coding, open ai chatgpt, openai chatgpt, gpt 4, gpt 4 demo, gpt 4 coding, gpt 4 code, gpt 4 openai, gpt 4 chatgpt, chat gpt 4, chatgpt 4",
    "scraped_at": 1685095330.5115526,
    "genre": "Education",
    "views": "393112",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will test the brand new GPT-4 (ChatGPT 4) model blindly. I will see if it can answer questions and write code that Junior, Mid, senior or even lead developers would have to answer as part of their day job.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#opena #gpt4 #chatgpt\"",
    "lengthSeconds": "775",
    "uploadDate": "2023-03-15",
    "thumbnail_url": "https://i.ytimg.com/vi/N4sDzidCudQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=z-5PcdINh6s",
    "title": "The Easiest Way to Create Serverless APIs in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, aws, aws .net, aws on .net, .net on aws, aws annotations, aws lambda, lambda, azure http triggers, http triggers, azure, azure functions, azure http trigger function c#, aws rest api, aws rest serverless",
    "scraped_at": 1685095325.4685774,
    "genre": "Education",
    "views": "34484",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "1094",
    "uploadDate": "2023-03-13",
    "thumbnail_url": "https://i.ytimg.com/vi/z"
  },
  {
    "link": "watch?v=KCBH1fEIrxc",
    "title": "My .NET Developer Roadmap for 2023",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net roadmap, c# roadmap, roadmap, c# roadmap 2023, c# roadmap 2022, .net roadmap 2022, .net roadmap 2023, roadmap nick chapsas, nick chapsas roadmap",
    "scraped_at": 1685095328.9896035,
    "genre": "Education",
    "views": "110169",
    "desc": "Give the roadmap a star on GitHub: https://github.com/Elfocrash/.NET-Backend-Developer-Roadmap\\\\nCheck out my courses at https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you my brand new roadmap for .NET developers for 2023. This roadmap includes everything that a .NET and C# developer should know to excel in their career in 2023.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "894",
    "uploadDate": "2023-03-09",
    "thumbnail_url": "https://i.ytimg.com/vi/KCBH1fEIrxc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4XSSC6uPFNA",
    "title": "The Awesome New Queue of .NET 6 That You Skipped",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, queue c#, queue .net, priority queue c#, priority queue, priority queue .net, priorityqueue, priorityqueue c#, .net 6",
    "scraped_at": 1685095327.877578,
    "genre": "Education",
    "views": "42495",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the new queue type of .NET 6, called PriorityQueue. \\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "711",
    "uploadDate": "2023-03-06",
    "thumbnail_url": "https://i.ytimg.com/vi/4XSSC6uPFNA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ZFWxSQ-KjUc",
    "title": "Stop using async void in C#! Do this instead.",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .NET 8, async task, async void, void, await async void, don",
    "scraped_at": 1685095325.1076021,
    "genre": "Education",
    "views": "44106",
    "desc": "Use code REST15 for 15% off the new From Zero to Hero - REST APIs in .NET course: https://bit.ly/restchapsas\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you why you should not be using async void in C#. It is a very common mistake that can have very catastrophic effects for your application and in this video I will explain why.\\\\n\\\\nBlog by G\\xc3\\xa9rald Barr\\xc3\\xa9: https://www.meziantou.net/fire-and-forget-a-task-in-dotnet.htm\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "792",
    "uploadDate": "2023-03-02",
    "thumbnail_url": "https://i.ytimg.com/vi/ZFWxSQ"
  },
  {
    "link": "watch?v=zCF-CUuVzGI",
    "title": "Random Finally Gets Its Missing Methods in .NET 8",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .NET 8, .net 8 random, random, random.shared, randomnumbergenerator, getitems, shuffle, random shuffle, Random Finally Gets Its Missing Methods in .NET 8",
    "scraped_at": 1685095328.0336022,
    "genre": "Education",
    "views": "32541",
    "desc": "Use code REST15 for 15% off the new From Zero to Hero - REST APIs in .NET course: https://bit.ly/restchapsas\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the new methods under the Random and RandomNumberGenerator classes that are coming in .NET 8.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "641",
    "uploadDate": "2023-02-27",
    "thumbnail_url": "https://i.ytimg.com/vi/zCF"
  },
  {
    "link": "watch?v=7z-xjijYfcI",
    "title": "How to use Discriminated Unions Today in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, discriminated unions, c# discriminated unions, .net disciminated unions, dus, use discriminated unions c#, oneof, result, option, result type c#, option type c#, How to use Discriminated Unions Today in C#",
    "scraped_at": 1685095325.8395965,
    "genre": "Education",
    "views": "47157",
    "desc": "Use code REST15 for 15% off the new From Zero to Hero - REST APIs in .NET course: https://bit.ly/restchapsas\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use Discriminated Unions in C# using a Nuget package called OneOf, so you don\\'t have to wait until the feature makes in in C# and be ready to migrate when it does launch.\\\\n\\\\nGive OneOf a star on GitHub: https://github.com/mcintyre321/OneOf\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1029",
    "uploadDate": "2023-02-23",
    "thumbnail_url": "https://i.ytimg.com/vi/7z"
  },
  {
    "link": "watch?v=xIA3t2Je3uQ",
    "title": "The List Best Practice That .NET 8 Makes Possible",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, return null, return empty collection, array.empty, enumerable.empty, list.emty, readonly.empty, The Enumerable Best Practice That .NET 8 Made Possible",
    "scraped_at": 1685095329.2065763,
    "genre": "Education",
    "views": "37145",
    "desc": "Use code REST15 for 15% off the new From Zero to Hero - REST APIs in .NET course: https://bit.ly/restchapsas\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a technique that you can use that leads to cleaner and safer code and I am also going to show you how .NET 8, optimized its biggest drawback.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "520",
    "uploadDate": "2023-02-20",
    "thumbnail_url": "https://i.ytimg.com/vi/xIA3t2Je3uQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jblRYDMTtvg",
    "title": "The Best Way to Validate Your Settings in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, asp.net, asp.net core, asp.net core options, options, options validation, dataannotations, c# settings validation, settings validation, .net validation, fluent validation",
    "scraped_at": 1685095325.7585764,
    "genre": "Education",
    "views": "49172",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can validate your settings or options for your .NET and ASP.NET Core applications. I\\'m also going to show you how you can extend that to use FluentValidations too.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1097",
    "uploadDate": "2023-02-16",
    "thumbnail_url": "https://i.ytimg.com/vi/jblRYDMTtvg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Xeq8YGEyyp8",
    "title": "You Completely Misunderstand How Strings Work in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, string intern, string.intern, string interning, string pool, string optimization, clr, .net clr, .net runtime strings",
    "scraped_at": 1685095328.3266025,
    "genre": "Education",
    "views": "36591",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain how strings work in C# and introduce you to the concept of string interning, which based on previous comments, is being misunderstood by most people.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "526",
    "uploadDate": "2023-02-13",
    "thumbnail_url": "https://i.ytimg.com/vi/Xeq8YGEyyp8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=GrJJXixjR8M",
    "title": "Implementing API Key Authentication in ASP.NET Core",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, asp.net, asp.net core, api key, api key authentication, api key auth, api key auth .net, api key auth c#, api key auth .net core, api key auth asp.net core, Implementing API Key Authentication in ASP.NET Core",
    "scraped_at": 1685095328.1825788,
    "genre": "Education",
    "views": "37264",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you all the approaches you can use to add API Key based authentication in you ASP.NET Core APIs. I will cover a generic approach and then Controller and Minimal API specific approaches and also show you how you can add Open API support for Swagger.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1077",
    "uploadDate": "2023-02-09",
    "thumbnail_url": "https://i.ytimg.com/vi/GrJJXixjR8M/maxresdefault.jpg"
  },
  {
    "link": "watch?v=wnqBmv1RJNE",
    "title": "Clean Message Bus Consumers with MediatR in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, Building Clean Message Consumers with MediatR in .NET, mediatr, mediator, mediatr c#, cqrs, mediatr cqrs, message consumer, message bus, event stream, event log, asp.net core",
    "scraped_at": 1685095326.7955775,
    "genre": "Education",
    "views": "37824",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "1640",
    "uploadDate": "2023-02-06",
    "thumbnail_url": "https://i.ytimg.com/vi/wnqBmv1RJNE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=OjFuBMhJmr4",
    "title": "Optimizing String Performance Easily in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, strings c#, string memory allocations, c# allocations, c# heap, heap vs stack, remove memory allocations c#",
    "scraped_at": 1685095330.154554,
    "genre": "Education",
    "views": "32235",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "721",
    "uploadDate": "2023-02-02",
    "thumbnail_url": "https://i.ytimg.com/vi/OjFuBMhJmr4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=hcCT5J-SKEA",
    "title": "The New Constructor Type Coming in C# 12 is Weird",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, c# new features, c# primary constructors, primary constructors, c# 12, c# 12 features, c# 12 new features, c# 12 primary constructors, The New Constructor Type Coming in C# 12 is Weird",
    "scraped_at": 1685095325.3985775,
    "genre": "Education",
    "views": "60579",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "559",
    "uploadDate": "2023-01-30",
    "thumbnail_url": "https://i.ytimg.com/vi/hcCT5J"
  },
  {
    "link": "watch?v=xlqcT4NSrZw",
    "title": "The Easiest Way to Measure Your Method\u2019s Performance in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, methodtimer, opentelemetry, telemetry, c# open telemetry, c# opentelementry, .net methodtimer, c# methodtimer, The Easiest Way to Measure Your Method",
    "scraped_at": 1685095325.0396018,
    "genre": "Education",
    "views": "46718",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "770",
    "uploadDate": "2023-01-26",
    "thumbnail_url": "https://i.ytimg.com/vi/xlqcT4NSrZw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=rygIP5sh00M",
    "title": "Double the Performance of your Dictionary in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dictionary, dictionary performance, c# dictionary, .net dictionary, dictionary tutorial c#, hashtable c#, hashtable, hashtable .net, Double the Performance of your Dictionary in C#",
    "scraped_at": 1685095325.991602,
    "genre": "Education",
    "views": "46684",
    "desc": "Enroll to \\\\\"",
    "lengthSeconds": "911",
    "uploadDate": "2023-01-23",
    "thumbnail_url": "https://i.ytimg.com/vi/rygIP5sh00M/maxresdefault.jpg"
  },
  {
    "link": "watch?v=WjTifkBlJHQ",
    "title": "New C# features are just syntactic sugar",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, Why this way of adding C# features can be dangerous, new c# features, adding c# features, c# 11, c# 12, records, lowering, c# lowering",
    "scraped_at": 1685095330.0905256,
    "genre": "Education",
    "views": "20318",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nJoin the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a closer look to how most C# features are being added into the language to help you understand why they can be dangerous to work with if you don\\'t fully grasp some behind the scenes concepts.\\\\n\\\\nWorkshops\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\ndotnetdays | 20-21 April 2023 | https://bit.ly/dotnetdays2023\\\\nNDC Oslo | 22-26 May 2023 | https://bit.ly/ndcoslo2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "481",
    "uploadDate": "2023-01-19",
    "thumbnail_url": "https://i.ytimg.com/vi/WjTifkBlJHQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Ij0fu-fNLJM",
    "title": "The New Built-in Guard Clauses Coming in .NET 8",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, throw, argumentoutofrangeexception, argumentoutofrangeexception c#, guard, guard clause, guard clauses, .net guard clauses, guard clause example, beyong the bang bang operator, bang bang, c# bang bang, The NEW built",
    "scraped_at": 1685095327.419602,
    "genre": "Education",
    "views": "32595",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nJoin the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the new guard clauses that are being added in .NET 8. Most of us using guard clauses, use a separate nuget package but it\\'s awesome to see that Microsoft is adding first party support for some very common scenarios.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "455",
    "uploadDate": "2023-01-16",
    "thumbnail_url": "https://i.ytimg.com/vi/Ij0fu"
  },
  {
    "link": "watch?v=RgKa-tjnUMA",
    "title": "Using Latest C# Features in Any Old .NET Version",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, c# 8 .net framework, c# 9 .net framework, c# 10 .net framework, C# 11 .net framework, latest c# in .net framework, Adding C# 11 support in your old .NET Framework codebase",
    "scraped_at": 1685095328.700601,
    "genre": "Education",
    "views": "29704",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nJoin the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use the latest C# 11 in your old codebases such as .NET Framework or UWP.\\\\n\\\\nGive PolySharp a star on GitHub: https://github.com/Sergio0694/PolySharp\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "554",
    "uploadDate": "2023-01-12",
    "thumbnail_url": "https://i.ytimg.com/vi/RgKa"
  },
  {
    "link": "watch?v=8Asq7ymF1R8",
    "title": "Implementing Modern API Versioning in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, minimal api, web api, minimal api versioning, versioning, api versioning, .net api versioning, web api versioning, how to version api, Implementing modern API versioning in .NET",
    "scraped_at": 1685095327.725578,
    "genre": "Education",
    "views": "44188",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement modern API versioning in .NET using the latest tooling available. In this video we will focus on Minimal APIs since this is the new feature added in .NET 6, but this approach can be used for Web APIs as well.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nOld API Versioning video: https://www.youtube.com/watch?v=iVHtKG0eU_s\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "809",
    "uploadDate": "2023-01-09",
    "thumbnail_url": "https://i.ytimg.com/vi/8Asq7ymF1R8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=7hBPI0xYezo",
    "title": "When Readonly isn\u2019t Readonly in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, readonly, readonly c#, readonly collections c#, ireadonlycollection, ireadonlycollection c#, ireadonlydictionary example, ReadOnly Collections Aren",
    "scraped_at": 1685095326.710602,
    "genre": "Education",
    "views": "20259",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain what ReadOnly collections such as IReadOnlyList and IReadOnlyDictionary are and how they really work behind the scenes.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "717",
    "uploadDate": "2023-01-05",
    "thumbnail_url": "https://i.ytimg.com/vi/7hBPI0xYezo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2qDULMdhN3Y",
    "title": "Inject C# In Any .NET App With This Secret Entry Point",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet_startup_hooks, startup hooks, startup hook, .net startup hook, inject code in c#, inject code in .net, Running C# using .NET",
    "scraped_at": 1685095327.4946024,
    "genre": "Education",
    "views": "47916",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a .NET feature that very few people know, called startup hooks. Startup hooks allow you to inject .NET code into your application and have it run as part of your app\\'s process without having to build it with the application every time.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "906",
    "uploadDate": "2023-01-02",
    "thumbnail_url": "https://i.ytimg.com/vi/2qDULMdhN3Y/maxresdefault.jpg"
  },
  {
    "link": "watch?v=edQXPpRKlSY",
    "title": "Is Dynamic in C# Actually Slow?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, Is dynamic in C# ACTUALLY slow",
    "scraped_at": 1685095327.199602,
    "genre": "Education",
    "views": "27914",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will try to show you the real impact of using dynamic in C#, try to understand why it was added and compare it to alternatives to see how slow it really is.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #dynamic\"",
    "lengthSeconds": "734",
    "uploadDate": "2022-12-29",
    "thumbnail_url": "https://i.ytimg.com/vi/edQXPpRKlSY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=YvKvsBjkKlY",
    "title": "The C# Feature I Use Instead of Reflection",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, for when reflection can",
    "scraped_at": 1685095326.1506016,
    "genre": "Education",
    "views": "33177",
    "desc": "Check out the ABP Framework here: https://bit.ly/3UmfRbh\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a set of attributes that allow you to get compile-time metadata about your code and use them in runtime. In many cases the data you will collect are impossible to get with something like reflection during runtime.\\\\n\\\\nThis video is sponsored by abp.io.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "626",
    "uploadDate": "2022-12-26",
    "thumbnail_url": "https://i.ytimg.com/vi/YvKvsBjkKlY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=aaC16Fv2zes",
    "title": "Settling the Biggest Await Async Debate in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, async await, async, await, async .net, async c#, async await .net, async await c#, Settling the biggest await async debate in .NET",
    "scraped_at": 1685095328.5515776,
    "genre": "Education",
    "views": "103522",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a look at one of the biggest await async debates in .NET and try to find the best answer for each usecase.\\\\n\\\\nWorkshops: https://bit.ly/nickworkshops\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "886",
    "uploadDate": "2022-12-22",
    "thumbnail_url": "https://i.ytimg.com/vi/aaC16Fv2zes/maxresdefault.jpg"
  },
  {
    "link": "watch?v=8JkHgymp2R4",
    "title": "Validate your dependencies correctly in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dependency injection validation, dependencies, di container, dependency injection container, dependency validation, dependency validation .net, di container validation, Validating your dependencies correctly in .NET",
    "scraped_at": 1685095326.5495772,
    "genre": "Education",
    "views": "32907",
    "desc": "Check out the ABP Framework here: https://bit.ly/3UmfRbh\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can validate your dependencies that are resolved through your dependency injection container before it\\'s a problem that takes down your application.\\\\n\\\\nThis video is sponsored by abp.io.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "910",
    "uploadDate": "2022-12-19",
    "thumbnail_url": "https://i.ytimg.com/vi/8JkHgymp2R4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=kowKK6tEwd0",
    "title": "What are the Frozen Collections coming in .NET?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 8, frozenset, frozen dictionary, frozen collections, frozen collections c#, frozen collections .net, .net frozen, c# frozen, What are the Frozen Collections coming in .NET",
    "scraped_at": 1685095326.8815756,
    "genre": "Education",
    "views": "45643",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will give you a preview to the brand new Frozen Collections coming in .NET 8. The main two types are FrozenSet and FrozenDictionary and in this video we will see what they do, why we need them and how they perform to understand how they fit in our applications.\\\\n\\\\nWorkshops\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\ndotnetdays | 20-21 April 2023 | https://bit.ly/dotnetdays2023\\\\nNDC Oslo | 22-26 May 2023 | https://bit.ly/ndcoslo2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "850",
    "uploadDate": "2022-12-15",
    "thumbnail_url": "https://i.ytimg.com/vi/kowKK6tEwd0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=NTz99yN2urc",
    "title": "Are you using the Stopwatch efficiently in .NET?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, stopwatch, stopwatch c#, stopwatch .net, stopwatch benchmark, stopwatch timer, Use the Stopwatch efficiently in .NET, stopwatch class, how to use stopwatch",
    "scraped_at": 1685095329.3606021,
    "genre": "Education",
    "views": "26936",
    "desc": "Check out the ABP Framework here: https://bit.ly/3FgwZLu\\\\nJoin the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a new way to use the Stopwatch class in C#, that was introduced in .NET 7 which makes used it, more efficient.\\\\n\\\\nThis video is sponsored by abp.io.\\\\n\\\\nWorkshops\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\ndotnetdays | 20-21 April 2023 | https://bit.ly/dotnetdays2023\\\\nNDC Oslo | 22-26 May 2023 | https://bit.ly/ndcoslo2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "515",
    "uploadDate": "2022-12-12",
    "thumbnail_url": "https://i.ytimg.com/vi/NTz99yN2urc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=z2CKQFi746Q",
    "title": "ChatGPT can write better code than me",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, chatgpt, openai, copilot, chatgpt developer, chatgpt code, coding ai, coding chat gpt, chatpgt coding, c# chargpt, open ai chatgpt, openai chatgpt, ChatGPT is a better C# developer than me",
    "scraped_at": 1685095330.2975254,
    "genre": "Education",
    "views": "298972",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a look at the brand new AI chatbot laucnhed by OpenAI called ChatGPT.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #chatgpt\"",
    "lengthSeconds": "666",
    "uploadDate": "2022-12-08",
    "thumbnail_url": "https://i.ytimg.com/vi/z2CKQFi746Q/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jBhAOA-P938",
    "title": "Adding properties to classes you don't own in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, conditionalweaktable, conditional weak table, Adding properties to classes you don",
    "scraped_at": 1685095328.9195776,
    "genre": "Education",
    "views": "35021",
    "desc": "Join the NDC Conferences Giveaway: https://mailchi.mp/nickchapsas/ndc\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use a, not so well known, C# type that allows you to add properties in types you don\\'t own. This type is called ConditionalWeakTable and it has a really interesting feature when it comes to memory management which makes it really useful.\\\\n\\\\nWorkshops\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\ndotnetdays | 20-21 April 2023 | https://bit.ly/dotnetdays2023\\\\nNDC Oslo | 22-26 May 2023 | https://bit.ly/ndcoslo2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "560",
    "uploadDate": "2022-12-05",
    "thumbnail_url": "https://i.ytimg.com/vi/jBhAOA"
  },
  {
    "link": "watch?v=3QJDJl-zDFM",
    "title": "Using .NET\u2019s NativeAOT to fix the biggest serverless issue",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, aws, .net 7, nativeaot, native aot, .net native aot, .net machine code, azure functions, azure, aws native aot, aws lambda nativeaot, aws reinvent, nativeaot .net 7, ahead of time, ahead of time compilation",
    "scraped_at": 1685095326.2235775,
    "genre": "Education",
    "views": "27230",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "1172",
    "uploadDate": "2022-12-01",
    "thumbnail_url": "https://i.ytimg.com/vi/3QJDJl"
  },
  {
    "link": "watch?v=BV_f2XnqlRE",
    "title": "Why you no longer need a Dockerfile in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, dockerfile, .net 7, .net 7 sdk, .net 7 cli, .net 7 docker, .net 7 dockerfile, dockerfile .net, dockerfile for .net, Why you no longer need a Dockerfile in .NET 7",
    "scraped_at": 1685095331.3325248,
    "genre": "Education",
    "views": "61234",
    "desc": "Until the 28th of Nov 2022 use discount code BF2022 for up to 25% off\\\\nat: https://dometrain.com\\\\n\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the Docker related updated that Microsoft added in the .NET 7 SDK. You no longer need a Dockerfile to specify how your project should be built.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #docke\"",
    "lengthSeconds": "561",
    "uploadDate": "2022-11-28",
    "thumbnail_url": "https://i.ytimg.com/vi/BV_f2XnqlRE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=cwBrWn4m9y8",
    "title": "The weirdest way to loop in C# is also the fastest",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, fast loop, c# fast loop, c# for vs foreach, for vs foreach, performance loop, loop performance, loop performance c#, .net loop, The weirdest way to loop in C#, The weirdest way to loop in C# is also the fastest",
    "scraped_at": 1685095327.6505797,
    "genre": "Education",
    "views": "225330",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what I think is the weirdest way to iterate a collection in C#, but ironically it is also the fastest. Even Microsoft is using the approach in many of their repositories to optimise different operations.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "775",
    "uploadDate": "2022-11-24",
    "thumbnail_url": "https://i.ytimg.com/vi/cwBrWn4m9y8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=s_NrqRI7Gnc",
    "title": "The new .NET Exception that should NEVER be thrown",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, The new .NET Exception that should NEVER be thrown, unreachableexception, unreachable exception, exception, c# exception, .net exception, .net 7 exception",
    "scraped_at": 1685095331.9345467,
    "genre": "Education",
    "views": "32669",
    "desc": "Until the 28th of Nov 2022 use discount code BF2022 for up to 25% off\\\\nat: https://dometrain.com\\\\n\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a look at a brand new exception that was added in .NET 7, that was designed to never be thrown.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "495",
    "uploadDate": "2022-11-21",
    "thumbnail_url": "https://i.ytimg.com/vi/s_NrqRI7Gnc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=1_xY6JwSm94",
    "title": "The C# keyword you can ONLY use in LINQ, but carefully",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, linq, linq performance, linq slow, linq fast, linq c#, linq .net, linq .net 7, linq let, let keyword, old linq vs new linq, let, let keyword c#",
    "scraped_at": 1685095327.346577,
    "genre": "Education",
    "views": "32986",
    "desc": "Until the 28th of Nov 2022 use discount code BF2022 for up to 25% off\\\\nat: https://dometrain.com\\\\n\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the let keyword, which is a C# keyword only usable within LINQ. The let keyword exists in many programming languages and it is a common misconception that C# doesn\\'t have it. It does, but you probably haven\\'t seen it because of how it is used.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "598",
    "uploadDate": "2022-11-17",
    "thumbnail_url": "https://i.ytimg.com/vi/1_xY6JwSm94/maxresdefault.jpg"
  },
  {
    "link": "watch?v=cqCBhkNroDI",
    "title": "Every single feature added in C# 11",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# 11 features, c# 11, c# new features, c#, c# .net 7 features, .net 7 features, .net new features, .net core new features, asp.net core 7 features, c# 11 .net 7, Every single feature added in C# 11",
    "scraped_at": 1685095329.2886026,
    "genre": "Education",
    "views": "94911",
    "desc": "Until the 28th of Nov 2022 use discount code BF2022 for up to 25% off\\\\nat: https://dometrain.com\\\\n\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to every single feature added in C# 11.\\\\n\\\\nTimestamps\\\\nRaw string literals - 0:00\\\\nList patterns - 5:04\\\\nGenerics on attributes - 7:41\\\\nExtended nameof scope - 9:11\\\\nUTF-8 string literals - 10:08\\\\nString interpolated new line - 12:29\\\\nGeneric maths/abstracting over static members - 13:23\\\\nRequired members - 16:14\\\\nFile scoped types - 17:45\\\\nPattern matching on Spans for constant strings - 19:47\\\\nAuto-default structs - 20:57\\\\nImproved method group conversion to delegate - 21:51\\\\nNumeric IntPtr - 22:52\\\\nref fields and ref scoped variables - 23:34\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1626",
    "uploadDate": "2022-11-14",
    "thumbnail_url": "https://i.ytimg.com/vi/cqCBhkNroDI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Pt-0KM5SxmI",
    "title": "Stop using the Process class for CLI interactions in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, cliwrap, cli c#, cliwrap c#, cliwrap .net, oleksii holub, calling the cli in c#, Calling the Command Line in C#",
    "scraped_at": 1685095326.6216009,
    "genre": "Education",
    "views": "44122",
    "desc": "Check out the ABP Framework here: https://bit.ly/3NGacLw\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can control your machine\\'s CLI in an elegant way in C#. .NET\\'s built in Process class is a total mess and really hard to work with so we will be using a Nuget package called CliWrap, to fix all of those problems and add some very nice features on top of it.\\\\n\\\\nGive CliWrap a star on GitHub: https://github.com/Tyrrrz/CliWrap\\\\n\\\\nThis video is sponsored by abp.io.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "904",
    "uploadDate": "2022-11-10",
    "thumbnail_url": "https://i.ytimg.com/vi/Pt"
  },
  {
    "link": "watch?v=aaFLtcf8cO4",
    "title": "Using MediatR in .NET? Maybe replace it with this",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, mediatr, mediator, mediator performance, jimmy bogard, source generator, source gen, source generator c#, source generator mediator, faster mediator",
    "scraped_at": 1685095327.05058,
    "genre": "Education",
    "views": "55569",
    "desc": "Check out the ABP Framework here: https://bit.ly/3zDZDmg\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can improve MediatR\\'s performance without fundamentally changing your code, by using a source generated version of MediatR. \\\\n\\\\nGive Mediator a star on GitHub: https://github.com/martinothamar/Mediator\\\\n\\\\nThis video is sponsored by abp.io.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "709",
    "uploadDate": "2022-11-07",
    "thumbnail_url": "https://i.ytimg.com/vi/aaFLtcf8cO4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=E4TeWBFzcCw",
    "title": "The BEST way to reset your database for testing in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, dotnet docker, testcontainers, running docker from c#, respawn, respawn database, respawn jimmy bogard, jimmy bogard, reset database, reset data integration tests, reset test data, The BEST way to reset your database for testing in .NET",
    "scraped_at": 1685095327.9536026,
    "genre": "Education",
    "views": "43378",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what I think is the best way to reset your database to a clean state, every time you run a test. This works great with integration testing but other forms of testing can use the same technique.\\\\n\\\\nGive Respawn a star on GitHub: https://github.com/jbogard/Respawn\\\\n\\\\nWorkshops\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\nNDC Oslo | 22-26 May 2023 | https://bit.ly/ndcoslo2023workshop\\\\n\\\\nGive TestContainers a star on GitHub: https://github.com/testcontainers/testcontainers-dotnet\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #testing\"",
    "lengthSeconds": "794",
    "uploadDate": "2022-11-03",
    "thumbnail_url": "https://i.ytimg.com/vi/E4TeWBFzcCw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=5F3uQWomFMY",
    "title": "How to use a Dead Letter Queue in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, sqs, simple queue service aws, sqs aws, aws sqs, sqs tutorial, sqs tutorial dotnet, sqs c#, sqs .net, sqs .net core, sqs dead letter queue, dlq, dead",
    "scraped_at": 1685095329.945525,
    "genre": "Education",
    "views": "28071",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "888",
    "uploadDate": "2022-10-31",
    "thumbnail_url": "https://i.ytimg.com/vi/5F3uQWomFMY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ileC_qyLdD4",
    "title": "How to await ANYTHING in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, how to await anything in c#, await in c#, getawaiter, await async c#, await async .net, how to await anything in c# and why you probably shouldn",
    "scraped_at": 1685095329.8025486,
    "genre": "Education",
    "views": "41549",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can turn any C# and .NET type into something that is awaitable but also explain why it is something you want to be very careful with doing.\\\\n\\\\nWorkshops\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "526",
    "uploadDate": "2022-10-27",
    "thumbnail_url": "https://i.ytimg.com/vi/ileC_qyLdD4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=yAaDn_-0rZY",
    "title": "Controlling your debugging experience in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# debug, c# debugging, how to debug c#, debug visual studio, debug rider, debuggerdisplay, debuggerproxytype, debugger attributes, debug attributes c#, Enhancing your debugging experience in C#",
    "scraped_at": 1685095327.125579,
    "genre": "Education",
    "views": "41462",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can customize your debugging experience in C# by using a set of attributes, called the Debugger attributes. Such attributes allow you to change the behavior of the debugger and not only make it easier for you to debug your code easier but also gives you control on how your code consumers also get to debug it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "810",
    "uploadDate": "2022-10-24",
    "thumbnail_url": "https://i.ytimg.com/vi/yAaDn_"
  },
  {
    "link": "watch?v=NOLn0QwGlEE",
    "title": "How Regex in C# can kill your app",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, How Regex can take down your server in .NET, regex performance, nonbacktracking, backtracking regex, regex performance c#, catastrophic backtracking, regex timeout, regex timeout c#",
    "scraped_at": 1685095329.5095546,
    "genre": "Education",
    "views": "29997",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how a specific feature of Regex can be abused to effectively attack your server and service. This feature is called backtracking and the attack is commonly referred to as catastrophic backtracking. In this video I will explain what it is, how it works and show you how to prevent it.\\\\n\\\\nWorkshops\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "722",
    "uploadDate": "2022-10-20",
    "thumbnail_url": "https://i.ytimg.com/vi/NOLn0QwGlEE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jmmz1cInNow",
    "title": "Adding a BETTER way to loop in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, new c# feature, custom c# feature, new c# features, Adding NEW C# features without changing the compiler, Adding a NEW feature in C# without changing the compiler, secret c# extension",
    "scraped_at": 1685095331.8665245,
    "genre": "Education",
    "views": "74308",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the secret extensibility points of C#, which will allow us to bring an AWESOME feature from Kotlin into the language. Not only we will make it work as if it was an official C# feature but we will also make sure it is really performant and fast.\\\\n\\\\nWorkshops\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "564",
    "uploadDate": "2022-10-17",
    "thumbnail_url": "https://i.ytimg.com/vi/jmmz1cInNow/maxresdefault.jpg"
  },
  {
    "link": "watch?v=3U_TJZU06Ag",
    "title": "The electrical pattern that will keep your .NET services alive",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, how to implement circuit breaker, how to implement circuit breaker in microservices, The electrical concept that protects your services in C#, circuit breaker, polly, polly circuit breaker, circuit breaker example, circuit breaker tutorial, what is circuit breaker",
    "scraped_at": 1685095329.135576,
    "genre": "Education",
    "views": "63697",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement the circuit breaker resilience pattern in your .NET and C# codebase. It is a pattern that lives in most microservices and it ensures that when things go wrong, the are handled and recovered in a graceful and controlled way. We will be using Polly to make the implementation extremely easy.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1007",
    "uploadDate": "2022-10-13",
    "thumbnail_url": "https://i.ytimg.com/vi/3U_TJZU06Ag/maxresdefault.jpg"
  },
  {
    "link": "watch?v=WRB4OHpSXHs",
    "title": "How Random can silently break your app in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, random, random thread safe, threadstatic, threadstatic attribute, threadlocal, random .net 7, random seed, Random in .NET is not thread",
    "scraped_at": 1685095326.470602,
    "genre": "Education",
    "views": "25528",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you why and how the Random class in C# is NOT thread-safe and what problems that can cause. The bugs that can be created by this issue can be pretty but because Random fails in a very interesting way.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "599",
    "uploadDate": "2022-10-10",
    "thumbnail_url": "https://i.ytimg.com/vi/WRB4OHpSXHs/maxresdefault.jpg"
  },
  {
    "link": "watch?v=sa3XsvSiMtk",
    "title": "Compiling C# into NATIVE code, just like Go, Rust and C++",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# native, nativeaot, native aot, native c# code, compile c# native, run native c#, Compiling C# into NATIVE code, .net 7, .net 7 native aot, .net 7 nativeaot",
    "scraped_at": 1685095331.549553,
    "genre": "Education",
    "views": "67116",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use .NET 7\\'s new NativeAOT capabilities to compile your C# code into NATIVE code that runs just like Rust, Go, C or C++!\\\\n\\\\nWorkshops\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "544",
    "uploadDate": "2022-10-06",
    "thumbnail_url": "https://i.ytimg.com/vi/sa3XsvSiMtk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=LfgBm5M8eUM",
    "title": "Microsoft FINALLY fixed foreach loops in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, C# list, list, ilist, ienumerable, list iteration, span, .net 7 list, Microsoft FINALLY fixed the foreach loop in .NET 7, for vs foreach, for loop, foreach loop, getenumerator, for loop list, foreach loop list, foreach loop vs for loop",
    "scraped_at": 1685095327.2705965,
    "genre": "Education",
    "views": "68039",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how Microsoft fixed one of the longest standing performance disparities between for and foreach loops in C# and .NET but it also looks like they broke something along the way.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "500",
    "uploadDate": "2022-10-03",
    "thumbnail_url": "https://i.ytimg.com/vi/LfgBm5M8eUM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=5DrGdyxnO5A",
    "title": "The RIGHT way to deal with Date and Time in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, C# datetime, datetime vs datetimeoffset, datetimeoffset, unit test datetime, datetime testing, unit test datetime c#, nick chapsas testing, The RIGHT way to deal with C#",
    "scraped_at": 1685095331.619525,
    "genre": "Education",
    "views": "54626",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use DateTime and DateTimeOffset correctly in your code, to make sure that it is testable. This is a technique that even Microsoft themselves are using and it is considered a best practice when dealing with time and date sensitive code.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "510",
    "uploadDate": "2022-09-29",
    "thumbnail_url": "https://i.ytimg.com/vi/5DrGdyxnO5A/maxresdefault.jpg"
  },
  {
    "link": "watch?v=xm8eQenL7wA",
    "title": "What is the NEW \"file\" keyword of C# 11?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, file keyword, file keyword c#, .net file keyword, source generators, The NEW C# 11 keyword you probably won",
    "scraped_at": 1685095326.299598,
    "genre": "Education",
    "views": "37022",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the brand new file keyword added in C# 11. It is a very interesting keyword that only a subset of people will be using.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "505",
    "uploadDate": "2022-09-26",
    "thumbnail_url": "https://i.ytimg.com/vi/xm8eQenL7wA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Y2YOaqSAJAQ",
    "title": "The .NET 7 feature that gives meaning to your Strings",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, stringsyntax, string syntax, stringsyntaxattribute, string syntax attribute, .net 7, .net 7 new features, c# 11 new features, The .NET 7 feature that gives meaning to your Strings",
    "scraped_at": 1685095326.9526029,
    "genre": "Education",
    "views": "44262",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a new feature that\\'s being added in .NET 7 which makes working with strings way easier. It adds meaning to the simple string type and makes IDEs take advantage of their existing autocomplete and syntax highlighting logic to make it easier for you to work with special string types.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "437",
    "uploadDate": "2022-09-22",
    "thumbnail_url": "https://i.ytimg.com/vi/Y2YOaqSAJAQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=nJH0PC2Pubs",
    "title": "The CORRECT way to implement Retries in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, polly, polly retries, retry in code, code retries, polly nick, retry policy, The CORRECT way to implement Retries in .NET, retries in c#, retries in .net, .net retries, c# polly, .net polly, c# polly retry",
    "scraped_at": 1685095324.9655764,
    "genre": "Education",
    "views": "68242",
    "desc": "Get started with Octopus Deploy: https://oc.to/nickchapsas\\\\nJoin Octopus Deploy\\'s free Slack community:  https://oc.to/SlackCommunity\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can make your code more resilient by implementing retry policies. Retry policies power pretty much every microservice out there in some capacity, but due to the nature of having multiple systems coming together and needing to deal with things that might fail.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1020",
    "uploadDate": "2022-09-19",
    "thumbnail_url": "https://i.ytimg.com/vi/nJH0PC2Pubs/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jUZ3VKFyB-A",
    "title": "The fastest way to iterate a List in C# is NOT what you think",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, C# list, list, ilist, ienumerable, list iteration, fast list iteration, fast list enumeration, span, list span, .net span, .net 7 list, fast list c#, The fastest way to iterate a List in C# is NOT what you think",
    "scraped_at": 1685095330.5855477,
    "genre": "Education",
    "views": "132114",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you all the way you can iterate a List in C# and then show you what is by far the fastest and most memory efficient way. You might have guessed where this is going :)\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "822",
    "uploadDate": "2022-09-15",
    "thumbnail_url": "https://i.ytimg.com/vi/jUZ3VKFyB"
  },
  {
    "link": "watch?v=d76WWAD99Yo",
    "title": "Why all your classes should be sealed by default in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, seal, sealed keyword, c# seal class, c# seal, inheritance, c# inheritance, composition over inheritance, Why almost all your classes should be sealed in C#",
    "scraped_at": 1685095331.4765532,
    "genre": "Education",
    "views": "81490",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain why you should be sealing all your C# classes by default. We will take a look at the functional aspect of the sealing feature and then take a look at the performance as well.\\\\n\\\\nLink to analyzer issue: https://github.com/dotnet/runtime/issues/49944\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "703",
    "uploadDate": "2022-09-12",
    "thumbnail_url": "https://i.ytimg.com/vi/d76WWAD99Yo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=K1Ye_QEpAq8",
    "title": "Stop using LINQ to order your primitive collections in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, linq, linq performance, linq slow, linq fast, improve linq, linq c#, linq .net, linq .net 7, The 2 NEW LINQ methods you probably shouldn",
    "scraped_at": 1685095330.3675249,
    "genre": "Education",
    "views": "81401",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a couple of new LINQ methods introduced in .NET 7 that you probably shouldn\\'t be using. There are some even faster and more memory efficient alternatives that you can use instead, depending on your usecase.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "896",
    "uploadDate": "2022-09-08",
    "thumbnail_url": "https://i.ytimg.com/vi/K1Ye_QEpAq8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=zCKwlgtVLnQ",
    "title": "The INSANE performance boost of LINQ in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, linq, linq performance, linq slow, linq fast, improve linq, linq c#, linq .net, linq .net 6, linq .net 7, The INSANE performance boost of LINQ in .NET 7",
    "scraped_at": 1685095327.5696023,
    "genre": "Education",
    "views": "148633",
    "desc": "The first 100 of you can use code SCHOOL2022 for 20% off courses and bundles at https://dometrain.com\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the incredible performance improvements that LINQ got in several methods in .NET 7. We will also see how it was achieved and discuss where .NET might be going next.\\\\n\\\\nBlog link: https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/#vectorization\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #linq\"",
    "lengthSeconds": "693",
    "uploadDate": "2022-09-05",
    "thumbnail_url": "https://i.ytimg.com/vi/zCKwlgtVLnQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=cLsmW7a8MkU",
    "title": "How IEnumerable can kill your performance in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, How IEnumerable can kill your performance in C#, performance, IEnumerable, IEnumerable c#, IEnumerable performance, multiple enumeration",
    "scraped_at": 1685095329.0606022,
    "genre": "Education",
    "views": "78900",
    "desc": "The first 100 of you can use code SCHOOL2022 for 20% off courses and bundles at https://dometrain.com\\\\n\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how IEnumerable can harm your application\\'s performance. I will explain why it happens, what you can do about it and how to deal with it in future scenarios.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "662",
    "uploadDate": "2022-09-01",
    "thumbnail_url": "https://i.ytimg.com/vi/cLsmW7a8MkU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=dIu5EisoB_s",
    "title": "The fastest way to cast objects in C# is not so obvious",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, cast object c#, c# casting, casting in c#, type casting c#, casting types in c#, Cast, OfType, TypeOf, The fastest way to cast objects in C# is not what you think",
    "scraped_at": 1685095329.874525,
    "genre": "Education",
    "views": "66682",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you all the main ways you can cast an object in C# and take a closer look at how the fastest way to cast objects when working on enumerables is probably not what you think it is.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "670",
    "uploadDate": "2022-08-29",
    "thumbnail_url": "https://i.ytimg.com/vi/dIu5EisoB_s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=WeHZ_NMC-Jo",
    "title": "Making .NET 7\u2019s NEW output cache scale with Redis",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net caching, caching, cache, output cache, response cache, response caching in asp.net core, response cache asp.net core, c# response cache, output caching in mvc, output caching .net, output caching asp.net core, redis, output cache redis, redis cache, redis in .net, redis asp.net",
    "scraped_at": 1685095330.9675272,
    "genre": "Education",
    "views": "24944",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can integrate Redis into .NET 7\\'s brand new output caching. Using a distributed cache that is extremely fast and scalable, like Redis, will allow you application to scale horizontaly while using one single cache for all your responses.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #caching\"",
    "lengthSeconds": "857",
    "uploadDate": "2022-08-25",
    "thumbnail_url": "https://i.ytimg.com/vi/WeHZ_NMC"
  },
  {
    "link": "watch?v=IDJv0S9yf7Q",
    "title": "Getting started with Pub/Sub Messaging in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, sqs, simple queue service aws, sqs aws, aws sqs, sqs tutorial, sqs tutorial dotnet, sqs c#, sqs .net, sqs .net core, Getting started with Pub",
    "scraped_at": 1685095331.7625268,
    "genre": "Education",
    "views": "36454",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "1362",
    "uploadDate": "2022-08-22",
    "thumbnail_url": "https://i.ytimg.com/vi/IDJv0S9yf7Q/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2TT3suofNlo",
    "title": "The 2 MediatR features people don't know about but should",
    "tags": "coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, cqrs, mediatr, design patterns, clean architecture, clean code, asp.net core api, dotnet, .net, mediator, mediator .net, mediatr c#, mediator c#, The 2 MediatR features people don",
    "scraped_at": 1685095330.0185256,
    "genre": "Education",
    "views": "30706",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the two MediatR feature that are lesser know compared to the flagship request, handler, response one. Those features are the notification support and the streaming support that MediatR has. The streaming side of things is very interesting because previously it could have been a dealbreaker but not it is possible to implement.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nTimestamps\\\\nThe flagship feature - 0:00\\\\nNotification support - 3:07\\\\nStreaming support - 8:30\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #mediatr\"",
    "lengthSeconds": "827",
    "uploadDate": "2022-08-18",
    "thumbnail_url": "https://i.ytimg.com/vi/2TT3suofNlo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Z6Y2adsMnAA",
    "title": "Stop using the HttpClient the wrong way in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, httpclient, httpclientfactory, httpclient c#, httpclient c# json, ihttpclientfactory, Stop using the HttpClient the wrong way in .NET",
    "scraped_at": 1685095331.6905258,
    "genre": "Education",
    "views": "130285",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you why the way you might be using the HttpClient in .NET could be completely wrong and then follow it up by showing you the right way to implement it.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #nickchapsas\"",
    "lengthSeconds": "614",
    "uploadDate": "2022-08-15",
    "thumbnail_url": "https://i.ytimg.com/vi/Z6Y2adsMnAA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4dSLhCuMVc4",
    "title": "The 2 C# 8 features that are too confusing to use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, The 2 C# 8 features that are STILL too confusing to use, when simple syntax backfires, index, range, index c#, range c#, index and range c#, index and range .net, .net index, .net range",
    "scraped_at": 1685095326.0775762,
    "genre": "Education",
    "views": "40841",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about 2 C# features that are still too confusing for most people to use, myself included. Even though I am very familiar with them and have used them in the past, I always need to stop and think before I continue reading my own code.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "668",
    "uploadDate": "2022-08-11",
    "thumbnail_url": "https://i.ytimg.com/vi/4dSLhCuMVc4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ouuTgwblvJI",
    "title": "When programming blogs are designed to be harmful",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, Programming blogs like this one are INCREDIBLY HARMFUL, When programming blogs are INCREDIBLY HARMFUL, harmful blogs, harmful programming blogs, bad programming blogs, blog doing bad, bad coding blogs, bad coding practices, java vs c#, c# vs java",
    "scraped_at": 1685095330.4415252,
    "genre": "Education",
    "views": "56265",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to talk about the devastating effects that poorly researched programming or coding blogs can have for software engineers that are looking for answers\\\\n\\\\nTimestamp:\\\\nIntro - 0:00\\\\nThe part where I am calm - 1:25\\\\nThe part where I am having a mental breakdown - 5:56\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #java #dotnet\"",
    "lengthSeconds": "618",
    "uploadDate": "2022-08-08",
    "thumbnail_url": "https://i.ytimg.com/vi/ouuTgwblvJI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=euUg_IHo7-s",
    "title": "Write cleaner APIs in .NET 7 with MediatR",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, .net 7 performance, minimal api, minimal apis, .net minimal apis, minimal apis c#, minimal api c#, Supercharge you Minimal APIs with MediatR in .NET 7, minimalator, minimaltr, minimal apis mediator, minimal apis mediatr, mediatr, mediator",
    "scraped_at": 1685095328.7735975,
    "genre": "Education",
    "views": "50953",
    "desc": "Get started with Octopus Deploy: https://oc.to/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can very easily integrate .NET\\'s Minimal APIs with MediatR using the brand new .NET 7 AsParameters attribute in a very elegant and testable way.\\\\n\\\\nThis video is sponsored by Octopus Deploy\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #dotnet7\"",
    "lengthSeconds": "924",
    "uploadDate": "2022-08-04",
    "thumbnail_url": "https://i.ytimg.com/vi/euUg_IHo7"
  },
  {
    "link": "watch?v=Q1_YkcPwpqY",
    "title": "Testing your C# code reliably by freezing it in time",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, snapshot testing, snapshot testing c#, verify, simon cropp, verify simon cropp, simon cropp verify, verify snapshot testing, snapshot testing .net, verify c#, verify testing",
    "scraped_at": 1685095331.1115525,
    "genre": "Education",
    "views": "29177",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a lesser know testing technique called snapshot testing. It is an extremely powerful and reliable technique that focuses on how we are asserting data for your tests. It is something I\\'ve personally used in production in the past and I can highly recommend to everyone.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nGive Verify a star on GitHub: https://github.com/VerifyTests/Verify\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe project we are working with - 1:17\\\\nThe introducing Snapshot Testing - 4:02\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #testing\"",
    "lengthSeconds": "730",
    "uploadDate": "2022-08-01",
    "thumbnail_url": "https://i.ytimg.com/vi/Q1_YkcPwpqY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6WeT-JQBI98",
    "title": "How to test \"untestable\" code in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, internalsvisibleto, internal keyword, internal, internal c#, testing internal code, internal code testing, internal unit testing, testing internals code c#, internal .net",
    "scraped_at": 1685095329.431578,
    "genre": "Education",
    "views": "27303",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can properly test code that you might think is untestable. This isn\\'t a hack, but instead a best practice that I see many people not be aware of.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #testing\"",
    "lengthSeconds": "624",
    "uploadDate": "2022-07-28",
    "thumbnail_url": "https://i.ytimg.com/vi/6WeT"
  },
  {
    "link": "watch?v=8IRNC7qZBmk",
    "title": "The cleanest way to use Docker for testing in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, dotnet docker, docker dotnet, docker in .net, docker c#, docker test containers, testcontainers, docker containers for testing, c# testing containers, docker containres, running docker from c#, contrilling docker from c#, docker and .net, The best way to run Docker containers for testing in .NET",
    "scraped_at": 1685095329.6565535,
    "genre": "Education",
    "views": "63844",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can quicly spin up and tear down docker containers specific to your test executions. This is only a fraction of what I show in my Integration Testing course so if you want to learn even more cool topics like this check https://nickchapsas.com out.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nGive TestContainers a star on GitHub: https://github.com/testcontainers/testcontainers-dotnet\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #testing\"",
    "lengthSeconds": "816",
    "uploadDate": "2022-07-25",
    "thumbnail_url": "https://i.ytimg.com/vi/8IRNC7qZBmk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=GzyMqh3BBzk",
    "title": "Getting started with AWS DynamoDB in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, aws dynamodb, dynamodb, cosmosdb, azure, aws dynamodb .net, dynamodb .net, dynamodb c#, c# dynamodb, dynamodb tutorial, getting started dynamodb",
    "scraped_at": 1685095330.895552,
    "genre": "Education",
    "views": "16587",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "1501",
    "uploadDate": "2022-07-21",
    "thumbnail_url": "https://i.ytimg.com/vi/GzyMqh3BBzk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=0WvGwOoK-CI",
    "title": "The NEW caching you should be using in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net caching, caching, cache, output cache, response cache, response caching in asp.net core, response cache asp.net core, c# response cache, output caching in mvc, output caching .net, output caching asp.net core",
    "scraped_at": 1685095330.7365527,
    "genre": "Education",
    "views": "60369",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the brand new output caching feature that is added in .NET 7. It fixes a lot of the issues with the existing response caching feature and I\\'m absolutely in love with its simplicity, extensibility and API.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #caching\"",
    "lengthSeconds": "1096",
    "uploadDate": "2022-07-18",
    "thumbnail_url": "https://i.ytimg.com/vi/0WvGwOoK"
  },
  {
    "link": "watch?v=-i4rP0LGY5U",
    "title": "Microsoft fixed my biggest complaint with Minimal APIs in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, .net 7 performance, minimal api, minimal apis, .net minimal apis, minimal api c#, minimal apis c#, testing minimal apis, unit testing minimal apis, minimal api tests, Microsoft fixed my biggest complaint with Minimal APIs",
    "scraped_at": 1685095326.3755763,
    "genre": "Education",
    "views": "37315",
    "desc": "Check out my Minimal API course: https://dometrain.com/course/from-zero-to-hero-minimal-apis-in-net-with-c/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how Microsoft took the feedback I gave in regards to Minimal APIs in .NET 6 and how they addressed it to make them better in .NET 7.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #dotnet7\"",
    "lengthSeconds": "491",
    "uploadDate": "2022-07-14",
    "thumbnail_url": "https://i.ytimg.com/vi/"
  },
  {
    "link": "watch?v=7OFZZAHGv9o",
    "title": "You are mocking the HttpClient the wrong way",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, unit testing c#, unit testing .net, unit testing mocking, moq, moq vs nsubstitute, mocking, mock, mocking in .net, mocking in c#, mocking nick chapsas, mocking httpclient, mock http client, c# mock http client, http client mocking",
    "scraped_at": 1685095331.1875272,
    "genre": "Education",
    "views": "39529",
    "desc": "Get started with Octopus Deploy: https://oc.to/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what is my prefered way to mock the HttpClient in .NET. Many people are using Moq\\'s Protected feature to use reflection and access the SendAsync method by name but I really don\\'t like this approach. Let\\'s see what I do instead.\\\\n\\\\nGive MockHttp a star on GitHub: https://github.com/richardszalay/mockhttp\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nThis video is sponsored by Octopus Deploy\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #testing\"",
    "lengthSeconds": "836",
    "uploadDate": "2022-07-11",
    "thumbnail_url": "https://i.ytimg.com/vi/7OFZZAHGv9o/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ZTWl2s8ScMc",
    "title": "SingleOrDefault or FirstOrDefault? When LINQ might harm you",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, first linq, single linq, linq, firstordefault, singleordefault, linq c#, linq .net, linq performance, is linq slow, SingleOrDefault or FirstOrDefault, single or first, first or single linq, first or single, SingleOrDefault or FirstOrDefault",
    "scraped_at": 1685095330.8205256,
    "genre": "Education",
    "views": "47917",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain how First, FirstOrDefault, Single and SingleOrDefault LINQ methods work and why you might not be using the one you should be using.\\\\n\\\\nWorkshops\\\\nNDC Oslo | 26 \\xe2\\x80\\x93 30 Sept | https://bit.ly/ndcoslo2022workshop\\\\nNDC Sydney | 10 \\xe2\\x80\\x93 14 Oct | https://bit.ly/ndcsydney2022workshop\\\\ndotnetdays | 20 \\xe2\\x80\\x93 22 Oct | https://bit.ly/dotnetdays2022workshop\\\\nNDC Minnesota | 15 \\xe2\\x80\\x93 18 Nov | https://bit.ly/ndcminnesota2022workshop\\\\nNDC London | 23-27 January 2023 | https://bit.ly/ndclondon2023\\\\n\\\\nTimestamps\\\\nHow Single, SingleOrDefault, First, FirstOrDefault work - 0:00\\\\nWhy is this difference in logic important? - 3:47\\\\nCreating and running the benchmarks - 6:01\\\\nWhat can we make of all this? - 11:14\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #linq\"",
    "lengthSeconds": "814",
    "uploadDate": "2022-07-07",
    "thumbnail_url": "https://i.ytimg.com/vi/ZTWl2s8ScMc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=55UdBNRuQ7k",
    "title": "Stop choosing the \u201cwrong\u201d .NET version",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net version, .net lts, lts vs current, long term support, long term support version, lts vs current vs preview, .net version nick chapsas, Don",
    "scraped_at": 1685095330.6615264,
    "genre": "Education",
    "views": "32099",
    "desc": "The first 100 of you to use coupon code SUMMER2022 get 20% off my courses at https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to talk about the different types of support between .NET versions and why sticking with LTS might be a bad idea. There seems to be a lot of misconception around versioning and support standards and in this video I will address all that.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "725",
    "uploadDate": "2022-07-04",
    "thumbnail_url": "https://i.ytimg.com/vi/55UdBNRuQ7k/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Q3KzZeUudsg",
    "title": "Why .NET's memory cache is kinda flawed",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, lazycache, lazycache vs memorycache, memory cache .net, in memory cache .net, in memory cache aspnetcore, .net core in memory cache, memory cache tutorial, caching in .net",
    "scraped_at": 1685095331.261525,
    "genre": "Education",
    "views": "45240",
    "desc": "The first 100 of you to use coupon code SUMMER2022 get 20% off my courses at https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a look at the options we have in .NET for in-memory caching and explain why the default memory cache might be causing problems for you application. We will also take a look at a great alternative that solves that problem.\\\\n\\\\nGive LazyCache a star on GitHub: https://github.com/alastairtree/LazyCache\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #caching\"",
    "lengthSeconds": "852",
    "uploadDate": "2022-06-30",
    "thumbnail_url": "https://i.ytimg.com/vi/Q3KzZeUudsg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=OukGS7s6bS4",
    "title": "How reflection changes will make your apps faster in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 7 preview, .net 7 reflection, reflection, reflection c#, make reflection faster c#, make reflection faster .net, reflection performance, reflection performance c#, reflection performance .net",
    "scraped_at": 1685095331.404533,
    "genre": "Education",
    "views": "33441",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you the updates that reflection got in .NET 7 that make it perform up to 4 times faster in some scenarios. \\\\n\\\\nThe pull request: https://github.com/dotnet/runtime/pull/67917\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #reflection\"",
    "lengthSeconds": "794",
    "uploadDate": "2022-06-27",
    "thumbnail_url": "https://i.ytimg.com/vi/OukGS7s6bS4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2zUQwVD7T_E",
    "title": "JSON support gets a major missing feature in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, json, system.text.json, json.net, system.text.json polymophism, json polymorphism, json polymorphism .net, json poly, type discriminator json, json inheritance support, hson inheritance, dotnet json",
    "scraped_at": 1685095329.5815256,
    "genre": "Education",
    "views": "47450",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a new System.Text.Json feature coming in .NET 7 called polymorphism and type discrimination. It is currently available in preview 5 for everyone to try out and it makes working with the native JSON support, way more powerful and useful.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "593",
    "uploadDate": "2022-06-23",
    "thumbnail_url": "https://i.ytimg.com/vi/2zUQwVD7T_E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=J4JL4zR_l-0",
    "title": "Scheduling repeating tasks with .NET 6\u2019s NEW Timer",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, timer in c#, scheduled tasks in c#, repeating timer c#, timer in .net, periodictimer, periodic timer, periodic timer in c#, .net 6 periodictimer, .net periodic timer",
    "scraped_at": 1685095332.0485282,
    "genre": "Education",
    "views": "79100",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use the brand new PeriodicTimer class introduced in .NET 6. .NET historically had many Timers but that all had flaws. The PeriodicTimer class aims to address all of them with a modern spin on the classic repeating Timer\\\\n\\\\nTimestamps\\\\nWhat this video is about - 0:00\\\\nThe wrong approach - 1:28\\\\nUsing PeriodicTimer in ASP.NET Core - 4:41\\\\nUsing PeriodicTimer everywhere - 6:56\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "766",
    "uploadDate": "2022-06-20",
    "thumbnail_url": "https://i.ytimg.com/vi/J4JL4zR_l"
  },
  {
    "link": "watch?v=7OfUi3h-wmM",
    "title": "Getting started with Queues in .NET using AWS SQS",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, sqs, simple queue service aws, sqs aws, aws sqs, sqs tutorial, sqs tutorial dotnet, sqs c#, sqs .net, sqs .net core, sqs net core, Getting started with Queues in .NET using AWS SQS",
    "scraped_at": 1685095332.4085538,
    "genre": "Education",
    "views": "29271",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "2640",
    "uploadDate": "2022-06-16",
    "thumbnail_url": "https://i.ytimg.com/vi/7OfUi3h"
  },
  {
    "link": "watch?v=KKo0qJUlXGI",
    "title": "The weirdest C# 11 feature but also the best one",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# 11, c# 11 new features, c# 11 static abstract members in interfaces, static in interface, c# static in interface, generic math, c# 10, c# 10 static abstract, static abstract, static abstract interfaces",
    "scraped_at": 1685095332.6845534,
    "genre": "Education",
    "views": "47001",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to what is in my opinion the weirdest but also the best C# 11 feature and that is static abstract members in interfaces. The concept of having implementations in interfaces was weird enough in C# 8 and C# 11 introduces static members in them too, but it actually goes beyond that. Let\\'s take a look at this new feature in this video.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "621",
    "uploadDate": "2022-06-13",
    "thumbnail_url": "https://i.ytimg.com/vi/KKo0qJUlXGI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=-RX6XKHkjOs",
    "title": "Fixing the performance problem of enums in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, enum generator, enum c#, enum source generator, enum performance, enum nick chapsas, nick chapsas enums, Fixing all my complaints with enums in C#, fixing enums in c#, fixing enums, enums c#, enum performance c#",
    "scraped_at": 1685095332.8305244,
    "genre": "Education",
    "views": "47500",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nCheck out my workshops:\\\\nNDC Oslo: https://bit.ly/ndcoslo2022nick1\\\\nNDC Minessota: https://bit.ly/ndcminne2022nick1\\\\nNDC Syndey: https://bit.ly/ndcsydney2022nick1\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can easily fix all the performance issues that enums suffer from. As always, performance is contextual, but you should know what you optimize when the time comes to optimize.\\\\n\\\\nGive EnumGenerators a star on GitHub: https://github.com/andrewlock/NetEscapades.EnumGenerators\\\\nCheck out Andrew\\xe2\\x80\\x99s blog: https://andrewlock.net\\\\nPrevious enum video: https://www.youtube.com/watch?v=BoE5Y6Xkm6w\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "678",
    "uploadDate": "2022-06-09",
    "thumbnail_url": "https://i.ytimg.com/vi/"
  },
  {
    "link": "watch?v=gJAttN8X3Xc",
    "title": "Properties were getting even cleaner in C# 11",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# 11, c# 11 new features, c# 11 properties, c# properties, c# 11 semi auto properties, semi auto properties, auto properties, c# semi auto properties",
    "scraped_at": 1685095332.7535572,
    "genre": "Education",
    "views": "52470",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how properties are changing in C# 11 with the introduction of a new feature called Semi-auto properties. This feature will allow you to write less code when dealing with the property\\'s backing field, enabling you to write even more elegant and clean code.\\\\n\\\\nThe evolution of properties in C#: https://www.youtube.com/watch?v=RqdZCq-2GNM\\\\nSemi-auto-properties tracking issue: https://github.com/dotnet/csharplang/issues/140\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "491",
    "uploadDate": "2022-06-06",
    "thumbnail_url": "https://i.ytimg.com/vi/gJAttN8X3Xc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=a1ye9eGTB98",
    "title": "Don't throw exceptions in C#. Do this instead",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, throw exception, exception throwing c#, c# exceptions, language extensions, c# result type, result type, result rust, result f#, Don",
    "scraped_at": 1685095332.9025247,
    "genre": "Education",
    "views": "193984",
    "desc": "Check out my new \\\\\"",
    "lengthSeconds": "1092",
    "uploadDate": "2022-06-02",
    "thumbnail_url": "https://i.ytimg.com/vi/a1ye9eGTB98/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9CDgPgWF9IY",
    "title": "Why I won\u2019t need constructors anymore in C# 11",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# 11, c# 11 required keyword, c# 11 new features, c# 11 features, required keyword, required, required keyword in c#, c# new features, Why I won",
    "scraped_at": 1685095333.6765585,
    "genre": "Education",
    "views": "125405",
    "desc": "Check out my new \\\\\"",
    "lengthSeconds": "579",
    "uploadDate": "2022-05-30",
    "thumbnail_url": "https://i.ytimg.com/vi/9CDgPgWF9IY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=kIkbGXLkc-g",
    "title": "The setup \"trick\" that .NET libraries use and you should too",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, configuration, .net config, .net startup, .net settings, ioptions, options in c#, options in .net, ioptionsmonitor, ioptionmonitor, ioptionsnapsh",
    "scraped_at": 1685095332.9745262,
    "genre": "Education",
    "views": "67675",
    "desc": "Check out my new \\\\\"",
    "lengthSeconds": "605",
    "uploadDate": "2022-05-26",
    "thumbnail_url": "https://i.ytimg.com/vi/kIkbGXLkc"
  },
  {
    "link": "watch?v=Oi_sL3aFlBc",
    "title": "Attributes get a feature long-overdue in C# 11",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# 11, .net 7, C# 11 feautres, generics on attributes, .net 7 generics on attributes, attributes, generics, generics c#",
    "scraped_at": 1685095333.045554,
    "genre": "Education",
    "views": "59275",
    "desc": "Check out my courses: https://dometrain.com\\\\nCome to NDC Oslo: https://bit.ly/ndcoslo2022nick1\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how C# 11 adds a missing feature for Attributes. The feature is called Generics on Attributes and It was honeslty the only thing about attributes that I was so confused about since every other aspect of the language supports generics. It finally solves a workaround where we had to pass down a type and do some magic under the hood.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "491",
    "uploadDate": "2022-05-23",
    "thumbnail_url": "https://i.ytimg.com/vi/Oi_sL3aFlBc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=iQ8cNI7a6mk",
    "title": "The .NET dependency injection methods you are not using",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, dependency injection, ioc, inversion of control, di c#, dependency injection c#, dependency injection .net, asp.net core dependency injection, addsingleton, addsingleton vs addscoped vs addtransient, The .NET dependency injection methods you are not using",
    "scraped_at": 1685095333.751551,
    "genre": "Education",
    "views": "80337",
    "desc": "Use code DEPS for 20% off (first 50 people): https://dometrain.com/course/from-zero-to-hero-dependency-injection-in-net/\\\\nBecome a Patreon and get Discord \\\\u0026 source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to, hopefully, a few dependency injection methods for the built in IoC container that you might not know about. Some of the names can be deceiving so once you finish watching this video you should know everything you need to write some awesome IoC code.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #dependencyinjection\"",
    "lengthSeconds": "708",
    "uploadDate": "2022-05-19",
    "thumbnail_url": "https://i.ytimg.com/vi/iQ8cNI7a6mk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gMTvNnKt3AA",
    "title": "The NEW Rate Limiter of .NET 7 is AWESOME",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, rate limiter, rate limit, rate limiter c#, rate limiting, rate limiting api, api rate limit, rate limiter .net, rate limiting c#, asp.net core rate limit, rate limiter asp.net core, web api rate limit",
    "scraped_at": 1685095333.1175582,
    "genre": "Education",
    "views": "43892",
    "desc": "Check out my courses: https://dometrain.com\\\\nCome to NDC Oslo: https://bit.ly/ndcoslo2022nick1\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the brand new rate limiting functionality that was introduced in .NET 7. Like with anything that is in preview, this is subject to change but we will take a look at the concepts behind the rate limiting itself which will stay the same.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "783",
    "uploadDate": "2022-05-16",
    "thumbnail_url": "https://i.ytimg.com/vi/gMTvNnKt3AA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=rImaNyfKhZk",
    "title": "Building a Serverless REST API in .NET with AWS Lambda",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, aws lambda, azure, aws lambda tutorial, aws rest api, rest api lambda, serverless rest api, serverless rest api .net, c# api serverless, how to build serverless rest api, Building a Serverless REST API in .NET with AWS Lambda",
    "scraped_at": 1685095333.1885245,
    "genre": "Education",
    "views": "58872",
    "desc": "Get $50 free AWS Credit by adding \\\\\"",
    "lengthSeconds": "1212",
    "uploadDate": "2022-05-12",
    "thumbnail_url": "https://i.ytimg.com/vi/rImaNyfKhZk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=uoIbKO-zKeQ",
    "title": "C# 11's NEW elegant string conversion",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, c# 11, csharp 11, c# 11 new features, .net 7 new features, utf8 string literal, utf8 string c#, utf8 string literal c#, c# 11 utf8, utf8, utf",
    "scraped_at": 1685095333.822553,
    "genre": "Education",
    "views": "28271",
    "desc": "Use code FULLTIME for 20% off (first 200 people): https://dometrain.com\\\\nBecome a Patreon and get Discord \\\\u0026 source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://nickchapsas.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a feature coming in C# 11 called UTF-8 String Literals. If you are dealing with UTF-8 strings a lot, this feature will simplify your code significantly and make it way more efficient.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #utf8\"",
    "lengthSeconds": "596",
    "uploadDate": "2022-05-09",
    "thumbnail_url": "https://i.ytimg.com/vi/uoIbKO"
  },
  {
    "link": "watch?v=vBdf3pe1jNU",
    "title": "The best Nuget package you\u2019ve never heard of",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, dynamicproxy, proxy, dynamic proxy, moq, nsubstitute, Castle project, castle.core, castle core, castle dynamic proxy, interceptor pattern, proxy pattern, interceptor",
    "scraped_at": 1685095333.2595277,
    "genre": "Education",
    "views": "104947",
    "desc": "Use code FULLTIME for 20% off (first 200 people): https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a Nuget which is used in tons of places and has more than 350 MILLION downloads but you don\\'t know about. It has some really practical usecases and we will take a look at them in this video.\\\\n\\\\nGive Castle.Core a star on Github: https://github.com/castleproject/Core\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #nuget\"",
    "lengthSeconds": "992",
    "uploadDate": "2022-05-05",
    "thumbnail_url": "https://i.ytimg.com/vi/vBdf3pe1jNU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=HJJOWDLoSsg",
    "title": "nameof gets its one missing feature in C# 11",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, c# 11, csharp 11, c# 11 new features, nameof c#, nameof c# 11, .net 7 new features",
    "scraped_at": 1685095333.3345604,
    "genre": "Education",
    "views": "37488",
    "desc": "Join me in NDC Oslo 2022 for my workshop: https://bit.ly/ndcoslo2022nick1\\\\nBecome a Patreon and get Discord \\\\u0026 source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how the nameof keyword\\'s functionality is changing in C# 11 to support the one usecase that it wasn\\'t usable in\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #nameof\"",
    "lengthSeconds": "390",
    "uploadDate": "2022-05-02",
    "thumbnail_url": "https://i.ytimg.com/vi/HJJOWDLoSsg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=rBzZd_ji7H4",
    "title": "Checking for null without checking for null in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, Fody, assembly weaving, .net fody, nullguard, null guard, bang bang operator, null check c#, argumentnullexception, argumentnullexception c#",
    "scraped_at": 1685095333.405548,
    "genre": "Education",
    "views": "50084",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get Discord \\\\u0026 source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a different way to do argument null checking in C# using a package called NullGuard. NullGuard is using a technique called Assembly Weaving to change the compiled code and inject null checks in places where there should be.\\\\n\\\\nGive a start to NullGuard.Fody on GitHub: https://github.com/Fody/NullGuard\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #nullguard\"",
    "lengthSeconds": "554",
    "uploadDate": "2022-04-28",
    "thumbnail_url": "https://i.ytimg.com/vi/rBzZd_ji7H4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Kt9TiXrwIp4",
    "title": "Minimal APIs just got all I wanted in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, .net 7 performance, minimal api, minimal apis, .net minimal apis, minimal apis c#, minimal api c#, minimal api filters, minimal api middleware, Minimal APIs just got what they were missing in .NET 7",
    "scraped_at": 1685095333.8935533,
    "genre": "Education",
    "views": "53016",
    "desc": "Use code FILTERS for 20% off on my Minimal API course: https://dometrain.com/course/from-zero-to-hero-minimal-apis-in-net-with-c/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I introduce you to the a new Minimal API feature of .NET 7 called Filters. Filters was the one thing I was personally missing since I moved from Controllers to Minimal APIs and I am glad the ASP.NET team finally added it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #dotnet7\"",
    "lengthSeconds": "737",
    "uploadDate": "2022-04-25",
    "thumbnail_url": "https://i.ytimg.com/vi/Kt9TiXrwIp4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=5Lit18RJYp8",
    "title": "The C# 11 fix you didn\u2019t know you needed",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, c# 11, c# 11 new features, c# 11 preview, cached delegate for method group conversion, cached delegate, method group conversion, cached method group, statis method group, memory allocation",
    "scraped_at": 1685095333.9635282,
    "genre": "Education",
    "views": "47280",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a C# 11 optimization called cached delegate for method group. Before C# 11 C# would actually not optimize statis method group invocation leading to unnecessary memory allocations. The problem was inflated because IDEs such as Visual Studio or Rider would suggest that you use the method group syntax over the long form one, wasting memory.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #csharp11\"",
    "lengthSeconds": "614",
    "uploadDate": "2022-04-21",
    "thumbnail_url": "https://i.ytimg.com/vi/5Lit18RJYp8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=BGW4FnEB-CM",
    "title": "Storing secrets CORRECTLY in .NET using AWS Secrets Manager",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, aws lambda, azure, aws secrets manager, secrets manager, aws secrets manager .net, secrets manager .net, user secrets .net, Storing secrets CORRECTLY in .NET using AWS Secrets Manager",
    "scraped_at": 1685095334.2035258,
    "genre": "Education",
    "views": "31203",
    "desc": "Get started with AWS for FREE: https://go.aws/3IRuSfW\\\\nGet the source code: https://github.com/Elfocrash/aws-videos\\\\nCheck out .NET on AWS: https://aws.amazon.com/developer/language/net\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video is sponsored by AWS\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can work with secrets in .NET correctly and securely using AWS Secrets Manager. Secrets Manager has a lot of features that make working with it extremely easy and we are also going to use a third party package that makes the process even easier.\\\\n\\\\nGive AWSSecretsManagerConfigurationExtensions a star on GitHub: https://github.com/Kralizek/AWSSecretsManagerConfigurationExtensions\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nHow configuration in .NET works - 0:39\\\\nWorking with AWS Secrets Manager - 6:38\\\\nTaking a look at the SDK - 18:51\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n #aws #dotnet\"",
    "lengthSeconds": "1408",
    "uploadDate": "2022-04-18",
    "thumbnail_url": "https://i.ytimg.com/vi/BGW4FnEB"
  },
  {
    "link": "watch?v=sFMVcLSA3Lk",
    "title": "Is C# getting slower?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, c# 11, c# 11 new features, c# 11 preview, c# 11 string literals, .net 7 performance, csharp performance, c# perfromance, is c# slow, is c# getting slower, Are new features making C# slower",
    "scraped_at": 1685095337.6059248,
    "genre": "Education",
    "views": "46287",
    "desc": "Get your NDC Oslo 2022 tickets here: https://bit.ly/ndcoslo2022nick1\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will investigate the claim that new C# features make C# slower. This is usually about features that are syntactic sugar over other features, such as the list patterns feature, and in this video we will see what is true and what is false about that claim.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #csharp11\"",
    "lengthSeconds": "1037",
    "uploadDate": "2022-04-14",
    "thumbnail_url": "https://i.ytimg.com/vi/sFMVcLSA3Lk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4KXWAgZE8xI",
    "title": "Strings in C# 11 just got a whole lot better",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, c# 11, c# 11 new features, c# 11 preview, c# 11 string literals, raw string literals, c# raw string literals, .net 7 raw string literals, Strings in C# 11 got a whole lot better",
    "scraped_at": 1685095334.2785525,
    "genre": "Education",
    "views": "76127",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to a new C# 11 feature called raw string literals. Raw string liretals allows us to deal with string in their raw form without having to format them in a specific way in our code and escape them. It makes working wiht JSON an absolute breeze and I can\\'t wait to use them when C# 11 comes out.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #csharp11\"",
    "lengthSeconds": "661",
    "uploadDate": "2022-04-11",
    "thumbnail_url": "https://i.ytimg.com/vi/4KXWAgZE8xI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=dLHwXVSyoT0",
    "title": "C# developer reacts to \"Interview with a Senior C# Developer in 2022\"",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, c# interview, .net interview, Interview with a Senior C# Developer in 2022, Interview with a Senior C# Developer reaction, Interview with a Senior C# Developer, c# interview developer, c# developer interview, .net interview developer, interver with c# dev reaction, react, reaction",
    "scraped_at": 1685095334.5665262,
    "genre": "Education",
    "views": "81281",
    "desc": "Subscribe to \\\\\"",
    "lengthSeconds": "649",
    "uploadDate": "2022-04-07",
    "thumbnail_url": "https://i.ytimg.com/vi/dLHwXVSyoT0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=z7bW83Xr1R0",
    "title": "C# 11\u2019s new List Patterns are a bit too powerful",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, dotnet 7, .net 7 preview, c# 11, c# 11 new features, c# 11 preview, c# 11 list patterns, list patterns, C# 11",
    "scraped_at": 1685095334.3505518,
    "genre": "Education",
    "views": "58146",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to C# 11\\'s new feature called list patterns. C# 11 is coming out with .NET 7 in November of 2022 but the preview is out and we can give it a go. Let me know what you think about it in the comments below.\\\\n\\\\nList patterns GitHub issue: https://github.com/dotnet/csharplang/issues/3435\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #csharp11\"",
    "lengthSeconds": "646",
    "uploadDate": "2022-04-04",
    "thumbnail_url": "https://i.ytimg.com/vi/z7bW83Xr1R0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=B2yOjLyEZk0",
    "title": "Writing C# without allocating ANY memory",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, writing fast c#, fast c#, efficient c#, zero allocation c#, stackalloc, malloc, span, span of t, readonly span, c# span, .net span, .net performance, allocation free c#, allocation free .net",
    "scraped_at": 1685095334.420552,
    "genre": "Education",
    "views": "113457",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use features such Span, ReadOnlySpan and stackalloc to write allocation free C# that is very fast. This video will just focus on a single example but I will explain every decision as I go and hopefully you will find areas where you can use the technique you see here to optimize your own code.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #performance\"",
    "lengthSeconds": "1176",
    "uploadDate": "2022-03-31",
    "thumbnail_url": "https://i.ytimg.com/vi/B2yOjLyEZk0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=anesVdQg6Dk",
    "title": "Do C# Source Generators ACTUALLY slow your build down?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, Do C# Source Generators ACTUALLY slow your build down, source generators, source generators c#, source generators .net, source generators dotnet, dotnet source generators, source generators build time, source generators compile time",
    "scraped_at": 1685095337.4529333,
    "genre": "Education",
    "views": "17745",
    "desc": "Check out my courses and use code 100K for 20% off: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will address one of the biggest critisisms people raise towards C# Source Generators and that\\'s how they can increase your build time. This can happen because during compile-time they will read your code and write extra code to be added in the final assembly. But how much of an impact this really has?\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #sourcegenerators\"",
    "lengthSeconds": "801",
    "uploadDate": "2022-03-28",
    "thumbnail_url": "https://i.ytimg.com/vi/anesVdQg6Dk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=tSuwe7FowzE",
    "title": "GUIDs and UUIDs are cool, but this is cooler",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, guids, guid, uuid, uuids, uuids as primary keys, guids as primary keys, guid vs uuid, guid as primery key, guid as foreign key, guid as key entity framework, sequential id, guids are cool but this is cooler, uuids are cool but this is cooler",
    "scraped_at": 1685095334.856555,
    "genre": "Education",
    "views": "154302",
    "desc": "Check out my courses and use code 100K for 20% off: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use sequential ids as primary keys in your database without having to worry about security vurnabilities. This will allow you to have better potential database performance without having to worry about issues such as fragmentation if you use GUIDs or UUIDs are the primary key.\\\\n\\\\nGive HashIds a star on GitHub: https://github.com/ullmark/hashids.net\\\\n\\\\nTimestamps\\\\nThe problem - 0:00\\\\nThe solution - 3:44\\\\nLibrary deep dive - 9:21\\\\nPerformance - 12:31\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "955",
    "uploadDate": "2022-03-24",
    "thumbnail_url": "https://i.ytimg.com/vi/tSuwe7FowzE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=r5VJIz25PPY",
    "title": "How Controller behaviour changed in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, .net 7, .net 7 preview, controllers, controllers .net, controllers c#, controller dependency injection, controller di, controller action, controller changes, controller changes .net 7",
    "scraped_at": 1685095334.781552,
    "genre": "Education",
    "views": "79411",
    "desc": "Check out my courses and use code 100K for 20% off: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how controller and more specifically controller actions are changing in the upcoming .NET 7 release.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #controller\"",
    "lengthSeconds": "483",
    "uploadDate": "2022-03-21",
    "thumbnail_url": "https://i.ytimg.com/vi/r5VJIz25PPY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=NmmpXcMxCjY",
    "title": "Are events in C# even relevant anymore?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, events in .net, events in c#, events, event, eventhandler, eventargs, are c# events dead, events buttonclick, events winforms, Are events in C# even relevant anymore",
    "scraped_at": 1685095334.7115247,
    "genre": "Education",
    "views": "136692",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain why I think that events as a feature in C# is obsolete and how we can implement the same event-like mechanism in a modern and elegant way.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nWhat are events and how they work - 0:20\\\\nA backend service example - 5:28\\\\nHow I implement events - 11:05\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #events\"",
    "lengthSeconds": "978",
    "uploadDate": "2022-03-17",
    "thumbnail_url": "https://i.ytimg.com/vi/NmmpXcMxCjY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6zoMd_FwSwQ",
    "title": "Stop using String Interpolation when Logging in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, logging in .net, string interpolated handler, interpolated string handler, C# 10 string interpolation, string interpolation logging, structured logging, logging in c#, structured logging c#, structured logging serilog, Stop using String Interpolation when Logging in .NET",
    "scraped_at": 1685095334.4985526,
    "genre": "Education",
    "views": "74180",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain why you should not be using string interpolated when logging in .NET. This applies to both the build in Microsoft.Extensions.Logging framework and also on the very popular Serilog one. Strucutred logging is extremely valuable and in this video we will see how string interpolated can remove that benefit.\\\\n\\\\nPart of this video is sponsored by AWS\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe problem - 0:40\\\\nVisualizing logs - 7:55\\\\nA potential future solution - 13:11\\\\n\\\\nRelated videos\\\\nYou are doing .NET logging wrong. Let\\'s fix it - https://www.youtube.com/watch?v=bnVfrd3lRv8\\\\nHigh-performance logging in .NET, the proper way - https://www.youtube.com/watch?v=a26zu-pyEyg\\\\nHow this NEW type changed the logging game in C# 10 - https://www.youtube.com/watch?v=MHIheQ2_Yb4\\\\nHow C# 10 \\xe2\\x80\\x9cfixed\\xe2\\x80\\x9d string interpolation - https://www.youtube.com/watch?v=24D7u3y3mhI\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #logging\"",
    "lengthSeconds": "1049",
    "uploadDate": "2022-03-14",
    "thumbnail_url": "https://i.ytimg.com/vi/6zoMd_FwSwQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=RqdZCq-2GNM",
    "title": "The evolution of Properties in C# from version 1 to 10",
    "tags": "coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, pattern matching, c# pattern matching, The evolution of Properties in C#, properties in c#, properties in .net, evolution of properties, init",
    "scraped_at": 1685095337.5289252,
    "genre": "Education",
    "views": "33083",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how Properties evolved in C# from the very first version until the latest C# 10 version. I will explain why they were added and what problem they were solving and take a look at how they changed throughout the years.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nWhy do properties exist? - 0:54\\\\nC# 1 - 2:48\\\\nC# 3 - 6:23\\\\nC# 6 - 9:19\\\\nC# 7 - 11:02\\\\nC# 8 - 12:33\\\\nC# 9 - 14:06\\\\nC# 10 - 16:19\\\\nC# 9\\'s records - 16:49\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1108",
    "uploadDate": "2022-03-10",
    "thumbnail_url": "https://i.ytimg.com/vi/RqdZCq"
  },
  {
    "link": "watch?v=M9N1tvpHHw8",
    "title": "The simplest way to build scheduling in .NET with AWS",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws, aws lambda, lambda, azure, azure function, cron, aws eventbridge, aws cloudwatchevents, cloudwatch, cloudwatch events, eventbridge, scheduling C#, scheduling .NET, hangfire, The simplest way to build scheduling in .NET",
    "scraped_at": 1685095334.6375513,
    "genre": "Education",
    "views": "27420",
    "desc": "Get started with AWS for FREE: https://go.aws/3IRuSfW\\\\nGet the source code: https://github.com/Elfocrash/aws-videos\\\\nCheck out .NET on AWS: https://aws.amazon.com/developer/language/net\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video is sponsored by AWS\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can leverage AWS cloud technolgy to implement scalable, serverless and reliable scheduling in .NET and C#. In this video I am going to use AWS EventBridge and AWS Lambda to create scheduled executions of lambdas that allow us to build scheduling with minimal cost and without having to host and run any service ourselves.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n #aws #dotnet\"",
    "lengthSeconds": "1383",
    "uploadDate": "2022-03-07",
    "thumbnail_url": "https://i.ytimg.com/vi/M9N1tvpHHw8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=fGHVSscrHXo",
    "title": "How GitHub protects you from your own mistakes",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, development, software engineering, microsoft mvp, nick chapsas, chapsas, dotnet, github secrets, github secret scanning, github api keys, How GitHub protects you from your critical mistakes, how github protects you, github security, how github protects you from you",
    "scraped_at": 1685095337.6759293,
    "genre": "Education",
    "views": "12517",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how GitHub has implemented safeguards to protect you from accidentally leaking secrets on public and private repositories.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#github\"",
    "lengthSeconds": "522",
    "uploadDate": "2022-03-03",
    "thumbnail_url": "https://i.ytimg.com/vi/fGHVSscrHXo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ErrABoJ9HZw",
    "title": "Write safer C# with conditional compilation",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, debug mode, release mode, compilation conditional, conditional compilation, conditional compilation in C#, conditional compilation in .net",
    "scraped_at": 1685095334.9265246,
    "genre": "Education",
    "views": "30349",
    "desc": "Check out my Minimal APIs course and use code MINIMAL15 for 15% off: https://dometrain.com/course/from-zero-to-hero-minimal-apis-in-net-with-c/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use C# and .NET compiler conditionals to write better code. They are used extensively in .NET itself by Microsoft, and they can really ensure your code is doing the right thing without affecting performance at all, since the compiler will ignore them.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "753",
    "uploadDate": "2022-02-28",
    "thumbnail_url": "https://i.ytimg.com/vi/ErrABoJ9HZw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=z32_7KgCr6c",
    "title": "A new way to build CLEAN and FAST APIs in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, apiendpoints, api endpoints, fastendpoints, ardalis, controllers mvc, mvc vs minimal apis, minimal apis, controllers vs minimal apis, A great new way of building FAST APIs in .NET, fast .net api, minimal api, .net 6, .net 7",
    "scraped_at": 1685095337.7469003,
    "genre": "Education",
    "views": "80008",
    "desc": "Check out my Minimal APIs course and use code MINIMAL15 for 15% off: https://dometrain.com/course/from-zero-to-hero-minimal-apis-in-net-with-c/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a cool new way to build blazing fast APIs in .NET using FastEndpoints, a project built on top of ASP.NET 6\\'s Minimal APIs. This leads to an api implementation approach that is faster than controllers but offers a really nice API to build on top of.\\\\n\\\\nGive FastEndpoints a start on GitHub: https://github.com/dj-nitehawk/FastEndpoints\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #api\"",
    "lengthSeconds": "1071",
    "uploadDate": "2022-02-24",
    "thumbnail_url": "https://i.ytimg.com/vi/z32_7KgCr6c/maxresdefault.jpg"
  },
  {
    "link": "watch?v=sGwfwtkaDfk",
    "title": "How to test your tests in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, stryker, stryket.net, mutation testing, mutation testing in C#, mutation testing c#, mutation testing .net, what is mutation testing, mutants, mutation rate",
    "scraped_at": 1685095334.999551,
    "genre": "Education",
    "views": "35197",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you why should should care about mutation testing in general and how you can get started with mutation testing in .NET using Stryker.NET.\\\\n\\\\nGive Stryker.NET a star on GitHub: https://github.com/stryker-mutator/stryker-net\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #stryker\"",
    "lengthSeconds": "665",
    "uploadDate": "2022-02-21",
    "thumbnail_url": "https://i.ytimg.com/vi/sGwfwtkaDfk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=WosEhlHATOk",
    "title": "How Regex got so much faster in .NET 7",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The hidden performance trap of Regex in .NET, The hidden performance trap of Regex in C#, regex in c#, regex in .net, regex performance, regex optimization, c# regex, dotnet, .net, .net 7, dotnet 7, How Regex got 157 times faster in .NET 7, faster regex",
    "scraped_at": 1685095337.8148987,
    "genre": "Education",
    "views": "36695",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the huge performance improvements in .NET 7 and more specifically in Regex startup performance. Regex is a really easy thing to get wrong and the improvement in the .NET 7 preview doesn\\'t only greately improve the performance but it also makes it way harder to get wrong.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #regex\"",
    "lengthSeconds": "576",
    "uploadDate": "2022-02-17",
    "thumbnail_url": "https://i.ytimg.com/vi/WosEhlHATOk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=J0EVd5HbtUY",
    "title": "Managing your .NET app configuration like a pro",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, .net configuration, c# configuration, appsettings, appsettings.json, configuration in asp.net core, appsettings.json asp.net core, aws, aws parameter store, aws appconfig, aws systems manager",
    "scraped_at": 1685095337.8878996,
    "genre": "Education",
    "views": "64205",
    "desc": "Get started with AWS for FREE: https://go.aws/3rDNQRy\\\\nGet the source code: https://github.com/Elfocrash/aws-videos\\\\nCheck out .NET on AWS: https://aws.amazon.com/developer/language/net\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video is sponsored by AWS\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can take your .NET application configuration to the next level by using AWS Parameter Store. With distributed applications becoming more prevolent by the day and with the need for centralized configuration management, Parameter Store is here to make your life easier and the .NET SDK for it completely trivialize the process of taking your configuration a significantly more manageable place.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n #aws #dotnet\"",
    "lengthSeconds": "916",
    "uploadDate": "2022-02-14",
    "thumbnail_url": "https://i.ytimg.com/vi/J0EVd5HbtUY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=z4SB5BkQX7M",
    "title": "Stop using IDs that don\u2019t mean anything in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, primitive obsession, primitive obsession code smell, stronglytypedid, andrew lock, andrew sock lock, Stop using IDs that don",
    "scraped_at": 1685095335.0715246,
    "genre": "Education",
    "views": "70181",
    "desc": "Check out my courses and use code OPEN15 for a 15% discount: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you a different approach to IDs in .NET. Guid is by far the most common type of ID you will encounter when working with .NET and for a good reason. In this video I will show you a safer approach that adds meaning to the IDs you use.\\\\n\\\\nGive StronglyTypedId a star on GitHub: https://github.com/andrewlock/StronglyTypedId\\\\nAndrew Lock\\'s blog series: https://andrewlock.net/series/using-strongly-typed-entity-ids-to-avoid-primitive-obsession\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "560",
    "uploadDate": "2022-02-10",
    "thumbnail_url": "https://i.ytimg.com/vi/z4SB5BkQX7M/maxresdefault.jpg"
  },
  {
    "link": "watch?v=pDCMXoisvX4",
    "title": "Another 5 .NET projects that deserve more attention",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, open",
    "scraped_at": 1685095335.145553,
    "genre": "Education",
    "views": "43656",
    "desc": "Check out my courses and use code OPEN15 for a 15% discount: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show another 5 open-source .NET projectst that, in my opinion, deserve more attention. I asked you in the previous video and on Twitter which projects with less than 1000 stars on GitHub deserve more attention and after going through your comments I came up with the 5 ones that I want to talk about.\\\\n\\\\nGive the projects a star on GitHub:\\\\nCocona - https://github.com/mayuki/Cocona\\\\nPowerUp - https://github.com/badamczewski/PowerUp\\\\ndotnet-testcontainers - https://github.com/HofmeisterAn/dotnet-testcontainers\\\\nRegExtract - https://github.com/sblom/RegExtract\\\\nUnitsNet - https://github.com/angularsen/UnitsNet\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nCocona - 1:00\\\\nPowerUp - 4:56\\\\ndotnet-testcontainers - 7:00\\\\nRegExtract - 12:59\\\\nUnitsNet - 15:11\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #opensource\"",
    "lengthSeconds": "1085",
    "uploadDate": "2022-02-07",
    "thumbnail_url": "https://i.ytimg.com/vi/pDCMXoisvX4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=uass0C6NEpA",
    "title": "How to use AWS DynamoDB Streams in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, aws lambda, aws dynamodb, dynamodb, dynamo db, dynamo, dynamodb stream, dynamodb lambda, .net aws lambda, aws .net tutorial, c# aws tutorial, The AWS DynamoDB feature you",
    "scraped_at": 1685095335.2185514,
    "genre": "Education",
    "views": "19685",
    "desc": "Get started with AWS for FREE: https://go.aws/3IRuSfW\\\\nGet the source code: https://github.com/Elfocrash/aws-videos\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video is sponsored by AWS\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you one of my absolute favourite AWS DynamoDB features called DynamoDB Stream. It allows us to consume database changes in real time and process them in an event driven architecture approach to build scalable systems.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n #aws #dynamodb #dotnet\"",
    "lengthSeconds": "1505",
    "uploadDate": "2022-02-03",
    "thumbnail_url": "https://i.ytimg.com/vi/uass0C6NEpA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=MHIheQ2_Yb4",
    "title": "How this NEW type changed the logging game in C# 10",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, logging, error messages, error handling, exceptions, argumentnullexception, argumentexception, How CallerArgumentExpression changes the logging game in C# 10, c# 10 features, c# 10, Better C# logs with CallerArgumentExpression, CallerArgumentExpression, CallerArgumentExpressionAttribute",
    "scraped_at": 1685095335.2875264,
    "genre": "Education",
    "views": "38722",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will introduce you to the CallerArgumentExpression attribute added in C# 10. It is an awesome addition in the family of Caller attributes and it makes error messages and logging so much better.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #logging\"",
    "lengthSeconds": "556",
    "uploadDate": "2022-01-31",
    "thumbnail_url": "https://i.ytimg.com/vi/MHIheQ2_Yb4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=SDu0MA6TmuM",
    "title": "Clean up your .NET Controllers with ApiEndpoints",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, api endpoints, apiendpoints, ardalis, steve smith, steve smith apis, clean architecture, mediatr, Clean up your .NET Controllers with ApiEndpoints",
    "scraped_at": 1685095337.9569016,
    "genre": "Education",
    "views": "54573",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you an alternative way to build an elegant API in ASP.NET Core using ApiEndpoints, a nuget package created by Steve \\\\\"",
    "lengthSeconds": "909",
    "uploadDate": "2022-01-27",
    "thumbnail_url": "https://i.ytimg.com/vi/SDu0MA6TmuM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=baiH3f_TFfY",
    "title": "How slow is MediatR really?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, Mediatr, mediatr .net, mediatr c#, mediator, mediator patteron, mediator C#, mediator .net, mediatr performance, jimmy bogard, How slow is MediatR really, How slow is MediatR, cqrs, mediatr cqrs",
    "scraped_at": 1685095335.3595257,
    "genre": "Education",
    "views": "54288",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will investigate a claim around the library MediatR and how it can affect your application\\'s performance. This video will also introduce you to performance measuring and memory profiling techniques.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #mediatr\"",
    "lengthSeconds": "950",
    "uploadDate": "2022-01-24",
    "thumbnail_url": "https://i.ytimg.com/vi/baiH3f_TFfY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=24D7u3y3mhI",
    "title": "How C# 10 \u201cfixed\u201d string interpolation",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, string interpolation, interpolation, string interpolation c#, string interpolation C# 10, string interpolation .net 6, .net 6, c# 10, interpolatedstringhandler, defaultinterpolatedstringhandler, interpolated string handler",
    "scraped_at": 1685095335.4325514,
    "genre": "Education",
    "views": "73302",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how the introduction of InterpolatedStringHandlers in C# 10 and .NET 6 completely change the way we think about them. Not only is string interpolation significantly more efficient now when it comes to speed and memory, but you can also create your own InterpolatedStringHandlers to completely eliminate allocations in some cases.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe problem - 0:38\\\\nHow Microsoft fixed it - 3:00\\\\nHow you can build your own - 8:17\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #performance\"",
    "lengthSeconds": "1085",
    "uploadDate": "2022-01-20",
    "thumbnail_url": "https://i.ytimg.com/vi/24D7u3y3mhI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gw-6lKrKlp0",
    "title": "My .NET backend developer roadmap for 2022",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, dotnet developer roadmap, developer roadmap, .net developer roadmap, developer roadmap 2022, .net developer roadmap 2022, nick chapsas developer roadmap, nick chapsas roadmap, My .NET backend developer roadmap for 2022",
    "scraped_at": 1685095335.5125525,
    "genre": "Education",
    "views": "115453",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will share with you my roadmap for being a .NET backend developer. This roadmap is very opinionated and it is driven from my own personal experience. It includes practices, technology and tooling that I see every day working in companies that focus on performance and scale. This is NOT a roadmap to follow unless you want to specifically focus on the same usecase. For a more general roadmap check out the link below.\\\\n\\\\nGive my roadmap a star on Github: https://github.com/Elfocrash/.NET-Backend-Developer-Roadmap\\\\nGive the original roadmap a star on Github: https://github.com/MoienTajik/AspNetCore-Developer-Roadmap\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #roadmap\"",
    "lengthSeconds": "852",
    "uploadDate": "2022-01-17",
    "thumbnail_url": "https://i.ytimg.com/vi/gw"
  },
  {
    "link": "watch?v=a26zu-pyEyg",
    "title": "High-performance logging in .NET, the proper way",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, logging, logging in C#, logging in .NET, you are doing logging wrong, serilog, better c# logging, better .net logging, elasticsearch logs, kibana, high",
    "scraped_at": 1685095335.5885534,
    "genre": "Education",
    "views": "55846",
    "desc": "Use discount code 3YEARS for a 10% discount on my Essentials Course Bundle: https://dometrain.com/bundle/nick-chapsas-complete-courses-bundle/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show how you can do high-performance logging in .NET. Logging is something that can be abused very easily but thankfully the latest versions of .NET have added a couple of ways to perform logging that is as efficient as possible.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #logging\"",
    "lengthSeconds": "955",
    "uploadDate": "2022-01-13",
    "thumbnail_url": "https://i.ytimg.com/vi/a26zu"
  },
  {
    "link": "watch?v=6zZLcCAKDbo",
    "title": "Sponsoring EVERY Open-Source project I made money from on GitHub",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, github sponsors, sponsors, patreon, github sponsors vs patreon, sponsoring github projects, Sponsoring Open",
    "scraped_at": 1685095338.0279284,
    "genre": "Education",
    "views": "13020",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to sponsor every GitHub project that I made money from by showcasing it in my YouTube channel. I feel very strongly about Open-source, especially in the .NET community, and I with the size of my audience, I would like to do some good.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#github #sponsors #oss\"",
    "lengthSeconds": "644",
    "uploadDate": "2022-01-10",
    "thumbnail_url": "https://i.ytimg.com/vi/6zZLcCAKDbo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=bnVfrd3lRv8",
    "title": "You are doing .NET logging wrong. Let's fix it",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, logging, logging in C#, logging in .NET, you are doing logging wrong, serilog, better c# logging, better .net logging, elasticsearch logs",
    "scraped_at": 1685095335.6635525,
    "genre": "Education",
    "views": "144110",
    "desc": "Check out the Essentials course bundle: https://dometrain.com/bundle/nick-chapsas-complete-courses-bundle/\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you why you are probably doing .NET logging wrong and how you can fix it. Logging is a very common thing in any application and it is really easy to abuse.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe problem - 1:07\\\\nBenchmarking it - 6:44\\\\nMemory profiling with dotMemory - 10:55\\\\nA pragmatic solution - 18:24\\\\nSerilog - 23:15\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #logging\"",
    "lengthSeconds": "1528",
    "uploadDate": "2022-01-06",
    "thumbnail_url": "https://i.ytimg.com/vi/bnVfrd3lRv8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ByL2NuNTuHs",
    "title": "How Tye makes building microservices a joke",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, microservices, .net microservice, kubernetes, k8s, kubernetes deployment, project tye, tye, dapr, docker, scott hunter",
    "scraped_at": 1685095335.7355528,
    "genre": "Education",
    "views": "70279",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use Microsoft\\'s Project Tye, or simply Tye, to make working with microservices incredibly easy. We will also deploy to Kubernetes and see how Tye makes that extremely simple too.\\\\n\\\\nProject Tye: https://github.com/dotnet/tye\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#tye #microservices #kubernetes\"",
    "lengthSeconds": "769",
    "uploadDate": "2022-01-03",
    "thumbnail_url": "https://i.ytimg.com/vi/ByL2NuNTuHs/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9v6RENPk5iM",
    "title": "What are record types in C# and how they ACTUALLY work",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, c# records, record, record c#, c# 9, c# 10, record class, record struct, What are record types in C# and how they actually work",
    "scraped_at": 1685095335.8115244,
    "genre": "Education",
    "views": "88747",
    "desc": "Check out my Dependency Injection course: https://dometrain.com/course/from-zero-to-hero-dependency-injection-in-net/\\\\nUse discount code YTDEP2 at checkout for 15% off\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the record type that was added in C# 9. Records are great and they have many usecases but in this video we are going to focus on their features and also how they made their way into the language without having to change the runtime.\\\\n\\\\nIntro - 0:00\\\\nRecord features - 1:37\\\\nWhat records are behind the scenes - 10:12\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #records\"",
    "lengthSeconds": "936",
    "uploadDate": "2021-12-30",
    "thumbnail_url": "https://i.ytimg.com/vi/9v6RENPk5iM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=cNlxPKy_NPA",
    "title": "How to deploy .NET apps to Kubernetes",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, kubernetes, k8s, k8s in .net, c# k8s, pulumi, terraform, deploy dotnet core to kubernetes, deploy dotnet to kubernetes, minikube, docker",
    "scraped_at": 1685095333.4925516,
    "genre": "Education",
    "views": "54146",
    "desc": "Check out my Dependency Injection course: https://dometrain.com/course/from-zero-to-hero-dependency-injection-in-net/\\\\nUse discount code YTDEP2 at checkout for 15% off\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can deploy your applications to Kubernetes very quickly and easily.\\\\n\\\\nHow to create an AKS cluster with Terraform: https://learn.hashicorp.com/tutorials/terraform/aks\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#kubernetes #k8s #devops\"",
    "lengthSeconds": "721",
    "uploadDate": "2021-12-27",
    "thumbnail_url": "https://i.ytimg.com/vi/cNlxPKy_NPA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=iqt7bqAm27U",
    "title": "Cleaner C# code with \"smart\" using statements",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, using keyword, using statement, using c#, c# using statement, using .net, using, using disposable, idisposable, disposable pattern, c# idisposable",
    "scraped_at": 1685095335.8845518,
    "genre": "Education",
    "views": "60143",
    "desc": "Check out my Dependency Injection course: https://dometrain.com/course/from-zero-to-hero-dependency-injection-in-net/\\\\nUse discount code YTDEP1 at checkout for 15% off\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how to use the using statement in C# in a different way in order to write cleaner C# code in .NET.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "990",
    "uploadDate": "2021-12-23",
    "thumbnail_url": "https://i.ytimg.com/vi/iqt7bqAm27U/maxresdefault.jpg"
  },
  {
    "link": "watch?v=JNDgcBDZPkU",
    "title": "How to create your own .NET CLI tools to make your life easier",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .NET 6, .net cli, .net cli tool, custom .net cli tool, create a .net cli tool, custom .net tool, How to create your own .NET CLI tools",
    "scraped_at": 1685095335.9555533,
    "genre": "Education",
    "views": "41600",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can create your very own custom .NET CLI tools that are globally accessible.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #cli\"",
    "lengthSeconds": "516",
    "uploadDate": "2021-12-20",
    "thumbnail_url": "https://i.ytimg.com/vi/JNDgcBDZPkU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=iqbgXgrEB4M",
    "title": "How type deconstruction keeps your C# code clean",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, deconstruct, deconstruction c#, deconstruction .net, How type deconstruction helps keep your C# code clean, void deconstruct, out parameters",
    "scraped_at": 1685095338.0989003,
    "genre": "Education",
    "views": "57146",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk a feature called deconstruction in C#. It is a feature I really see underutilized and I\\'d like to change that by showing you how awesome it is.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "658",
    "uploadDate": "2021-12-16",
    "thumbnail_url": "https://i.ytimg.com/vi/iqbgXgrEB4M/maxresdefault.jpg"
  },
  {
    "link": "watch?v=VCGXubxKL9I",
    "title": "How \"out\" works in C# and why \"in\" can make or break your performance",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, in keyword, in keyword c#, out keyword, out keyword c#, defensive copy c#, defensive copies, how out works in c#, how in works in c#",
    "scraped_at": 1685095336.0295265,
    "genre": "Education",
    "views": "62429",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what the in and out keywords do in C# and how the in keyword can be crucial to ensuring good application performance when using structs.\\\\n\\\\nTimestamp:\\\\nIntro - 0:00\\\\nThe \\\\\"",
    "lengthSeconds": "1004",
    "uploadDate": "2021-12-13",
    "thumbnail_url": "https://i.ytimg.com/vi/VCGXubxKL9I/maxresdefault.jpg"
  },
  {
    "link": "watch?v=dLPKwEeqwgU",
    "title": "Why aspect-oriented programming in C# is pointless",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, aop, aspect",
    "scraped_at": 1685095336.0995529,
    "genre": "Education",
    "views": "42226",
    "desc": "Check out my courses: https://dometrain.com\\\\nUse discount code YTUNIT2 at checkout for 15% off\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain what aspect-oriented programming, or AOP for short, is in the context of C#. I will explain how you can implement it and why it\\'s something that could be of use and also show you why ultimately it\\'s not something I recommend using.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #aop\"",
    "lengthSeconds": "1021",
    "uploadDate": "2021-12-09",
    "thumbnail_url": "https://i.ytimg.com/vi/dLPKwEeqwgU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=8sETbd7M45I",
    "title": "A hands-on look at JetBrains Fleet, the VS Code competitor",
    "tags": "Elfocrash, elfo, coding, C#, how to code, tutorial, development, software engineering, microsoft, nick chapsas, chapsas, dotnet, jetbrains, fleet, jetbrains fleet, rider, intellij, hands",
    "scraped_at": 1685095338.1739247,
    "genre": "Education",
    "views": "199860",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I have for you a hands-on preview of JetBrains Fleet, the next-generation IDE by JetBrains. \\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#jetbrains #fleet\"",
    "lengthSeconds": "741",
    "uploadDate": "2021-12-06",
    "thumbnail_url": "https://i.ytimg.com/vi/8sETbd7M45I/maxresdefault.jpg"
  },
  {
    "link": "watch?v=CEZ6cF8eoeg",
    "title": "How to write \"smarter\" enums in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, enums in C#, enum, smartenum, enums in java, java enum, .net enum, SmartEnum, ardalis, Steve Smith",
    "scraped_at": 1685095336.1725543,
    "genre": "Education",
    "views": "125088",
    "desc": "Check out my courses: https://dometrain.com\\\\nUse discount code YTUNIT1 at checkout for 15% off\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna will show you how you can write smarter enums in C# by using Steve Smith\\'s SmartEnum nuget package. This feature was inspired by Java and how it handles enums and it tries to provide us with a type-safe object-oriented alternative to the classic C# enum.\\\\n\\\\nGive SmartEnum a star: https://github.com/ardalis/SmartEnum\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #enum\"",
    "lengthSeconds": "775",
    "uploadDate": "2021-12-02",
    "thumbnail_url": "https://i.ytimg.com/vi/CEZ6cF8eoeg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=tRHOBV31BeU",
    "title": "How to obfuscate your .NET app and why it's pointless",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, obfuscation, obfuscate c# app, obfuscate c#, obfuscate .net, hide .net code, cracl .net app, How to obfuscate your .NET app",
    "scraped_at": 1685095338.2439253,
    "genre": "Education",
    "views": "50870",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can obfuscate your .NET applications, explain a few concepts behind the process and help you understand why, even if you obfuscate your code, your app is still vulnerable.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #obfuscation\"",
    "lengthSeconds": "627",
    "uploadDate": "2021-11-29",
    "thumbnail_url": "https://i.ytimg.com/vi/tRHOBV31BeU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6sCqedkoRu8",
    "title": "params in C# is awesome but there is a catch",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, c# features, params in c#, params in .net, params, params keyword, the params keyword in c#, params keyword in C#",
    "scraped_at": 1685095333.564528,
    "genre": "Education",
    "views": "32344",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what the params keyword is in C#, how it works and how it can be used and also why it is a keyword that, depending on your usecase, you might wanna skip.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #params\"",
    "lengthSeconds": "774",
    "uploadDate": "2021-11-25",
    "thumbnail_url": "https://i.ytimg.com/vi/6sCqedkoRu8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=beaRQynnM-Q",
    "title": "So GitHub Copilot can suggest secret keys",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, github copilot, github co",
    "scraped_at": 1685095336.2415547,
    "genre": "Education",
    "views": "14539",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will take a look at GitHub Copilot\\'s ability to leak api keys and credentials and I will also explain why it is not as bad as you think.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#copilot #github\"",
    "lengthSeconds": "617",
    "uploadDate": "2021-11-22",
    "thumbnail_url": "https://i.ytimg.com/vi/beaRQynnM"
  },
  {
    "link": "watch?v=BOkpoJkAQqc",
    "title": "12 features coming in C# 11, potentially",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, c# features, c# 11 features, c# 11, 12 features coming in C# 11, c# 10, c#10 features",
    "scraped_at": 1685095336.3185246,
    "genre": "Education",
    "views": "23417",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this videoI will take a look at the C# features proposed for C# 11 at the language triage meeting.\\\\n\\\\ncsharplang GitHub repo: https://github.com/dotnet/csharplang\\\\n\\\\nTimestamp:\\\\nIntro - 0:00\\\\nrequired keyword - 0:55\\\\nGeneric attributes - 1:20\\\\nfield keyword - 2:26\\\\nList patterns - 3:09\\\\nStatic abstracts in interfaces - 4:52\\\\nDeclarations under or patterns - 5:33\\\\nRecords and initialization - 6:32\\\\nDiscriminated unions - 7:00\\\\nParams Span of T - 9:47\\\\nStatements as expressions - 10:41\\\\nExpression trees - 12:33\\\\nType system extensions - 14:19\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #csharp11\"",
    "lengthSeconds": "934",
    "uploadDate": "2021-11-18",
    "thumbnail_url": "https://i.ytimg.com/vi/BOkpoJkAQqc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=AFNujHJfMtU",
    "title": "Your opinion about C# and .NET is outdated",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, you are wrong about c#, you are wrong about .net, c# language, c# language features, Your opinion about C# and .NET is outdated, c# vs java, is java better than c#",
    "scraped_at": 1685095338.316901,
    "genre": "Education",
    "views": "114093",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to address something that has come to my attention. It appears that many people, talking about .NET but not working with it, seem to believe that it\\'s still stuck in 2013, which isn\\'t the case. In this video I will try to give you an update to the state of the C# language and the .NET platform.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "536",
    "uploadDate": "2021-11-15",
    "thumbnail_url": "https://i.ytimg.com/vi/AFNujHJfMtU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=UDxiy1RYPlI",
    "title": "Should unskilled devs be using GitHub Copilot?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, github copilot, github co",
    "scraped_at": 1685095338.3879004,
    "genre": "Education",
    "views": "21124",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will address some of the critisism that Github Copilot has been getting.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #copilot #github #dotnet\"",
    "lengthSeconds": "751",
    "uploadDate": "2021-11-11",
    "thumbnail_url": "https://i.ytimg.com/vi/UDxiy1RYPlI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=rdWZo5PD9Ek",
    "title": "How to create your own project templates in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, How to create your own project templates in .NET, how to create custom project templates in .net, project templates, .net 5 template in .net 6, dotnet new, new dotnet project",
    "scraped_at": 1685095338.4559255,
    "genre": "Education",
    "views": "25187",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can create your own custom project templates in .NET by using the built in dotnet new utility. \\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "916",
    "uploadDate": "2021-11-09",
    "thumbnail_url": "https://i.ytimg.com/vi/rdWZo5PD9Ek/maxresdefault.jpg"
  },
  {
    "link": "watch?v=HhyBaJ7uisU",
    "title": "40% faster JSON serialization with Source Generators in .NET 6",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net 6, .net 6 api, source generators, source gen, .net 6 source gen, json, json performance, json serlizations, json.net, fast json",
    "scraped_at": 1685095338.5248988,
    "genre": "Education",
    "views": "64314",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use the newly added source generator feature for System.Text.Json to get real world improvements of up to 40% in your code bases.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #sourcegenerators\"",
    "lengthSeconds": "489",
    "uploadDate": "2021-11-04",
    "thumbnail_url": "https://i.ytimg.com/vi/HhyBaJ7uisU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=XceIKXeIrD0",
    "title": "I let GitHub Copilot be the Pilot for my C# code",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, github copilot, github co",
    "scraped_at": 1685095338.59993,
    "genre": "Education",
    "views": "213729",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will try Github Copilot out. \\\\n\\\\nTimestamp:\\\\nIntro - 0:00\\\\nBinary Search Tree Example - 1:10\\\\nCreate a CRUD API Example - 6:03\\\\nFizzBuzz and Calculator - 12:33\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #copilot #github #dotnet\"",
    "lengthSeconds": "839",
    "uploadDate": "2021-11-01",
    "thumbnail_url": "https://i.ytimg.com/vi/XceIKXeIrD0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=wvpuyQANHog",
    "title": "The Minimal APIs we had for years in .NET but didn't use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, simple api, the simplest api, how to build an api, minimal api, minimal apis .net 6, .net 6, asp.net core 6, Carter, carter",
    "scraped_at": 1685095334.0455246,
    "genre": "Education",
    "views": "14886",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this videoI will show you a Nuget package called Carter that we had for years and would effectively provide a Minimal API-like approach to building APIs in .NET. \\\\n\\\\nGive Carter a star on GitHub: https://github.com/CarterCommunity/Carter\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #minimalapis\"",
    "lengthSeconds": "484",
    "uploadDate": "2021-10-28",
    "thumbnail_url": "https://i.ytimg.com/vi/wvpuyQANHog/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ibZGWkA7fXE",
    "title": "Let's talk about the removal of hot reload from dotnet watch situation",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, simple api, the simplest api, how to build an api, minimal api, minimal apis .net 6, .net 6, asp.net core 6, dotnet watch, hot reload, visual studio, vs code, visual studio code, rider, jetbrains rider, the verge, microsoft removed hot reload",
    "scraped_at": 1685095338.6709301,
    "genre": "Education",
    "views": "20494",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to talk about Microsoft\\'s controvesial move to remove hot reload from dotnet watch, making it a Visual Studio 2022 exclusive feature. The feature was added back in but I want to talk about this anyway because it starts to paint a worrying picture.\\\\n\\\\nDustin\\'s blog: https://dusted.codes/can-we-trust-microsoft-with-open-source\\\\nThe original PR: https://github.com/dotnet/sdk/pull/22217\\\\nThe issue asking why it was removed: https://github.com/dotnet/sdk/issues/22247\\\\nThe revert PR: https://github.com/dotnet/sdk/pull/22262\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #hotreload\"",
    "lengthSeconds": "482",
    "uploadDate": "2021-10-24",
    "thumbnail_url": "https://i.ytimg.com/vi/ibZGWkA7fXE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=sIXKpyhxHR8",
    "title": "7 awesome improvements for LINQ in .NET 6",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .NET 6, c# 10, c# 8, linq, linq in c#, linq improvements, linq performance, new linq methods in .net 6, 7 awesome improvements for LINQ in .NET 6",
    "scraped_at": 1685095338.7459326,
    "genre": "Education",
    "views": "209843",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna will show you 7 awesome improvements for LINQ in .NET 6. Some of them have to do with language modernization, and catching up with the latest C# features and some of them are quality of life improvemens for methods we had to commonly write ourselves.\\\\n\\\\nRange and Index documentation: https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/ranges-indexes\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nChunk - 0:55\\\\nTryGetNonEnumeratedCount - 3:20\\\\nThree way zipping - 7:46\\\\nMaxBy, MinBy, the other By\\'s - 9:31\\\\nElementAt accepts Index - 11:20\\\\nTake accept range/index - 12:39\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #linq\"",
    "lengthSeconds": "872",
    "uploadDate": "2021-10-21",
    "thumbnail_url": "https://i.ytimg.com/vi/sIXKpyhxHR8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Vft4QDUpyWY",
    "title": "Every feature added in C# 10 with examples",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6 features, c# 10 features, c# 10, c# features, Every feature added in C# 10",
    "scraped_at": 1685095338.818932,
    "genre": "Education",
    "views": "118237",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this videoI will show you every single feature added in C# 10. \\\\n\\\\nAsyncMethodBuilder example: https://gist.github.com/Horusiath/401ed16563dd442980de681d384f25b9\\\\n\\\\nTimestamp:\\\\nIntro - 0:00\\\\nGlobal using statements - 0:17\\\\nFile scoped namespaces - 2:30\\\\nConstant interpolated strings - 3:37\\\\nAttributes support generics - 4:37\\\\nLambda improvements - 5:31\\\\nExtended property patterns - 7:20\\\\nRecord structs - 8:35\\\\nRecord types can seal ToString() - 9:53\\\\nStructure type improvements - 10:48\\\\nAssignment and declaration in the same deconstruction - 11:53\\\\nAllow AsyncMethodBuilder on async methods - 13:05\\\\nStatic abstract members in interfaces - 14:19\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #csharp10\"",
    "lengthSeconds": "958",
    "uploadDate": "2021-10-18",
    "thumbnail_url": "https://i.ytimg.com/vi/Vft4QDUpyWY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=DVXqDV_A-mw",
    "title": "Which dictionary to choose in C# and which one is dangerous",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, dictionary, dictionary in c#, dictionary in .net, concurrentdictionary, thread safe dictionary, hashtable, hashtable c#, immutable dicitonary, Which dictionary to choose in C#",
    "scraped_at": 1685095334.1125495,
    "genre": "Education",
    "views": "90049",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the different dictionary types in C# and also the hashtable and how we can use them in different scenarios. I will also talk about one of the most common pitfalls that I\\'ve personally have fallen into unknowingly.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "671",
    "uploadDate": "2021-10-14",
    "thumbnail_url": "https://i.ytimg.com/vi/DVXqDV_A"
  },
  {
    "link": "watch?v=3YCdSvDXGJA",
    "title": "4 new useful APIs in .NET 6",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net 6, .net 6 api, 4 new useful APIs in .NET 6, 4 new awesome APIs in .NET 6",
    "scraped_at": 1685095336.3955255,
    "genre": "Education",
    "views": "74839",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you 4 NEW really useful APIs that are coming out or have come out depending on when you\\'re watching this video in .NET 6. There are many new APIs in this release but I only chose 4 that I will actually use right away.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#csharp #dotnet #dotnet6\"",
    "lengthSeconds": "1008",
    "uploadDate": "2021-10-11",
    "thumbnail_url": "https://i.ytimg.com/vi/3YCdSvDXGJA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=VuFQtyRmS0E",
    "title": "How to unit test Minimal APIs in .NET 6 (and why it's hard)",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, minimal api, minimal apis .net 6, .net 6, asp.net core 6, How to unit test Minimal APIs in .NET 6, unit test, unit test web api, unit test minimal api, .net unit test",
    "scraped_at": 1685095338.8909314,
    "genre": "Education",
    "views": "31353",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can properly unit test Minimal APIs in .NET 6. There has been a few blogs going around showing what I consider to be a bad practice so I\\'d like to give you my take on the matter and show you why those claims are wrong and how I would unit test them myself.\\\\n\\\\nScott\\'s post: https://www.hanselman.com/blog/minimal-apis-in-net-6-but-where-are-the-unit-tests\\\\nDamian\\'s GitHub repo: https://github.com/DamianEdwards/MinimalApiPlayground\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #minimalapi\"",
    "lengthSeconds": "1050",
    "uploadDate": "2021-10-07",
    "thumbnail_url": "https://i.ytimg.com/vi/VuFQtyRmS0E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=MzNHMJCyU40",
    "title": "The evolution of Pattern Matching in C# (from version 6 to 10)",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, pattern matching, c# pattern matching, ",
    "scraped_at": 1685095338.9659314,
    "genre": "Education",
    "views": "68555",
    "desc": "Check out our open positions at Checkout.com here: https://bit.ly/NickChapsas02\\\\nJoin me and let\\'s build the future of payments!\\\\n\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video is sponsored by Checkout.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how pattern matching was introduced in C# and how it has evolved from version 6 all the way to version 10. It is an amazing feature which can be really handy to prevent you having to write lengthy complicated clauses.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nI am hiring! - 0:47\\\\nC# 6 - 1:37\\\\nC# 7 - 3:03\\\\nC# 8 - 5:36\\\\nC# 9 - 9:31\\\\nC# 10 - 13:58\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "967",
    "uploadDate": "2021-10-04",
    "thumbnail_url": "https://i.ytimg.com/vi/MzNHMJCyU40/maxresdefault.jpg"
  },
  {
    "link": "watch?v=viBfsaPT2g8",
    "title": "7 tips for writing better library code in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, nuget, .net library, mediatr, automapper, 7 tips for writing better library code in .NET",
    "scraped_at": 1685095336.4695518,
    "genre": "Education",
    "views": "27658",
    "desc": "Check out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will share with you 7 tips that will help you write better .NET libraries. It will also help you identify which libraries are using good practices and which aren\\'t.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\n1. Build with testability in mind - 1:10\\\\n2. No opinionated dependency injection - 3:22\\\\n3\\\\u00264. Offer separate dependecy injection packages \\\\u0026 extension methods -  7:14\\\\n5. The user\\'s trust and CancellationToken(s)- 8:30\\\\n6. Use inline/comment documentation - 10:09\\\\n7. Use access keywords!! - 11:44\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp\"",
    "lengthSeconds": "826",
    "uploadDate": "2021-09-30",
    "thumbnail_url": "https://i.ytimg.com/vi/viBfsaPT2g8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=_YkvFQ1-Lt0",
    "title": "How Assembly Scanning keeps your .NET code clean",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, assembly scanning, assembly marker, Mediatr, FluentValidation, assembly scanning c#, assembly scanning .NET, How Assembly Scanning keeps your .NET code clean",
    "scraped_at": 1685095336.540551,
    "genre": "Education",
    "views": "27646",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about Assembly Scanning in C# \\\\u0026 .NET and show you how it helps keep your code clean.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nWhat is Assembly Scanning? - 0:42\\\\nImplementing Assembly Scanning - 8:06\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1112",
    "uploadDate": "2021-09-27",
    "thumbnail_url": "https://i.ytimg.com/vi/_YkvFQ1"
  },
  {
    "link": "watch?v=Tvx6DNarqDM",
    "title": "How to write clean validation clauses in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, Clean argument guarding in .NET with GuardClauses, guard, guard clauses, argument guarding, How to write clean guard clauses in .NET",
    "scraped_at": 1685095336.6125512,
    "genre": "Education",
    "views": "48989",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna will show you how you can write clean and elegant guard clauses in .NET by using Steve \\\\\"",
    "lengthSeconds": "545",
    "uploadDate": "2021-09-23",
    "thumbnail_url": "https://i.ytimg.com/vi/Tvx6DNarqDM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Op0yNNLg1zc",
    "title": "Is C# getting out of hand?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, C# new features, c# 9 features, c# 10 features, C# direction, Is C# getting out of hand, is c# bloated",
    "scraped_at": 1685095336.683552,
    "genre": "Education",
    "views": "29453",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nCheck out my courses: https://dometrain.com\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about C#\\'s feature bloat which has been raised in the comment time and time again and give you my opinion on it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "554",
    "uploadDate": "2021-09-20",
    "thumbnail_url": "https://i.ytimg.com/vi/Op0yNNLg1zc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=XKN0084p7WQ",
    "title": "Extending .NET Minimal APIs with Swagger, Authentication & Validation",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, simple api, the simplest api, how to build an api, minimal api, minimal apis .net 6, .net 6, asp.net core 6, Swagger, Authentication, auth, authorization, validation, fluent validation, validation in .net, swagger minimal apis, auth minimal apis, validation minimal apis",
    "scraped_at": 1685095336.755553,
    "genre": "Education",
    "views": "42943",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna will show you how you can add three very useful features in .NET 6\\'s Minimal APIs. Those are Swagger support, Authentication and Authorization support and also Validation support. These are features you requests and they are some of the most basic features an API needs so here you go.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #minimalapi\"",
    "lengthSeconds": "1029",
    "uploadDate": "2021-09-16",
    "thumbnail_url": "https://i.ytimg.com/vi/XKN0084p7WQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=RA7OWnqBdqA",
    "title": ".NET developer reacts to the Stack Overflow survey 2021",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, stackoverflow, stack overflow, stack overflow survey, survey, stackoverflow survey, stackoverflow survey 2021, stackoverflow survey 2020, reaction to stackoverflow, reaction, react",
    "scraped_at": 1685095339.0509317,
    "genre": "Education",
    "views": "37638",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will react blindly to the new StackOverflow survey for 2021. I will give you my input from a .NET and C# developer perspective and see how things have moved up and down this year.\\\\n\\\\nStackOverflow Survey: https://insights.stackoverflow.com/survey/2021\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nGeography - 0:58\\\\nLearning to code - 1:18\\\\nDeveloper type - 2:45\\\\nEducational attainment - 3:48\\\\nMost popular languages - 4:33\\\\nMost popular databases - 6:03\\\\nMost popular cloud platforms - 6:46\\\\nMost popular web frameworks - 8:00\\\\nMost popular tools - 8:42\\\\nMost popular IDEs - 10:19\\\\nMost popular operating system - 10:47\\\\nMost loved languages - 11:10\\\\nMost loved databases - 12:05\\\\nMost loved web frameworks - 12:51\\\\nTop paying languages - 13:34\\\\nTop paying databases - 14:28\\\\nTop paying platforms - 15:13\\\\nTop paying web frameworks - 15:33\\\\nSalary by developer type - 15:54\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#stackoverflow #reaction\"",
    "lengthSeconds": "1088",
    "uploadDate": "2021-09-13",
    "thumbnail_url": "https://i.ytimg.com/vi/RA7OWnqBdqA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=mwHWPoKEmyY",
    "title": "5 open source .NET projects that deserve more attention",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, .net open source, open source, nbomber, verify, csharprepl, cupboard, cake, spectre.console, fluentdocker, docker, 5 open source .NET projects that deserve more attention",
    "scraped_at": 1685095336.8345256,
    "genre": "Education",
    "views": "54679",
    "desc": "Get tickets to NDC Oslo here: https://ndcoslo.com\\\\nCheck out other NDC conferences here: https://ndcconferences.com/\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video is sponsored by NDC Conferences\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna introduce you to 5 open source .NET projects that I believe deserve more attention. If you know any packages that deserve more attention, please leave them in the comments down below.\\\\n\\\\nGive them all a star:\\\\nNBomber: https://github.com/PragmaticFlow/NBomber\\\\nCSharpRepl: https://github.com/waf/CSharpRepl\\\\nVerify: https://github.com/VerifyTests/Verify\\\\nFluentDocker: https://github.com/mariotoffia/FluentDocker\\\\nCupboard: https://github.com/patriksvensson/cupboard\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nNBomber - 2:23\\\\nCSharpRepl - 6:42\\\\nVerify - 8:35\\\\nFluentDocker - 12:37\\\\nCupboard - 14:35\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "1086",
    "uploadDate": "2021-09-09",
    "thumbnail_url": "https://i.ytimg.com/vi/mwHWPoKEmyY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4ORO-KOufeU",
    "title": "In defence of .NET Minimal APIs | Refactoring",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, simple api, the simplest api, how to build an api, minimal api, minimal apis .net 6, .net 6, asp.net core 6, minimal api refactoring, In defence of .NET",
    "scraped_at": 1685095339.1289315,
    "genre": "Education",
    "views": "51189",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna address a lot of the critisism that Minimal APIs have been getting in the past few weeks as we are getting closer and closer to the release of .NET 6. In this video I will show you how we can refactor Minimal APIs to a more elegant way and structure and see how we can make them unit testable. I will also show you how their performance compares to the web api equivalent.\\\\n\\\\nTimestamp\\\\nIntro - 0:00\\\\nRefactoring - 1:04\\\\nMaking unit testable - 7:17\\\\nThe secret sauce - 10:35\\\\nLoad testing - 11:25\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #minimalapi\"",
    "lengthSeconds": "864",
    "uploadDate": "2021-09-06",
    "thumbnail_url": "https://i.ytimg.com/vi/4ORO"
  },
  {
    "link": "watch?v=Kd8oNLeRc2c",
    "title": "The best way to create a string in C# that you shouldn't use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, what is span in c#, span in .net, span and memory in c#, dotnet, .net, The best way to create a string in C# that you shouldn",
    "scraped_at": 1685095336.9115548,
    "genre": "Education",
    "views": "66479",
    "desc": "Get tickets to NDC Oslo here: https://ndcoslo.com\\\\nCheck out other NDC conferences here: https://ndcconferences.com/\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video is sponsored by NDC Conferences\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about what is the best way to create a string in C# in terms of speed and memory allocation. We don\\'t just focus on creating the string itself, since that is easy enough but we are going to put it in context with a pretty common problem and see how this approach fixes the problem.\\\\n\\\\nTimestamps\\\\nThe problem - 0:00\\\\nThe simple solution - 2:13\\\\nFirst optimization - 5:44\\\\nSecond optimization - 7:32\\\\nThe best way - 9:23\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #span\"",
    "lengthSeconds": "1000",
    "uploadDate": "2021-09-03",
    "thumbnail_url": "https://i.ytimg.com/vi/Kd8oNLeRc2c/maxresdefault.jpg"
  },
  {
    "link": "watch?v=eRJFNGIsJEo",
    "title": "The simplest way to create an API is with .NET | Minimal APIs",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, simple api, the simplest api, how to build an api, minimal api, minimal apis .net 6, .net 6, asp.net core 6, The simplest way to create an API is with .NET",
    "scraped_at": 1685095336.9855509,
    "genre": "Education",
    "views": "83384",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about the Minimal API  development approach coming in .NET 6. Historically .NET\\'s WebAPI has been quite the \\\\\"",
    "lengthSeconds": "917",
    "uploadDate": "2021-08-31",
    "thumbnail_url": "https://i.ytimg.com/vi/eRJFNGIsJEo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=xwMWGYD8rgk",
    "title": "How to collect the code coverage of your tests in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, .net, dotnet, code coverage, code coverage testing, code coverage .net, coverlet, cobertura, unit testing, testing, test coverage",
    "scraped_at": 1685095337.057553,
    "genre": "Education",
    "views": "39130",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can easily collect the code coverage of your .NET application both in a quick and easy way but also in a more details view. Code coverage sometimes is a requirement for your projects and in this video I will show you how you can collect it without relying on Visual Studio or Rider.\\\\n\\\\nGive Coverlet a star: https://github.com/coverlet-coverage/coverlet\\\\nGive ReportGenerator a star: https://github.com/danielpalme/ReportGenerator\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#codecoverage #dotnet #csharp\"",
    "lengthSeconds": "685",
    "uploadDate": "2021-08-27",
    "thumbnail_url": "https://i.ytimg.com/vi/xwMWGYD8rgk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=BoE5Y6Xkm6w",
    "title": "C#'s Enum performance trap your code is suffering from",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, .net, dotnet, enum performance, enum tostring, ToString enum performance, The Enum performance trap in C#, enum tostring slow, tostring slow, memoery allocation, span, memory, benchmark",
    "scraped_at": 1685095337.1275246,
    "genre": "Education",
    "views": "54239",
    "desc": "The first 1,000 people to use this link will get a 1 month free trial of Skillshare: https://skl.sh/nickchapsas08211\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about a very interesting performance pitfall that enums face in C#. C# and .NET in general are very good in optimizing a lot of obvious code but this one is incredibly interesting because it\\'s very easy to fix.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#enum #dotnet #csharp\"",
    "lengthSeconds": "594",
    "uploadDate": "2021-08-19",
    "thumbnail_url": "https://i.ytimg.com/vi/BoE5Y6Xkm6w/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gW6dFpTMk8s",
    "title": "Getting started with branching workflows, Git Flow and GitHub Flow",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, git flow, gitflow, github flow, git hub flow, git flow tutorial, github flow tutorial, branching workflow, github branching, git branching, main branch, branching and merging in git, git tutorial, git tutorial for beginners",
    "scraped_at": 1685095337.202899,
    "genre": "Education",
    "views": "92140",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the two most popular git branching workflows and those are Git Flow and GitHub flow. They have both been around for quite a long time and I have personally used them in a production capacity so in this video I will explain the flow for each workflow and then give you my opinion on them.\\\\n\\\\nGitHub\\'s page on GitHub Flow: https://guides.github.com/introduction/flow\\\\nGit Flow: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#branching #workflow #git\"",
    "lengthSeconds": "630",
    "uploadDate": "2021-08-10",
    "thumbnail_url": "https://i.ytimg.com/vi/gW6dFpTMk8s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=1JAdZul-aRQ",
    "title": "How to create your own Fluent API in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, fluent api, fluent, fluent api c#, fluent api .net, How to create your own Fluent API in C#, how to create fluent api, dotnet, .net",
    "scraped_at": 1685095337.2769,
    "genre": "Education",
    "views": "46027",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can create your own Fluent API in C# and .NET. This is one of the many methods you can follow to do it but it\\'s one of my favourites because it gives you the ability to have stages in your fluent building.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "671",
    "uploadDate": "2021-08-06",
    "thumbnail_url": "https://i.ytimg.com/vi/1JAdZul"
  },
  {
    "link": "watch?v=GQAgh_z1rHY",
    "title": "How to rate limit (throttle) your ASP.NET Core API",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, dotnet, .net, rate limit, api rate limit, api throttling, asp.net core api, asp.net core api rate limit, asp.net core api throttle, dotnet core api rate limit, How to rate limit ",
    "scraped_at": 1685095337.3499253,
    "genre": "Education",
    "views": "38829",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can rate limit, or throttle, your ASP.NET Core APIs. Rate limiting is vital for your public APIs because it prevents abuse by bad actors. You can also sell access to specific endpoints or the API as a whole with different rules. We will be using a Nuget package called AspNetCoreRateLimit.\\\\n\\\\nGive AspNetCoreRateLimit a star on GitHub: https://github.com/stefanprodan/AspNetCoreRateLimit\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nIP based rate limiting - 1:10\\\\nClient based rate limiting - 8:49\\\\nDistributed rate limiting with Redis - 13:39\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #aspnetcore\"",
    "lengthSeconds": "1000",
    "uploadDate": "2021-08-03",
    "thumbnail_url": "https://i.ytimg.com/vi/GQAgh_z1rHY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=tMtiUm1zF6Q",
    "title": "What does the ref keyword actually do in C#?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, ref keyword in c#, ref keyword in c# with example, What does the ref keyword actually do in C#, parameter passing in c#, parameter passing, reference types, value types, reference obejcts, value objects, dotnet, .net",
    "scraped_at": 1685095339.2009313,
    "genre": "Education",
    "views": "24716",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to explain to you exactly what the ref keyword does in C#. I will explain this in the context of parameter passing because it is where you will most commonly encounter it but I will also talk about ref structs and how you can use it there to prevent something from being allocated in a place where it shouldn\\'t.\\\\n\\\\nTimestamps\\\\nHow method parameters are passed? - 0:00\\\\nWhat is ref struct? - 8:12\\\\nref locals, ref in methods, return ref??? - 9:31\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #ref\"",
    "lengthSeconds": "838",
    "uploadDate": "2021-07-30",
    "thumbnail_url": "https://i.ytimg.com/vi/tMtiUm1zF6Q/maxresdefault.jpg"
  },
  {
    "link": "watch?v=_hTzTnuq7lg",
    "title": "Where C# was, where it's going and why it's very exciting",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, where is c# going, where is .net going, C# new features, c# 9 features, c# 10 features, C# direction, Where is C# going and why it",
    "scraped_at": 1685095340.221173,
    "genre": "Education",
    "views": "44576",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about C#\\'s version history and briefly go over each version\\'s features and as the days come closer for C# 10 and .NET 6 to be release I wanna discuss where C# is going next and why it might not be what you think.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "792",
    "uploadDate": "2021-07-27",
    "thumbnail_url": "https://i.ytimg.com/vi/_hTzTnuq7lg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=RSFiiKUvzLI",
    "title": ".NET's Regex performance trap your code might be suffering from",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The hidden performance trap of Regex in .NET, The hidden performance trap of Regex in C#, regex in c#, regex in .net, regex performance, regex optimization, c# regex, dotnet, .net",
    "scraped_at": 1685095339.2729313,
    "genre": "Education",
    "views": "16076",
    "desc": "The first 1000 people to use the link will get a 1 month free trial of Skillshare Premium Membership: https://skl.sh/nickchapsas07211\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the potential pitfalls that you can encounter when working with Regex in .NET. Regex is a very complicated feature but its proper use in an application doesn\\'t have to be. It has some features that allow .NET to optimize it, such as the Compiled option, but if not used properly it can absolutely tank our application\\'s performance.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#regex #dotnet #csharp\"",
    "lengthSeconds": "569",
    "uploadDate": "2021-07-22",
    "thumbnail_url": "https://i.ytimg.com/vi/RSFiiKUvzLI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=GjoX6Qf4y38",
    "title": "The 4 \"secret\" C# keywords that you shouldn't use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, dotnet, .net, the 4 secret keywords, secret c# keywords, hidden c# keywords, makeref, reftype, refvalue, arglist, __makeref, __reftype, __refvalue, __arglist",
    "scraped_at": 1685095339.3459575,
    "genre": "Education",
    "views": "13693",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the 4 secret or hidden keywords in C#. Those keywords are not part of the spec and there is no official documentation by Microsoft about them at all. In this video I will show you what they do and how you could use them.\\\\n\\\\nBen Bowen\\'s blog about __makeref: https://benbowen.blog/post/fun_with_makeref\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\n__makeref - 0:43\\\\n__refvalue \\\\u0026 __reftype - 6:26\\\\n__arglist - 7:50\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #secretkeywords #csharp\"",
    "lengthSeconds": "637",
    "uploadDate": "2021-07-19",
    "thumbnail_url": "https://i.ytimg.com/vi/GjoX6Qf4y38/maxresdefault.jpg"
  },
  {
    "link": "watch?v=g1UQf3TOBn8",
    "title": "Why programming language performance in microservices isn't (that) important",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, programming language performance, programming language performance comparison, slow programming languages, fast programming languages, Why programming language performance in microservices isn",
    "scraped_at": 1685095339.4209313,
    "genre": "Education",
    "views": "15976",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about a topic I am quite passionate about and that is programming language performance. Every now and then I am part of some discussion where someone will tell me that I should stop using a programming language and instead use a different one because it is faster. In this video I want to take that point and put it into perspective in the scope of microservices and see if it actually matters.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#microservices #performance #scaling\"",
    "lengthSeconds": "516",
    "uploadDate": "2021-07-16",
    "thumbnail_url": "https://i.ytimg.com/vi/g1UQf3TOBn8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=FM5dpxJMULY",
    "title": "What is Span in C# and why you should be using it",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, what is span in c#, span in .net, write allocation free code in c#, What is Span in C# and why you should be using it, span of t, how span works, span and memory in c#, dotnet, .net",
    "scraped_at": 1685095339.4931464,
    "genre": "Education",
    "views": "204696",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about Span of T in C#. Span was introduced in C# and .NET alongside a series of optimisations all the way back in .NET 2.1 and it has come to my attention that it is really confusing to understand if you just read the documentation for it. In this video I will break it down for you and help you understand exactly what it is, how it works and how you can use it in your applications today!\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #span\"",
    "lengthSeconds": "914",
    "uploadDate": "2021-07-13",
    "thumbnail_url": "https://i.ytimg.com/vi/FM5dpxJMULY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2f2elFRmeLE",
    "title": "The hidden cost of Exceptions in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, exceptions in C#, exceptions in .net, exception performance, The hidden cost of Exceptions in .NET, The hidden cost of Exceptions in C#, exceptions are slow in .net, exceptions are slow, exception performance in c#, dotnet, .net",
    "scraped_at": 1685095339.5991473,
    "genre": "Education",
    "views": "32238",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the hidden cost of Exceptions in C# and .NET in general. Exceptions are a great feature but when misused they can lead to unexpected performance issues. By no means should you go and change your applications but it is good to be aware of the shortcoming and take a look at potential alternatives.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #exceptions\"",
    "lengthSeconds": "586",
    "uploadDate": "2021-07-09",
    "thumbnail_url": "https://i.ytimg.com/vi/2f2elFRmeLE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=r-Jte8Y8zag",
    "title": "Getting started with API Load Testing (Stress, Spike, Load, Soak)",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, nick chapsas, chapsas, Getting started with API Load Testing, Getting started with API Performance Testing, spike testing, load testing, jmeter, k6, testing with k6, testing with jmeter, soak testing, performance testing, stress testing, dotnet, .net",
    "scraped_at": 1685095339.6741753,
    "genre": "Education",
    "views": "144494",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am to show you how you can get started very quickly and easily with Load Testing. I am going to use a tool called K6 for that because of how low the barrier for entry is but also how extensible the tool itself can be.\\\\n\\\\nGive K6 a star on GitHub: https://github.com/k6io/k6\\\\nK6 Documentation: https://k6.io/docs/\\\\n\\\\nTimestamps:\\\\nIntro - 0:00\\\\nCreating a simple test - 1:39\\\\nStress testing - 5:41\\\\nSpike testing - 8:20\\\\nLoad testing - 9:48\\\\nSoak testing - 11:36\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#testing #performance #k6\"",
    "lengthSeconds": "860",
    "uploadDate": "2021-07-06",
    "thumbnail_url": "https://i.ytimg.com/vi/r"
  },
  {
    "link": "watch?v=-MCV9iAsvoA",
    "title": "Answering your technical, professional and personal questions | Nick Chapsas",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, Answering your technical, professional and personal questions, qna, q",
    "scraped_at": 1685095339.7521749,
    "genre": "Education",
    "views": "8514",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and I want to celebrate reaching 50000 subscribers with a special Q\\\\u0026A video. I\\'ve asked you on the community page for some questions that you\\'d like answered so I picked some that I would answer within a logical timeframe. Below you can find the timestamps and skip to the ones you are interested in.\\\\n\\\\nTimestamps\\\\n\\\\n0:00 - Intro\\\\n0:45 - What is my preferred way of learning?\\\\n1:54 - How do I find topics for my videos?\\\\n2:52 - What are my most important career advice tips?\\\\n4:39 - How long have I been programming and how I started?\\\\n5:27 - What is my process for creating videos?\\\\n6:20 - How did I boost my career in such a young age?\\\\n8:55 - Do I think that going to university/college is important?\\\\n10:09 - What do I think about C# 9 \\\\u0026 10 features?\\\\n11:22 - How do I balance personal and professional life?\\\\n13:26 - Which technology would I use to build a desktop app?\\\\n13:50 - What is my favourite front-end framework?\\\\n14:13 - What are my hobbies when not coding?\\\\n14:36 - Would I make a course for sale or a new series in the channel?\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#nickchapsas #qna #questionsandanswers\"",
    "lengthSeconds": "955",
    "uploadDate": "2021-07-02",
    "thumbnail_url": "https://i.ytimg.com/vi/"
  },
  {
    "link": "watch?v=jZmdQL321kA",
    "title": "Automated UI testing in .NET using Playwright and Specflow",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, BDD in .NET, behavior driven development, ddd, domain driven development, bdd, unit testing, specflow, gherkin, feature, scenario, playwright, automation ui testing, ui testing .net, specflow ui testing, dotnet, .net",
    "scraped_at": 1685095339.938148,
    "genre": "Education",
    "views": "34094",
    "desc": "Check out SpecFlow: http://go.specflow.org/NickChapsas\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video was sponsored by SpecFlow\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can start writing elegant automatic ui test in C# and .NET using Specflow as a base for them. Playwright is a framework created by Microsoft and it enables reliable end-to-end testing for modern web apps. It has some really cool features built into it that I will talk about in this video.\\\\n\\\\nSpecflow plugin for Rider: https://plugins.jetbrains.com/plugin/15957-specflow-for-rider\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #specflow #playwright\"",
    "lengthSeconds": "1407",
    "uploadDate": "2021-06-29",
    "thumbnail_url": "https://i.ytimg.com/vi/jZmdQL321kA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=shES1R7e1lQ",
    "title": "The fastest way to work with JSON in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, System.Text.Json, json.net, newtonsoft, jil, spanjson, utf8json, The fastest way to work with JSON in .NET, json in .net, json in c#, the best json serializer, dotnet, .net",
    "scraped_at": 1685095340.0071464,
    "genre": "Education",
    "views": "35508",
    "desc": "The first 1000 people to use the link will get a 1 month free trial of Skillshare Premium Membership: https://skl.sh/nickchapsas06211\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the fastest and most efficient way to work with JSON in .NET and C#. Fastest and most efficient doesn\\'t mean the best and this really comes down to your specific usecase, but in this video we will take a look at raw numbers and try to see who the best performers are.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#json #dotnet #csharp\"",
    "lengthSeconds": "582",
    "uploadDate": "2021-06-24",
    "thumbnail_url": "https://i.ytimg.com/vi/shES1R7e1lQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=lHuyl_WTpME",
    "title": "Is Parallel.For/ForEach in C# actually worth it? (and how to modernize it)",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, Parallel in C#, parallel.for, parallel.foreach, parallel vs async, await async vs parallel, async await, await, async, concurrency in c#, multithreading in c#, threading in .net, await async .net, parallel, parallel in .net, Is Parallel.For",
    "scraped_at": 1685095340.9281464,
    "genre": "Education",
    "views": "81655",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the Parallel class in .NET and see how it performs compared to other methods and how we can modernize it for 2021. There are going to be intresteing gotchas about multi-threading and concurrency so buckle up and let\\'s jump into it.\\\\n\\\\nAsync Parallel blog: https://medium.com/@alex.puiu/parallel-foreach-async-in-c-36756f8ebe62\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nParallel does not mean faster - 0:43\\\\nAPI benchmark for vs Parallel.For - 2:41\\\\nAdding Task.WhenAll in the mix - 7:40\\\\nMaking the Parallel.ForEach method async - 11:11\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #parallel #csharp\"",
    "lengthSeconds": "977",
    "uploadDate": "2021-06-21",
    "thumbnail_url": "https://i.ytimg.com/vi/lHuyl_WTpME/maxresdefault.jpg"
  },
  {
    "link": "watch?v=4e83trumwcM",
    "title": "Building a Mediator library in .NET from scratch",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, ddd, clean architecture, cqrs, mediator, mediatr, mediator library, dotnet, .net",
    "scraped_at": 1685095340.2901728,
    "genre": "Education",
    "views": "31964",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you could implement your own version of the popular MediatR library by Jimmy Bogard. This won\\'t be an 100% implementation but rather a \\\\\"",
    "lengthSeconds": "1723",
    "uploadDate": "2021-06-18",
    "thumbnail_url": "https://i.ytimg.com/vi/4e83trumwcM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gW19LaAYczI",
    "title": "Making async code run faster in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, await async, await, async, await async c#, asynchronout programming c#, await async .net, make async code faster, When you can make async code run faster in C#, dotnet, .net",
    "scraped_at": 1685095340.358149,
    "genre": "Education",
    "views": "89483",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can detect use-cases where you can make async code perform faster. The usecase is relatively nieche but common enought that you might be able to use it in one way or another.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet #async\"",
    "lengthSeconds": "628",
    "uploadDate": "2021-06-15",
    "thumbnail_url": "https://i.ytimg.com/vi/gW19LaAYczI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=er9nD-usM1A",
    "title": "Achieving compile-time performance  with Reflection in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, reflection in c#, reflection in .NET, optimizing reflection, fast reflection, Optimizing Reflection in C# to achieve compile",
    "scraped_at": 1685095341.002173,
    "genre": "Education",
    "views": "30822",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can optimize reflection in C# and .NET and try to achieve compile-time performance with it. This might not be applicable to every single reflection usecase but it will definatley be applicable to a lot of them and I think there are several gotchas in this video that you can use in a variery of cases.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nTraditional Reflection - 1:58\\\\nOptimizing Traditional Reflection - 5:05\\\\nSuper fast but less flexible Reflection - 6:39\\\\nThe problem with this approach - 11:00\\\\nSuper fast and flexible Reflection - 13:07\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#reflection #csharp #dotnet\"",
    "lengthSeconds": "1294",
    "uploadDate": "2021-06-11",
    "thumbnail_url": "https://i.ytimg.com/vi/er9nD"
  },
  {
    "link": "watch?v=bLKXqJwRNSY",
    "title": "How to work with text in .NET like a pro with Humanizer",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, humanizer, humanizer .net, working with text in .net, humanizer c#, How to work with text in .NET like a pro with Humanizer, manipulate text in .net, manipulate text in c#, camelcase text, pascalcase text, dotnet, .net",
    "scraped_at": 1685095341.072173,
    "genre": "Education",
    "views": "33208",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can use a Nuget package called Humanizer, to work with text in .NET like a pro. It includes simple text manipulation but also number, date, currency manipulation and also translations and culture specific features.\\\\n\\\\nGive Humanizer a star on GitHub: https://github.com/Humanizr/Humanizer\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#humanizer #csharp #dotnet\"",
    "lengthSeconds": "944",
    "uploadDate": "2021-06-08",
    "thumbnail_url": "https://i.ytimg.com/vi/bLKXqJwRNSY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=t2NA1hHT1JE",
    "title": "When LINQ is not LINQ",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, when linq is not linq, linq, how linq works, ienumerable, queryprovider, linq in C#, linq behind the scenes, entity framework, how entity framework works, is linq slow",
    "scraped_at": 1685095341.142147,
    "genre": "Education",
    "views": "31788",
    "desc": "Check out the ABP Framework here: https://bit.ly/3uGp80V\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by ABP.IO\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about a topic that was sparked by a different video of mine called \\\\\"",
    "lengthSeconds": "544",
    "uploadDate": "2021-06-04",
    "thumbnail_url": "https://i.ytimg.com/vi/t2NA1hHT1JE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=0H66H8PxcB8",
    "title": "Hello World in .NET written using IL code",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, IL code, hello world in IL code, intermediate language, intermediate language in c#, Hello World in .NET written using IL code, .NET Hello World but written in IL code, il emit, il generator .net, dotnet, .net",
    "scraped_at": 1685095340.429173,
    "genre": "Education",
    "views": "13664",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to have a little fun by writting a .NET application that prints Hello World! by emiting IL code. IL or Intermediate Language is the language that C#, VB.NET and F# will all compile into and it\\'s what the CLR or Common Language Runtime, will ultimately execute. C# provides a way to emit that IL code and this can be used in multiple things from building dynamic proxies to speeding up reflection.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #dotnet\"",
    "lengthSeconds": "792",
    "uploadDate": "2021-06-01",
    "thumbnail_url": "https://i.ytimg.com/vi/0H66H8PxcB8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jONSIhMST9E",
    "title": "Where are types allocated in .NET and why people get it so wrong",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, reference types, value types, memory allocation, memory allocation c#, stackalloc, span, Where are types allocated in .NET, where are reference types allocated in .net, where are value types allocated in .net, garbage collection, dotnet, .net",
    "scraped_at": 1685095340.5011487,
    "genre": "Education",
    "views": "69332",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to break down where reference and value types get allocated in .C#. This is a very common question that pops up on interviews as well and peopl get is so wrong. There are some very simple rules that if you follow you are able to infer where something will be allocated and in this video I will show you how you can learn them as well.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #memory #clr\"",
    "lengthSeconds": "875",
    "uploadDate": "2021-05-27",
    "thumbnail_url": "https://i.ytimg.com/vi/jONSIhMST9E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=b5dyPJ3zyRg",
    "title": "Stop wasting server resources by properly using CancellationToken in .NET",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, cancellationtoken, cancellationtokensource, cancellation token, how to use cancellationtoken, cancellationtoken in .net, Stop wasting server resources by properly using CancellationToken in .NET, dotnet, .net",
    "scraped_at": 1685095340.5731466,
    "genre": "Education",
    "views": "63626",
    "desc": "The first 1000 people to use the link will get a free trial of Skillshare Premium Membership: https://skl.sh/nickchapsas05211\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you how you can properly use the CancellationToken struct in your .NET and ASP.NET Core applications in order to cancel tasks and operations early and prevent wasting valuable server resources.\\\\n\\\\nTimestamps\\\\nASP.NET Core implementation - 0:00\\\\nConsole app implementation - 7:10\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#cleancode #cleancoder #dotnet\"",
    "lengthSeconds": "902",
    "uploadDate": "2021-05-20",
    "thumbnail_url": "https://i.ytimg.com/vi/b5dyPJ3zyRg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=GVJ5EUhWQBc",
    "title": "What is Boxing in C# and how it affects memory and speed",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, boxing in c#, unboxing in c#, boxing and unboxing in c#, memory allocation in c#, garbace collection, stack, heap, reference type, value type, memory management in .net, What is Boxing in C# and how it affects memory and speed, dotnet, .net",
    "scraped_at": 1685095340.6421728,
    "genre": "Education",
    "views": "51845",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to explain what is Boxing and Unboxing in C# and how it is affecting your memory allocations and your application\\'s speed. This is nothing you should worry about but it is something you should be aware of. Understanding it can greatly help you make better code flow and data structure choices.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #boxing\"",
    "lengthSeconds": "600",
    "uploadDate": "2021-05-17",
    "thumbnail_url": "https://i.ytimg.com/vi/GVJ5EUhWQBc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qWBi32-Njm8",
    "title": "Is string.Empty actually better than \"\" in C#?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, Is string.Empty actually better than in C#",
    "scraped_at": 1685095341.2131515,
    "genre": "Education",
    "views": "87062",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to answer one of the questions I see floating around time and time again and that is, is string.Empty the same as empty string in C#. There are multiple assumptions about this and even stackoverflow answers that state completely wrong stuff so hopefully in this video I will teach you how you can answer those questions on your own.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#csharp #strings\"",
    "lengthSeconds": "534",
    "uploadDate": "2021-05-13",
    "thumbnail_url": "https://i.ytimg.com/vi/qWBi32"
  },
  {
    "link": "watch?v=-6NpI15erqY",
    "title": "Automatic type conversion with Implicit and Explicit operators in C#",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, Automatic type conversion with Implicit and Explicit operators in C#, type conversion in c#, mapping in c#, implicit operator, explicit operator, user defined conversion, automapper, dotnet, .net",
    "scraped_at": 1685095340.713173,
    "genre": "Education",
    "views": "22582",
    "desc": "Check out the ABP Framework here: https://bit.ly/3f26Mlf\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by ABP.IO\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to show you a very exciting C# features that you probably don\\'t know about. C# support implicit and explicit type conversion from one type to another by the user of something called implicit and explicit operators.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#cleancode #cleancoder\"",
    "lengthSeconds": "634",
    "uploadDate": "2021-05-10",
    "thumbnail_url": "https://i.ytimg.com/vi/"
  },
  {
    "link": "watch?v=h3MsnBRqzcY",
    "title": "What are Closures in C# and why you NEED to know about them",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, c# closure, .net closure, closure class, display class, memory allocation, memory optimized C#, What is a Closure in C#, What is a Closure in C# and how it is wasting your memory, dotnet, .net",
    "scraped_at": 1685095340.7831786,
    "genre": "Education",
    "views": "68787",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain in plain English, what is a closure in C# and why you need to know about them. When it comes time to optimize your code for memory allocations, closures tend to be the usual suspect for a big chunck of your allocated memory. Let\\'s see what they are and how we can fix them.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #asyncawait\"",
    "lengthSeconds": "720",
    "uploadDate": "2021-05-06",
    "thumbnail_url": "https://i.ytimg.com/vi/h3MsnBRqzcY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=GjZ1GsQPcg4",
    "title": "Are comments in code actually a bad practice?",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, nick chapsas, chapsas, code, kotlin, java, python, c#, javascript, Are comments in code actually a bad practice, comments in code, are comment in code bad, are comments a bad practice, comments, dotnet, .net",
    "scraped_at": 1685095341.2851727,
    "genre": "Education",
    "views": "16657",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will address one of the most commonly asked questions I get and that is whether having comments in your code is a bad practice. There are countless blogs talking about this very subject, advocating against the usage of comments but I think it\\'s more nuanced than that.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nWhat is not a comment? - 0:38\\\\nPoints against comments - 03:41\\\\nHow I get around using comments - 05:34\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#coding #programming #cleancode\"",
    "lengthSeconds": "690",
    "uploadDate": "2021-05-03",
    "thumbnail_url": "https://i.ytimg.com/vi/GjZ1GsQPcg4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=YU3ohofu6UU",
    "title": "Writing robust integration tests in .NET with WireMock.NET",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net 5, asp.net core 5, testing, integration tests, acceptance tests, e2e tests, end to end tests, api mocking, mock api with wiremock, wiremock.net, Writing robust integration test in .NET with WireMock.NET, write better tests with wiremock.net, dotnet, .net",
    "scraped_at": 1685095341.6971729,
    "genre": "Education",
    "views": "29708",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can step your integration testing (or even acceptance testing) up using WireMock.NET. Third party APIs are a crucial part of a lot of applications and mocking them during integration testing can be really tricky. WireMock.NET is a library that can make your live so much easier by allowing your to cleanly create a mock version of the third party API that you\\'re integrating with.\\\\n\\\\nGiven WireMock.NET a star: https://github.com/WireMock-Net/WireMock.Net\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #testing #wiremock\"",
    "lengthSeconds": "1074",
    "uploadDate": "2021-04-29",
    "thumbnail_url": "https://i.ytimg.com/vi/YU3ohofu6UU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=nqvnqzRNBls",
    "title": "Fast and Safe compile-time dependency injection in .NET with Jab & StrongInject",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, compile time di, source generators, c# source generators, compile time dependency injection, dependency injection, di, microsoft.extensions.dependencyinjection, serviceprovider, di container, stronginject, strong inject, jab, Fast and Safe compile time dependency injection in .NET with Jab ",
    "scraped_at": 1685095341.3581734,
    "genre": "Education",
    "views": "18954",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about a concept that I am personally very passionate about and that is compile time dependency injection in .NET using Source generators. Source generators are a form of metaprogramming that allows us to write code that inspects out code and then write code which is compiled and added in our compiled output. That means that instead of using reflection to resolve services in dependency injection we can write all the code upfront and get safe and performant class resolution.\\\\n\\\\nGive Jab and StrongInject a star on GitHub\\\\nJab: https://github.com/pakrym/jab\\\\nStrongInject: https://github.com/YairHalberstadt/stronginject\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe problem - 1:14\\\\nStrongInject - 3:05\\\\nJab (My preference) - 10:30\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #dependencyinjection #sourcegenerators\"",
    "lengthSeconds": "1057",
    "uploadDate": "2021-04-26",
    "thumbnail_url": "https://i.ytimg.com/vi/nqvnqzRNBls/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2fOrYTFZvFA",
    "title": "5 MORE C# keywords you (probably) never had to use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, pointers in c#, addressed in c#, garbage collection, gc, 6 C# keywords you ",
    "scraped_at": 1685095341.4311728,
    "genre": "Education",
    "views": "24129",
    "desc": "The first 1000 people to use the link will get a free trial of Skillshare Premium Membership: https://skl.sh/nickchapsas04211\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to cover 5 MORE C# keywords that you almost definitely never had to use. This is a followup video to my previous video about 6 C# keywords that you never had to use. If you know more keywords that aren\\'t common please let me know in the comments down below.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nextern alias - 0:37\\\\ngoto - 4:36\\\\nglobal - 7:52\\\\nvolatile - 10:01\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#cleancode #cleancoder\"",
    "lengthSeconds": "950",
    "uploadDate": "2021-04-22",
    "thumbnail_url": "https://i.ytimg.com/vi/2fOrYTFZvFA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=SwVEvBhapl0",
    "title": "How much do .NET developers make in the UK in 2021?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, .net salary uk, c# salary, .net salary, uk developer salary, How much do .NET developers make in the UK, how much do software engineers make, software engineer salary, developer salary, uk salary, london salary, dotnet, .net",
    "scraped_at": 1685095341.5081477,
    "genre": "Education",
    "views": "23173",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to talk about the UK Talent report that came out form a medium sized recruitment consultancy and see what the .NET careers landscape looks like in 2021 for the UK. This might not directly apply to you but I think it is a very interesting topic.\\\\n\\\\nThe report: https://oliver-dev.s3.amazonaws.com/2021/03/09/10/16/38/c9459eb5-11ec-4cff-a9a9-f17b65634e84/2021%20.Net%20Developer%20Report.pdf\\\\n\\\\nTimestamps\\\\nTBD\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#career #ukjobs\"",
    "lengthSeconds": "781",
    "uploadDate": "2021-04-19",
    "thumbnail_url": "https://i.ytimg.com/vi/SwVEvBhapl0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=K6MyJJSm1MI",
    "title": "How to write better code in C# using Source Code Analyzers (Roslyn)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, roslyn, roslyn analyzers, source code analyzers, stylecop, How to write better code in C# using Source Code Analyzers, source code analysis, source code generation, dotnet, .net",
    "scraped_at": 1685095341.5801728,
    "genre": "Education",
    "views": "35677",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about source code analyzers also known as Roslyn analyzers. I will explain what they are, how they work, the forms they can have and how you can use them to write cleaner, better and safer code.\\\\n\\\\nTimestamps\\\\nWhat are Roslyn Analyzers - 0:00\\\\nDetecting closures and saving memory - 4:05\\\\nWriting safer reflection code - 8:31\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#roslyn #csharp #analyzers\"",
    "lengthSeconds": "765",
    "uploadDate": "2021-04-15",
    "thumbnail_url": "https://i.ytimg.com/vi/K6MyJJSm1MI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=pF1Qh2Ty7MQ",
    "title": "How to bend reality to your will with C# Source Generators",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, using source generators, source generators, code generators, c# source gen, c# source generators, C# 9, Bend reality to your will with C# Source Generators, dotnet, .net",
    "scraped_at": 1685095341.7691476,
    "genre": "Education",
    "views": "43781",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use C# 9\\'s Source Generators feature to write code that writes code. The posibilities are limitless, from mappers, to source generated dependency injection. In this video I will show you just a couple of examples and scratch the surface of the feature\\'s potential.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #sourcegenerators\"",
    "lengthSeconds": "1300",
    "uploadDate": "2021-04-12",
    "thumbnail_url": "https://i.ytimg.com/vi/pF1Qh2Ty7MQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=mEhkelf0K6g",
    "title": "When to use ValueTask instead of Task and save precious memory in C#",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, await async, await async best practices, await, async, await async mistakes, asynchronous, thread, threading, async Task, Task, C# Task, C# async, C# valuetask, valuetask, When to use ValueTask, When to use ValueTask and save precious memory in C#, valuetask in .net, dotnet, .net",
    "scraped_at": 1685095341.837174,
    "genre": "Education",
    "views": "43212",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I show you how you can use ValueTask instead of Task in your .NET code and save memory. I will talk about one of the most common usecases that pretty much everyone can benefit from and release pressure from the garbage collector and the heap.\\\\n\\\\nUnderstanding the Whys, Whats, and Whens of ValueTask: https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #await #async\"",
    "lengthSeconds": "616",
    "uploadDate": "2021-04-08",
    "thumbnail_url": "https://i.ytimg.com/vi/mEhkelf0K6g/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qWEDkHGNhvk",
    "title": "Elegant Acceptance Testing in .NET with SpecFlow",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, acceptance tests, gherkin, bdd in .net, acceptance tests in .net, specflow, unit tests, xUnit, integration tests, Elegant Acceptance Testing in .NET with SpecFlow, docker, dotnet, .net",
    "scraped_at": 1685095344.1019812,
    "genre": "Education",
    "views": "23159",
    "desc": "Check out SpecFlow: http://go.specflow.org/NickChapsas\\\\n\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nThis video was sponsored by SpecFlow\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can start writing elegant acceptance tests for your .NET applications using SpecFlow. SpecFlow is an amazing tool, primarily used to BDD but it is also a great tool to use for Acceptance Testing. It is by far the most advanced tool for such purpose in the .NET ecosystem and it\\'s something I am personally using.\\\\n\\\\nSpecflow plugin for Rider: https://plugins.jetbrains.com/plugin/15957-specflow-for-rider\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #bdd #acceptancetests\"",
    "lengthSeconds": "1115",
    "uploadDate": "2021-04-05",
    "thumbnail_url": "https://i.ytimg.com/vi/qWEDkHGNhvk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=NPAK94ZCxD4",
    "title": "The API Integration coding test (2) - Unit and Acceptance testing | Cracking the .NET interview",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The refactoring test, .net interview, c# interview, c# interview questions, .net interview questions, interview questions, programmer jobs, .net jobs, c# jobs, refactoring in .net, refactoring in c#, interview, software engineering interview, The API Integration test, unit testing, acceptance testing, specflow, xunit",
    "scraped_at": 1685095341.909173,
    "genre": "Education",
    "views": "15262",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video series I am teaching you how you can crack every part of the interview process as a .NET software engineer and get the job. In this video we are going to see a very common scenario where the company you\\'re applying for is asking you to integrate with an API that they are offering and expose their data is some other way. In our scenario we will be building a command line application but the practices that we will use can be applied to any type of test. \\\\n\\\\nIn this video I will be focusing on unit tests using xunit and acceptance tests using Specflow.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nUnit testing with xUnit - 2:05\\\\nAcceptance tests with Specflow - 14:57\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #interview\"",
    "lengthSeconds": "1604",
    "uploadDate": "2021-04-01",
    "thumbnail_url": "https://i.ytimg.com/vi/NPAK94ZCxD4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Q2zDatDVnO0",
    "title": "Is awaiting a Task instead of returning it directly in C# actually slower?",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, await async, await async best practices, await, async, await async mistakes, asynchronous, async Task, Task, C# Task, C# async, Is awaiting a Task instead or returning it directly in C# actually slower",
    "scraped_at": 1685095341.9771724,
    "genre": "Education",
    "views": "65363",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about one of the things I see all the time regarding performance and awaiy async and that\\'s whether you should await a task or when possible returning it directly. There are many opinions on the matter and here is mine.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #asyncawait\"",
    "lengthSeconds": "683",
    "uploadDate": "2021-03-29",
    "thumbnail_url": "https://i.ytimg.com/vi/Q2zDatDVnO0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=_Pjjk4fOh8s",
    "title": "The API Integration coding test (1) - Implementation | Cracking the .NET interview",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The refactoring test, .net interview, c# interview, c# interview questions, .net interview questions, interview questions, programmer jobs, .net jobs, c# jobs, refactoring in .net, refactoring in c#, interview, software engineering interview, The API Integration test, dotnet, .net",
    "scraped_at": 1685095342.050148,
    "genre": "Education",
    "views": "36010",
    "desc": "The first 1000 people to use the link will get a free trial of Skillshare Premium Membership: https://skl.sh/nickchapsas03211\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nSubscribe: http://bit.ly/ChapsasSub\\\\nThis video was sponsored by Skillshare\\\\n\\\\nHello everybody I\\'m Nick and in this video series I am teaching you how you can crack every part of the interview process as a .NET software engineer and get the job. In this video we are going to see a very common scenario where the company you\\'re applying for is asking you to integrate with an API that they are offering and expose their data is some other way. In our scenario we will be building a command line application but the practices that we will use can be applied to any type of test.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #interview\"",
    "lengthSeconds": "2332",
    "uploadDate": "2021-03-25",
    "thumbnail_url": "https://i.ytimg.com/vi/_Pjjk4fOh8s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=dySs0DONbdk",
    "title": "6 C# keywords you (probably) never had to use",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, pointers in c#, addressed in c#, pointers, stackalloc, malloc, garbage collection, gc, 6 C# keywords you ",
    "scraped_at": 1685095342.1251466,
    "genre": "Education",
    "views": "64559",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to cover 6 C# keywords that you almost definately never had to use. We will see what those features are and explain what they do alongside with examples on how they actually work.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nchecked/unchecked - 0:40\\\\nunsafe - 3:36\\\\nfixed - 7:14\\\\nsizeof - 10:41\\\\nstackalloc - 13:17\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#cleancode #cleancoder\"",
    "lengthSeconds": "1053",
    "uploadDate": "2021-03-22",
    "thumbnail_url": "https://i.ytimg.com/vi/dySs0DONbdk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gGZJjpqpWew",
    "title": "The coding conventions I use for C# and why I use them",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, The coding conventions I use for C# and why I use them, C# coding conventions, coding conventions, c# best practices, c# coding style, C# code style, dotnet, .net",
    "scraped_at": 1685095342.1981463,
    "genre": "Education",
    "views": "26394",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about the coding conventions I use when I\\'m writing C#. This is a heavily subjective and opinionated topic, so the conventions themselves don\\'t matter. What matters, no matter the convention, is the story behind it.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nTop level folders and projects - 1:13\\\\nUnit test naming - 2:12\\\\nFolder naming - 3:05\\\\nClass naming and conventions - 5:20\\\\nVar vs explicit type - 7:04\\\\nClass ordering - 9:00\\\\nGeneral stuff - 11:21\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp\"",
    "lengthSeconds": "829",
    "uploadDate": "2021-03-18",
    "thumbnail_url": "https://i.ytimg.com/vi/gGZJjpqpWew/maxresdefault.jpg"
  },
  {
    "link": "watch?v=3oGBMGDRXVw",
    "title": "Lowering in C# and the ability to predict code performance",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, lowering in c#, lowering, compiler, jit, jitter, CLR, .net lowering, performance, Lowering in C# and the ability to predict code performance, predict code performance, C# and lowering, dotnet, .net",
    "scraped_at": 1685095342.2731736,
    "genre": "Education",
    "views": "36862",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about something called Lowering. Lowering is a feature that is a bit hard to explain with words but really easy to example with an example. We will see what it is, how it works and when does it kick in and why knowing about it means that you can make better judged decisions.\\\\n\\\\nTry SharpLap out: https://sharplab.io\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp\"",
    "lengthSeconds": "723",
    "uploadDate": "2021-03-15",
    "thumbnail_url": "https://i.ytimg.com/vi/3oGBMGDRXVw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=8-NAwKYXMzs",
    "title": "Is LINQ in C# actually slow?",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, Is LINQ in C# actually slower",
    "scraped_at": 1685095342.3431728,
    "genre": "Education",
    "views": "75005",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about LINQ and it\\'s performance in C#. LINQ is a killer feature for C# and it\\'s one I use extensively personally. That being said, when something needs to be as fast as possible then you might need to consider if using it is a good idea or not. Speed degredation and memory allocations are just a few of the things that you can get wrong with LINQ.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #linq\"",
    "lengthSeconds": "853",
    "uploadDate": "2021-03-11",
    "thumbnail_url": "https://i.ytimg.com/vi/8"
  },
  {
    "link": "watch?v=VyGAEbmiWjE",
    "title": "The history of the dynamic type in C# and why I don't use it",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The history of the dynamic type in C# and why I don",
    "scraped_at": 1685095342.4151466,
    "genre": "Education",
    "views": "38983",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I\\'m going to take a look at the curious case of the dynamic type in C#. We are going to take a look at the origins of the feature and why it was added in the first place, we are going to see some usecases and some benchmarks along side some really weird stuff that might feel out of place.\\\\n\\\\nC# 4.0 and beyond by Anders Hejlsberg: https://channel9.msdn.com/blogs/matthijs/c-40-and-beyond-by-anders-hejlsberg\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nDynamic example - 0:50\\\\nBut why dynamic? - 4:30\\\\nMy take on dynamic - 8:23\\\\nBenchmarks - 10:01\\\\nThe one use-case of dynamic for me - 12:09\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #dynamic\"",
    "lengthSeconds": "948",
    "uploadDate": "2021-03-08",
    "thumbnail_url": "https://i.ytimg.com/vi/VyGAEbmiWjE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ETdulc1xk04",
    "title": "Ranking the SOLID principles",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, Ranking the SOLID principles, SOLID principles, clean code, clean coder, uncle bob, Single responsibility principle, Open",
    "scraped_at": 1685095342.4881482,
    "genre": "Education",
    "views": "29909",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the SOLID principles from a more fun perspective. I\\'m going to rank them based on the value they bring to a project especially if that project is legacy.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nSingle responsibility principle - 1:29\\\\nOpen-closed principle - 3:06\\\\nLiskov\\'s substitution principle - 4:41\\\\nInterface segregation principle - 6:13\\\\nDependency inversion principle - 7:37\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#programming #solid #cleancode\"",
    "lengthSeconds": "616",
    "uploadDate": "2021-03-04",
    "thumbnail_url": "https://i.ytimg.com/vi/ETdulc1xk04/maxresdefault.jpg"
  },
  {
    "link": "watch?v=zVLuQAnNue8",
    "title": "Is Clean Code Really That Bad For Performance?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, javascript, java, kotlin, python, performace code, benchmarks, C# performance, solid principles, kiss, yagni, dry, Is clean code actually slower",
    "scraped_at": 1685095342.5581727,
    "genre": "Education",
    "views": "82568",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will address some of the comments that I get all the time around the refactoring that I apply to my code. Creating classes, instantiating obejcts and extracting methods are common practices when you\\'re refactoring code but I got many questions regarding the performance implications of such operations. In this video I will address the 2 major ones.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#code #performance #cleancode\"",
    "lengthSeconds": "1038",
    "uploadDate": "2021-03-01",
    "thumbnail_url": "https://i.ytimg.com/vi/zVLuQAnNue8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gyrSiY4SHxI",
    "title": "9 \"rules\" for cleaner code | Object Calisthenics",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean code, clean c# code, .net clean code, clean coder, object calisthenics, 9 rules for cleaner code, SOLID, KISS, DRY, YAGNI, dotnet, .net",
    "scraped_at": 1685095342.6351728,
    "genre": "Education",
    "views": "110908",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to cover a ruleset called Object Calisthenics. Object Calisthenics was defined by Jeff Bay in his The Thoughtworks Anthology book and it defines 9 different rules that you can use to write and keep your code clean.\\\\n\\\\nDon\\xe2\\x80\\x99t Use The Else Keyword video: https://www.youtube.com/watch?v=_ougvb8mT7k\\\\nWrap All Primitives And Strings video: https://www.youtube.com/watch?v=h4uldNA1JUE\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nOnly One Level Of Indentation Per Method - 1:34\\\\nDon\\xe2\\x80\\x99t Use The ELSE Keyword - 5:14\\\\nWrap All Primitives And Strings - 5:53\\\\nFirst Class Collections - 6:39\\\\nOne Dot Per Line - 9:32\\\\nDon\\xe2\\x80\\x99t Abbreviate - 13:40\\\\nKeep All Entities Small - 15:56\\\\nNo Classes With More Than Two Instance Variables - 18:12\\\\nNo Getters/Setters/Properties - 20:36\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#cleancode #cleancoder #objectcalisthenics\"",
    "lengthSeconds": "1406",
    "uploadDate": "2021-02-25",
    "thumbnail_url": "https://i.ytimg.com/vi/gyrSiY4SHxI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Yd4GnWeEkIY",
    "title": "The refactoring test (2) - Open-Closed, Single Responsibility | Cracking the .NET interview",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The refactoring test, Cracking the .NET interview, .net interview, c# interview, c# interview questions, .net interview questions, interview questions, programmer jobs, .net jobs, c# jobs, refactoring in .net, refactoring in c#, interview, software engineering interview, open",
    "scraped_at": 1685095344.1759558,
    "genre": "Education",
    "views": "55073",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video series I am teaching you how you can crack every part of the interview process as a .NET software engineer and get the job. In this video we are going to see a very common scenario where where interview test is a refactoring test. I will explain the thought process and methodology and show you how you can apply the best practices. Even if you are not looking for a job, practicing those tests keep your knowledge sharp. \\\\nIn this video we are going to focus on applying SOLID principles and more specifically the single responsibility principle and the open/closed principle.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nAddressing \\\\\"",
    "lengthSeconds": "1919",
    "uploadDate": "2021-02-22",
    "thumbnail_url": "https://i.ytimg.com/vi/Yd4GnWeEkIY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=U3QvTaw224o",
    "title": "The refactoring test (1) - Dependency Inversion & Unit tests | Cracking the .NET interview",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, The refactoring test, Cracking the .NET interview, .net interview, c# interview, c# interview questions, .net interview questions, interview questions, programmer jobs, .net jobs, c# jobs, refactoring in .net, refactoring in c#, interview, software engineering interview, dotnet, .net",
    "scraped_at": 1685095342.7101731,
    "genre": "Education",
    "views": "101271",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video series I am teaching you how you can crack every part of the interview process as a .NET software engineer and get the job. In this video we are going to see a very common scenario where where interview test is a refactoring test. I will explain the thought process and methodology and show you how you can apply the best practices. Even if you are not looking for a job, practicing those tests keep your knowledge sharp.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nThe problem - 01:46\\\\nTaking a look at the code - 03:44\\\\nFirst things first - 05:16\\\\nMaking the class testable (DIP) - 07:41\\\\nWriting the unit tests - 21:08\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #refactoring\"",
    "lengthSeconds": "2022",
    "uploadDate": "2021-02-18",
    "thumbnail_url": "https://i.ytimg.com/vi/U3QvTaw224o/maxresdefault.jpg"
  },
  {
    "link": "watch?v=EEeVU0z26u0",
    "title": "Getting started with Behavior Driven Development (BDD) in .NET using SpecFlow",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, Getting started with Behavior Driven Development ",
    "scraped_at": 1685095344.246958,
    "genre": "Education",
    "views": "38136",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can get started with behavior driven development or BDD in .NET. For this video I will be using SpecFlow to demonstrate the concept and the implementation but there are ther packages as well that can be used.\\\\n\\\\nSupport SpecFlow\\\\n- https://specflow.org\\\\n- https://github.com/SpecFlowOSS/SpecFlow\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nQuick BDD explanation - 1:10\\\\nImplementation with SpecFlow - 3:05\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #bdd #specflow\"",
    "lengthSeconds": "1337",
    "uploadDate": "2021-02-15",
    "thumbnail_url": "https://i.ytimg.com/vi/EEeVU0z26u0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=_ougvb8mT7k",
    "title": "Why I don't use the \"else\" keyword in my code anymore",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, core, C#, how to code, tutorial, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, Why I don",
    "scraped_at": 1685095342.7871728,
    "genre": "Education",
    "views": "325419",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will tell you why I\\'m not using the else keyword anymore. I think this is an interesting topic and it dives into some other principals as well which ultimately help to create what I consider to be cleaner code.\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nMain else refactoring - 2:51\\\\nOpen-close refactoring - 11:35\\\\n\\\\nVideo about Object Calisthenics: https://www.youtube.com/watch?v=gyrSiY4SHxI\\\\nVideo on whether this will slow your code down: https://www.youtube.com/watch?v=zVLuQAnNue8\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nKeep coding merch: https://keepcoding.shop\\\\n\\\\n#dotnet #csharp #cleancode\"",
    "lengthSeconds": "1240",
    "uploadDate": "2021-02-11",
    "thumbnail_url": "https://i.ytimg.com/vi/_ougvb8mT7k/maxresdefault.jpg"
  },
  {
    "link": "watch?v=h4uldNA1JUE",
    "title": "Treating Primitive Obsession with ValueObjects | DDD in .NET",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, clean architecture, clean code, ddd, domain driven design, valueobject, valueof, primitive obsession, primitive, Treating Primitive Obsession with ValueObjects, DDD in .net, dotnet, .net",
    "scraped_at": 1685095342.8581831,
    "genre": "Education",
    "views": "58476",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain what Primitive Obsession is and how you can treat it by using something called ValueObjects. This is a DDD specific concept but understanding it can benefit any developer.\\\\n\\\\nValueOf on GitHub: https://github.com/mcintyre321/ValueOf\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #ddd\"",
    "lengthSeconds": "949",
    "uploadDate": "2021-02-08",
    "thumbnail_url": "https://i.ytimg.com/vi/h4uldNA1JUE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=wY4nMSUF9e0",
    "title": "Bidirectional Streaming | gRPC in .NET 5",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, aspnet core grpc, grpc, dotnet grpc, .net grpc, .net 5 grpc, grpc server, gRPC in .NET 5, grpc in .net, gRPC Streaming, stream, grpc stream, server streaming, Bidirectional Streaming, bi",
    "scraped_at": 1685095342.9261732,
    "genre": "Education",
    "views": "12109",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement Bidirectional streaming for gRPC in .NET. Bidirectional streaming is a very powerful type of streaming in gRPC which allows us to make use of the full duplex capabilities of the technology.\\\\n\\\\nBloomRPC: https://github.com/uw-labs/bloomrpc\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #grpc #streaming\"",
    "lengthSeconds": "875",
    "uploadDate": "2021-02-05",
    "thumbnail_url": "https://i.ytimg.com/vi/wY4nMSUF9e0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=DNxdvRQ4qRQ",
    "title": "Client Streaming | gRPC in .NET 5",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net 5, asp.net core 5, aspnet core grpc, grpc, dotnet grpc, .net grpc, .net 5 grpc, gRPC Server ",
    "scraped_at": 1685095342.9951463,
    "genre": "Education",
    "views": "10617",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement Client Streaming using gRPC in .NET. Client streaming can be used for multiple reasons, from prefetching to route building based on points  or even collecting analytics in real time from your clients.\\\\n\\\\nBloomRPC: https://github.com/uw-labs/bloomrpc\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #grpc #streaming\"",
    "lengthSeconds": "758",
    "uploadDate": "2021-02-03",
    "thumbnail_url": "https://i.ytimg.com/vi/DNxdvRQ4qRQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=YiVqwoFMieg",
    "title": "How to structure a .NET Solution (project separation & architecture)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, how to structure .net project, .net solution structure, project spliting, clean architecture, clean code, jason taylor, How to structure a .NET Solution, dotnet, .net",
    "scraped_at": 1685095344.3239086,
    "genre": "Education",
    "views": "206430",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about how I organize my .NET solutions. This solution organization is not the only way you can go about it but it is one of the most widely adopted ways of implementing a Clean Architecture.\\\\n\\\\nClean Architecture by Jason Taylor: https://github.com/jasontaylordev/CleanArchitecture\\\\nClean Archutecture by Steve ardalis Smith: https://github.com/ardalis/CleanArchitecture\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nSolution folders - 1:17\\\\nThe layers - 2:34\\\\nThe Domain project - 5:07\\\\nThe Application project - 6:17\\\\nThe Infrastructure project - 7:34\\\\nThe Presentation project - 9:10\\\\nRecap - 10:36\\\\nThe tests - 11:44\\\\nContracts \\\\u0026 SDK - 12:53\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #cleanarchitecture\"",
    "lengthSeconds": "834",
    "uploadDate": "2021-02-01",
    "thumbnail_url": "https://i.ytimg.com/vi/YiVqwoFMieg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=F2T6xNRoa1E",
    "title": "Server Streaming | gRPC in .NET 5",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, aspnet core grpc, grpc, dotnet grpc, .net grpc, .net 5 grpc, gRPC Server ",
    "scraped_at": 1685095344.3929064,
    "genre": "Education",
    "views": "24054",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement Server Streaming using gRPC in .NET. Server streaming can be used for multiple reasons such as real time updates, analytics, weather data, location data etc. \\\\n\\\\nBloomRPC: https://github.com/uw-labs/bloomrpc\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #grpc #streaming\"",
    "lengthSeconds": "714",
    "uploadDate": "2021-01-30",
    "thumbnail_url": "https://i.ytimg.com/vi/F2T6xNRoa1E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=lRUfRlp5BXc",
    "title": "How null checks have changed in C#",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, How null checks have changed in C#, c# 9, c# 8, c# 7, c# 6, c# null checks, c# is null, c# is not null, how to do null checks in c#, dotnet, .net",
    "scraped_at": 1685095344.4659061,
    "genre": "Education",
    "views": "85894",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to talk about how null checks have changed over the different versions of C#. This won\\'t touch on null reference types but only focus on the == null checks.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nC# 6 - 0:48\\\\nC# 7 - 3:03\\\\nC# 8 - 9:57\\\\nC# 9 - 12:53\\\\n\\\\n#dotnet #null #csharp\"",
    "lengthSeconds": "861",
    "uploadDate": "2021-01-27",
    "thumbnail_url": "https://i.ytimg.com/vi/lRUfRlp5BXc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=hp5FTB7PI9s",
    "title": "gRPC Server & Unary Calls | gRPC in .NET 5",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, aspnet core grpc, grpc, dotnet grpc, .net grpc, .net 5 grpc, gRPC Server ",
    "scraped_at": 1685095343.0681796,
    "genre": "Education",
    "views": "21895",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video series I will show you how you can get started with gRPC. gRPC is a fairly new technology that is taking the industry by storm and I am heavily invested personally so I\\'d like to take you to this learning journy with me.\\\\n\\\\nBloomRPC: https://github.com/uw-labs/bloomrpc\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\nTimestamps\\\\nIntro/Why gRPC? - 0:00\\\\nThe gRPC Server template - 3:52\\\\nThe .proto file - 5:40\\\\nThe auto-generated code - 9:38\\\\nCalling the gRPC server - 11:12\\\\nCreating a Weather Service - 13:22\\\\n\\\\n#dotnet #grpc\"",
    "lengthSeconds": "1622",
    "uploadDate": "2021-01-25",
    "thumbnail_url": "https://i.ytimg.com/vi/hp5FTB7PI9s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=iVHtKG0eU_s",
    "title": "Elegant API Versioning in ASP.NET Core (Web API)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, asp.net core 5, asp.net core versioning, versioning, api versioning, .netcore api versioning, web api, web api versioning, Elegant API Versioning in ASP.NET Core, dotnet, .net",
    "scraped_at": 1685095344.5379367,
    "genre": "Education",
    "views": "88481",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use Microsoft\\'s versioning package to add versioning for your ASP.NET Core APIs. I will cover almost every feature of the package so by the end of the video you should be able to create a versioning strategy exactly as you like it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #api #versioning\"",
    "lengthSeconds": "1287",
    "uploadDate": "2021-01-21",
    "thumbnail_url": "https://i.ytimg.com/vi/iVHtKG0eU_s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=yzg5-T67FCc",
    "title": "4 C# features that you (probably) shouldn't be using",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, development, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, 4 C# features that you shouldn",
    "scraped_at": 1685095344.6099088,
    "genre": "Education",
    "views": "73974",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the 4 C# features that either I am not using or I am very careful when I do so. I will explain why I am doing so and provide some context for potential traps that you may fall into.\\\\n\\\\nA Tour of Default Interface Methods for C# (\\\\\"",
    "lengthSeconds": "1275",
    "uploadDate": "2021-01-18",
    "thumbnail_url": "https://i.ytimg.com/vi/yzg5"
  },
  {
    "link": "watch?v=JcnucGEaxLo",
    "title": "Better Exception stack traces in .NET with Ben.Demystifier",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, Clearer Exception stack traces in .NET with Ben.Demystifier, Ben.Demystifier, exceptions in .net, exceptions in c#, exceptions in f#, exceptions in vb.net, clear exceptions in .net, dotnet, .net",
    "scraped_at": 1685095344.6769347,
    "genre": "Education",
    "views": "11280",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about a package called Ben.Demystifier. Ben.Demystifier is a nuget package that you can use in order to create more clear exception stack traces. Stack traces in .NET haven\\'t really evolved over the years for multiple reasons that I address in the video and this package will really make troubleshooting exceptions easier by making them clearer.\\\\n\\\\nGive Ben.Demystifier a star: https://github.com/benaadams/Ben.Demystifier\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #exceptions\"",
    "lengthSeconds": "581",
    "uploadDate": "2021-01-14",
    "thumbnail_url": "https://i.ytimg.com/vi/JcnucGEaxLo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=riMHC0Xpm9U",
    "title": "5 technologies that I will be learning in 2021 as a .NET developer",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, development, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, tech in 2021, dotnet in 2021, .net 2021, 5 technologies that I will be learning in 2021 as a .NET developer, dotnet technologies in 2021, terraform, microsoft orleans, devops, grpc, dotnet, .net",
    "scraped_at": 1685095343.1441765,
    "genre": "Education",
    "views": "50284",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will tell you what will be the 5 main technologies that I will be focusing on in 2021. They are not the only thing I will be focusing on but this is tech that I find really interesting and I want to master.\\\\n\\\\nCheck out Stu\\'s channel: https://www.youtube.com/channel/UCF5dh7bm49bpsZjWHYDG4Lg\\\\nMicrosoft Orleans paper: https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Orleans-MSR-TR-2014-41.pdf\\\\n\\\\nTimestamps\\\\nIntro - 0:00\\\\nMicrosoft Orleans - 0:38\\\\nSource generators - 3:00\\\\ngRPC - 5:19\\\\nTerraform - 7:17\\\\n6 Glue Technologies - 10:27\\\\n\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #2021\"",
    "lengthSeconds": "959",
    "uploadDate": "2021-01-11",
    "thumbnail_url": "https://i.ytimg.com/vi/riMHC0Xpm9U/maxresdefault.jpg"
  },
  {
    "link": "watch?v=UIslFVEHkzA",
    "title": "Mapster, the best .NET mapper that you are (probably) not using",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, Mapster, the best .NET mapper that you are ",
    "scraped_at": 1685095343.2201464,
    "genre": "Education",
    "views": "108087",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about a package called Mapster. It\\'s a mapping library that it is packing some really amazing features that I wanted to share with you. No only that but it also performs increadibly well, outperforming all other mappers.\\\\n\\\\nGive Mapster a star: https://github.com/MapsterMapper/Mapster\\\\n\\\\nTimestamps\\\\n\\\\nIntro and personal take - 0:00\\\\nBenchmarks of existing mappers - 1:57\\\\nSimple mapping with Mapster - 6:04\\\\nCode generation with Mapster - 13:50\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #mapster\"",
    "lengthSeconds": "1441",
    "uploadDate": "2021-01-05",
    "thumbnail_url": "https://i.ytimg.com/vi/UIslFVEHkzA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=19QC5h2gvtE",
    "title": "Deploying and hosting WebAssembly Blazor in Azure Storage Account (custom domain and SSL)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, rest, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, static site hosting, static web hosting, blazor hosting, blazor website hosting, blazor wasm, blazor webassembly, webassembly, blazor deployment, .NET 5, Deploying and hosting WebAssembly Blazor in Azure Storage Account, blazor azure, azure deploy blazor, azure, azure storage, azure blob storage blazor, dotnet, .net",
    "scraped_at": 1685095343.2891464,
    "genre": "Education",
    "views": "4382",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you deploy and host your Blazor WebAssembly site in Azure Storage Account for a very low cost. I will also show you how you can enable SSL support and make use of your own custom domains. We will also take a look at a couple of interesting gotchas that you might have to deal with.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#azure #hosting #blazor\"",
    "lengthSeconds": "1188",
    "uploadDate": "2020-12-29",
    "thumbnail_url": "https://i.ytimg.com/vi/19QC5h2gvtE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=8tR6W-lZVGw",
    "title": "Deploying and hosting WebAssembly Blazor in AWS S3 (custom domain and SSL)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, rest, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, Deploying and hosting WebAssembly Blazor, Blazor in AWS S3, blazor aws, s3 bucket blazor, static site hosting, static web hosting, blazor hosting, blazor website hosting, blazor wasm, blazor webassembly, webassembly, blazor deployment, blazor deploy aws, .NET 5, dotnet, .net",
    "scraped_at": 1685095343.3591743,
    "genre": "Education",
    "views": "5523",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you deploy and host your Blazor WebAssembly site in an S3 bucket for a very low cost. I will also show you how you can enable SSL support and make use of your own custom domains. We will also take a look at a couple of interesting gotchas that you might have to deal with.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#aws #s3 #blazor\"",
    "lengthSeconds": "1230",
    "uploadDate": "2020-12-23",
    "thumbnail_url": "https://i.ytimg.com/vi/8tR6W"
  },
  {
    "link": "watch?v=PErLaQpexuo",
    "title": "Comparing AWS DynamoDB with Azure Cosmos DB",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, development, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, nosql, databases, cloud, aws, azure, Comparing AWS DynamoDB with Azure Cosmos DB, azure cosmosdb, azure cosmos db, aws dynamodb, cosmos, dynamo, dynamodb, dynamodb vs cosmosdb, dotnet, .net",
    "scraped_at": 1685095343.4291723,
    "genre": "Education",
    "views": "9022",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will compare two databases that are trying to solve the same problem in slightly different ways. The databases in question are AWS DynamoDB and Azure Cosmos DB. I\\'ve used both on a high throughput production level and I will talk about my experience with them.\\\\n\\\\nTimestamps:\\\\n0:00 Introduction\\\\n0:54 Similarities\\\\n2:52 Differences\\\\n13:28 My take\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#cosmosdb #dynamodb #aws #azure\"",
    "lengthSeconds": "924",
    "uploadDate": "2020-12-21",
    "thumbnail_url": "https://i.ytimg.com/vi/PErLaQpexuo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=a4K0YKGMioE",
    "title": "Creating custom dependency scopes in .NET",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, Creating custom scopes for scoped dependencies, custom scope, di, dependency injection, injection, dependency, custom scope dependency, dotnet, .net",
    "scraped_at": 1685095344.7469332,
    "genre": "Education",
    "views": "11102",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can create your own custom scopes for your scoped dependencies. I am going to demistify a few misconceptions about service locatior and automatic service resolution via the ActivatorUtilities class.\\\\n\\\\nTimestamps\\\\nIntro 0:00\\\\nDependency scopes recap 0:41\\\\nCreating custom scopes 2:20\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #dependencyinjection #di\"",
    "lengthSeconds": "809",
    "uploadDate": "2020-12-15",
    "thumbnail_url": "https://i.ytimg.com/vi/a4K0YKGMioE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qapJwFY9y2Y",
    "title": "20 Nuget packages that every .NET developer should be familiar with",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, development, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, intellij idea, nuget, nuget package, dotnet package, automapper, Nuget packages that every .NET developer should be familiar with, xunit, nunit, autofixture, fluent assertions, fluent validation, dotnet, .net",
    "scraped_at": 1685095344.8289073,
    "genre": "Education",
    "views": "86938",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about the 20 Nuget which I think that every .NET developer should be familiar with in 2021. These nuget packages can be seen in a wide collection of popular projects and you will definately encounter them during your career as a .NET software engineer.\\\\n\\\\nThe packages:\\\\n0:00 Introduction\\\\n0:57 xUnit \\\\u0026 NUnit\\\\n2:14 Moq \\\\u0026 NSubstitute\\\\n3:19 Polly\\\\n4:12 FluentAssertions\\\\n5:17 BenchmarkDotNet\\\\n5:53 Serilog\\\\n6:37 Autofixture \\\\u0026 Bogus\\\\n7:40 Scrutor\\\\n9:22 Automapper\\\\n10:09 Dapper \\\\u0026 Entity Framework Core\\\\n11:32 MediatR \\\\u0026 Brighter\\\\n12:37 FluentValidation\\\\n13:17 Refit \\\\u0026 RestSharp\\\\n14:08 Json.NET\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#nuget #dotnet\"",
    "lengthSeconds": "933",
    "uploadDate": "2020-12-02",
    "thumbnail_url": "https://i.ytimg.com/vi/qapJwFY9y2Y/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9BHnDmAM164",
    "title": "Why I use Jetbrains Rider instead of Visual Studio for C# and .NET",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, development, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, jetbrains, jetbrains rider, rider, intellij idea, intellij, best dotnet ide, best C# IDE, Why I use Jetbrains Rider instead of Visual Studio, visual studio, visual studio code, dotnet, .net",
    "scraped_at": 1685095343.503173,
    "genre": "Education",
    "views": "160544",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\r\\\\n\\\\r\\\\nHello everybody I\\'m Nick and in this video I will talk about why I prefer using Jetbrains Rider instead of Visual Studio or Visual Studio Code as my main IDE. My usecase might be different than yours but since many of you have been asking about this one, I thought I would make a video to address it.\\\\n\\\\r\\\\nDon\\'t forget to comment, like and subscribe :)\\\\r\\\\n\\\\r\\\\nSocial Media:\\\\r\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\r\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\r\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#visualstudio #rider #jetbrains #dotnet\"",
    "lengthSeconds": "687",
    "uploadDate": "2020-11-26",
    "thumbnail_url": "https://i.ytimg.com/vi/9BHnDmAM164/maxresdefault.jpg"
  },
  {
    "link": "watch?v=sdKBhDl-dCs",
    "title": "Fast and efficient data serialisation with Protocol buffers (protobuf) in .NET",
    "tags": "coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, .net 5, dotnet 5, Fast and efficient data serialisation, Protocol buffers, protobuf, protobuf in .net, protocol buffer in .net, redis, dotnet, .net",
    "scraped_at": 1685095343.5711465,
    "genre": "Education",
    "views": "18230",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you what are the advantages of using Protocol buffer (or protobuf) in order to serialize and deserialize your data in .NET. Not only you will be able to run faster operations because of it but you will also be able to store a significantly smaller object while gaining performance. In this video I will use Redis as an example of a use case.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #protobuf\"",
    "lengthSeconds": "775",
    "uploadDate": "2020-11-23",
    "thumbnail_url": "https://i.ytimg.com/vi/sdKBhDl"
  },
  {
    "link": "watch?v=JljTcjt798c",
    "title": "Make your microservice resilient with Polly's Circuit Breaker | .NET Core",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, httpclient, polly, retry, retry policy, .net core for beginners, circuit breaker, microservices, resilient microservices, polly circuit breaker, circuit breaker policy, circuit breaker example C#, dotnet, .net",
    "scraped_at": 1685095343.639981,
    "genre": "Education",
    "views": "22185",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can implement Polly\\'s Circuit Breaker and Advanced CIrcuit Breaker policies for your microservices. The circuit breaker pattern is one of the most important and most useful patterns because it allows us to fail fast in scenarios where success is unlikely and saves server resources on requests that are unlikely to succeed.\\\\n\\\\nGive Polly a start on GitHub: https://github.com/App-vNext/Polly\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #polly #microservices\"",
    "lengthSeconds": "1005",
    "uploadDate": "2020-10-12",
    "thumbnail_url": "https://i.ytimg.com/vi/JljTcjt798c/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9kEURoqHKZ0",
    "title": "Creating a mocking library for .NET in C# FROM SCRATCH",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, xunit, tests with xunit, unit tests, mocking in .net, mocking with moq, moq, nunit, getting started with moq, mocking for beginners, FROM SCRATCH, creating a mocking framework, mock framework, creating a mock library, nsubstitute, fakeiteasy, dotnet, .net",
    "scraped_at": 1685095344.8979065,
    "genre": "Education",
    "views": "7301",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I am going to attempt to create a .NET mocking library in C# FROM SCRATCH! I intentionally did not look at any other mocking library\\'s code and I attempted to see if I could figure it out on my own. This video turned out to be a great example of how reflection can solve some of the most common scenarios in programming\\\\n\\\\nIn object-oriented programming, mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #tests #mocking\"",
    "lengthSeconds": "1832",
    "uploadDate": "2020-09-21",
    "thumbnail_url": "https://i.ytimg.com/vi/9kEURoqHKZ0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=lQu-eBIIh-w",
    "title": "8 await async mistakes that you SHOULD avoid in .NET",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, lesson, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, await async, await async best practices, await, async, 8 await async mistakes that you should avoid in .NET, await async mistakes, asynchronous, thread, threading, async Task, Task, C# Task, C# async, dotnet, .net",
    "scraped_at": 1685095343.716957,
    "genre": "Education",
    "views": "279277",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk real world mistakes that you might encounter regarding await async. It\\'s an interesting topic that many people tend to get wrong and this comes down to how Microsoft handled the original rollout of the feature. In this video I will go through 8 real world scenarios of how it can be done wrong and talk about how we can fix them.\\\\n\\\\nTimestamps:\\\\n0:00 - Intoduction\\\\n1:19 - Once async always async\\\\n2:46 - Async void is BAD\\\\n6:05 - Prefer Task.FromResult over Task.Run\\\\n8:00 - Avoid .Result and .Wait\\\\n9:37 - Prefer await over ContinueWith\\\\n11:19 - Always pass the CancellationToken\\\\n15:16 - Prefer async Task over Task\\\\n17:11 - Don\\'t sync over async in constructors\\\\n\\\\nRaw coding video: https://www.youtube.com/watch?v=il9gl8MH17s\\\\nDavid Fowler\\'s page: https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md\\\\nValueTask: https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #await #async\"",
    "lengthSeconds": "1273",
    "uploadDate": "2020-09-08",
    "thumbnail_url": "https://i.ytimg.com/vi/lQu"
  },
  {
    "link": "watch?v=0acSdHJfk64",
    "title": "Logging into Elasticsearch using Serilog and viewing logs in Kibana | .NET Core Tutorial",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, elasticsearch, logs, serilog, logging, kibana, visualisation, sink, Logging into Elasticsearch using Serilog, viewing logs in Kibana in .NET Core, .net core logging, dotnet, .net",
    "scraped_at": 1685095344.9669063,
    "genre": "Education",
    "views": "68651",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can very easily get started with logging into Elasticsearch in your .NET core application. We won\\'t go in depth on how Elasticsearch works and why it is a good fit for a log sink but instead I am going to show you how you can quickly use Serilog to replace Microsoft\\'s built in logging mechanism and start pushing logs into Elasticsearch, which you can then use Kibana to view and analyse. There will be a second video coming showing some of the cool stuff that you can do in Kibana with those logs.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #elasticsearch #logging #kibana\"",
    "lengthSeconds": "1183",
    "uploadDate": "2020-08-25",
    "thumbnail_url": "https://i.ytimg.com/vi/0acSdHJfk64/maxresdefault.jpg"
  },
  {
    "link": "watch?v=r7QUivYMS3Q",
    "title": "A different way to return data in C# with OneOf",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, functional programming, option, result, oneof, A different way to return data in C# with OneOf, a different way ro return, return oneof, functional c#, language extensions, nuget package, nuget essentials, dotnet, .net",
    "scraped_at": 1685095343.7899806,
    "genre": "Education",
    "views": "65360",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about a package called OneOf. This library provides F# style discriminated unions for C#, using a custom type OneOf. An instance of this type holds a single value, which is one of the types in its generic argument list. It might not be my personal favourite way of doing things but I think it is a good project and I want to give it some exposure because I can definitely see some people benefiting from it.\\\\n\\\\nGive OneOf a star: https://github.com/mcintyre321/OneOf\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #oneof\"",
    "lengthSeconds": "1098",
    "uploadDate": "2020-08-18",
    "thumbnail_url": "https://i.ytimg.com/vi/r7QUivYMS3Q/maxresdefault.jpg"
  },
  {
    "link": "watch?v=OJjVvPINlYA",
    "title": "Should you stop returning \"null\"? | Functional C#",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, functional programming, Should you stop returning null, is returning null bad, null, option, optional, maybe, Language Extensions, dotnet, .net",
    "scraped_at": 1685095343.8599813,
    "genre": "Education",
    "views": "98010",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I wanna talk about how we can leverage a functional concept in C# that can potentially help up eliminate unexpected errors in our system. I am talking about null and the hundreds of issues that I have personally experienced with it over the year. Let\\'s take a look at the problem and discuss a potential solution.\\\\n\\\\nGive Language Ext a star: https://github.com/louthy/language-ext\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #csharp #functional\"",
    "lengthSeconds": "691",
    "uploadDate": "2020-08-10",
    "thumbnail_url": "https://i.ytimg.com/vi/OJjVvPINlYA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=T9pwE1GAr_U",
    "title": "Generating realistic fake data in .NET using Bogus",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, bogus, getting started with bogus, Generating realistic fake data, Generating realistic fake data in .NET using Bogus, fake data using bogus, fake data .net, data generator, dotnet, .net",
    "scraped_at": 1685095343.9289808,
    "genre": "Education",
    "views": "27945",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can generate unlimited realistic looking fake data using a Nuget package called Bogus. Bogus is an open source project and it supports multiple locales so it will definitely have something useful for you.\\\\n\\\\nGive Bogus a star: https://github.com/bchavez/Bogus\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #data #bogus\"",
    "lengthSeconds": "792",
    "uploadDate": "2020-07-07",
    "thumbnail_url": "https://i.ytimg.com/vi/T9pwE1GAr_U/maxresdefault.jpg"
  },
  {
    "link": "watch?v=KirXASBYXUk",
    "title": "5 Tips and potential MISTAKES that you SHOULD know about, for C# and .NET",
    "tags": "coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, cqrs, mediatr, design patterns, clean architecture, clean code, asp.net core api, tips and tricks, 5 tips ",
    "scraped_at": 1685095343.9999816,
    "genre": "Education",
    "views": "48933",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nTimestamps:\\\\n00:36 Async Actions are not awaited\\\\n03:30 Making GetOrAdd in ConcurrentDictionary thread-safe\\\\n09:58 Clean way to have InternalsVisibleTo for testing\\\\n14:17 Auto-implemented property vs expression-bodied members\\\\n18:15 Using LINQ with different collection types\\\\n\\\\nHello everybody I\\'m Nick and in this video we will take a look at 5 Tips and potential mistakes that you should know about for C# and .NET. Knowing and applying these will improve the quality of your code, your understanding of the compiler and how your code runs in the CLR and it will make you a better C# programmer.\\\\n\\\\nMaking ConcurrentDictionary GetOrAdd thread safe using Lazy by Andrew Lock: https://andrewlock.net/making-getoradd-on-concurrentdictionary-thread-safe-using-lazy/\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#aspnetcore #tips #code\"",
    "lengthSeconds": "1437",
    "uploadDate": "2020-07-02",
    "thumbnail_url": "https://i.ytimg.com/vi/KirXASBYXUk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=VIPEYBdFdcQ",
    "title": "Being good at coding isn't enough anymore",
    "tags": "Elfocrash, elfo, coding, csharp, development, software engineering, microsoft, nick chapsas, chapsas, programming, clean code, clean coder, clean architecture, design patterns, solution architecture, software architecture, azure, aws, cloud, good coder, Being good at coding isn",
    "scraped_at": 1685095345.0339062,
    "genre": "Education",
    "views": "23388",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I want talk about what I think is a very important topic and that is that just being a good programmer simply isn\\'t enough anymore. The problem is no longer really the code itself but the data and how you move it around.\\\\n\\\\nTalks about architecture:\\\\nClean Architecture with ASP.NET Core 3.0 - Jason Taylor - NDC Sydney 2019: https://www.youtube.com/watch?v=5OtUm1BLmG0\\\\nITkonekt 2019 | Robert C. Martin (Uncle Bob), Clean Architecture and Design: https://www.youtube.com/watch?v=2dKZ-dWaCiU\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#coding #programming #softwareengineering\"",
    "lengthSeconds": "541",
    "uploadDate": "2020-06-23",
    "thumbnail_url": "https://i.ytimg.com/vi/VIPEYBdFdcQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Yd79bCrht0M",
    "title": "The 5 books that (I think) every programmer should read",
    "tags": "Elfocrash, elfo, coding, asp.net core, csharp, development, software engineering, microsoft, nick chapsas, chapsas, programming books, programming, software engineering books, cracking the coding interview, clean code, clean coder, clean architecture, books, best programming books, gof, gang of four, design patterns, what programming book to buy, clean code book, dotnet, .net",
    "scraped_at": 1685095345.1039064,
    "genre": "Education",
    "views": "38286",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I want to share with you what I think are the 5 best books that every programmer should read.\\\\n\\\\nBooks (affiliate links):\\\\nCracking the Coding Interview: https://geni.us/hTsMCp\\\\nHead First Design Patterns: https://geni.us/nOIK\\\\nClean Code: https://geni.us/8wdqp\\\\n97 Things Every Programmer Should Know: https://geni.us/dSSMR\\\\nThe Clean Coder: https://geni.us/xaicPMy\\\\n\\\\nHonorable mentioned books (affiliate links):\\\\nClean Architecture: https://geni.us/U8AsayB\\\\nThe Pragmatic Programmer: https://geni.us/L6qhNbC\\\\nDesign patterns: https://geni.us/ssRO\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#books #programming #library\"",
    "lengthSeconds": "706",
    "uploadDate": "2020-06-10",
    "thumbnail_url": "https://i.ytimg.com/vi/Yd79bCrht0M/maxresdefault.jpg"
  },
  {
    "link": "watch?v=V6ZlfhZUdOQ",
    "title": "Is Reflection in programming actually slow?",
    "tags": "Elfocrash, elfo, coding, .netcore, dot net, C#, asp.net core, js, csharp, rest api, development, lesson, software engineering, microsoft, nick chapsas, chapsas, asp.net core 3, is reflection slow, speed up reflection, reflection, reflection in c#, reflection in programming, dotnet, .net",
    "scraped_at": 1685095345.1779063,
    "genre": "Education",
    "views": "12981",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will investigate the claims that reflection in programming is slow and that you shouldn\\'t use it. I will be focusing on benchmarks for C# but the idea behind whatever I\\'m doing should be applicable to every reflective language like Java or Kotlin and many many others.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#reflection\"",
    "lengthSeconds": "614",
    "uploadDate": "2020-05-17",
    "thumbnail_url": "https://i.ytimg.com/vi/V6ZlfhZUdOQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=5_Bt_OEg0no",
    "title": "The Circuit Breaker Pattern | Resilient Microservices",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, microservices, fault tolerant microservices, circuit breaker, circuit breaker pattern, circuit breaker policy, retry policy, retry, high availability, design patterns, aws, azure, cloud, cloud patterns, soltuion, solution architecture, dotnet, .net",
    "scraped_at": 1685095346.3459327,
    "genre": "Education",
    "views": "22308",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain everything that you need to know about the Circuit Breaker pattern. When it comes to fault tolerant microservices, the circuit breaker pattern is one of the most used patterns. In this video I will explain how it works and why it is so useful.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#microservices #circuitbreaker\"",
    "lengthSeconds": "432",
    "uploadDate": "2020-04-14",
    "thumbnail_url": "https://i.ytimg.com/vi/5_Bt_OEg0no/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Q-lHpZBh3lQ",
    "title": "Why and how NoSQL databases can scale \"infinitely\" | Understanding NoSQL and partitioning",
    "tags": "Elfocrash, elfo, coding, how to code, tutorial, rest, rest api, microsoft, microsoft mvp, chapsas, nick chapsas, solution arcitecture, cloud, microservices, scaling, how to scale, solution, software design, aws, azure, google cloud platform, load balancer, cosmosdb, azure cosmosdb, dynamodb, aws dynamo, how databases scale, database scale, nosql, nosql scale, nosql partitioning, dynamodb partitioning, cosmosdb partitioning, dotnet, .net",
    "scraped_at": 1685095346.4129076,
    "genre": "Education",
    "views": "19953",
    "desc": "CORRECTION: When I said Google Spanner I meant Google Cloud Datastore*\\\\n\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain everything that you need to know about how NoSQL databases scale. It\\'s a very interesting topic and once you understand how they scale you can understand how you can design them better.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#scale #nosql #databases\"",
    "lengthSeconds": "885",
    "uploadDate": "2020-04-08",
    "thumbnail_url": "https://i.ytimg.com/vi/Q"
  },
  {
    "link": "watch?v=rzjy2DDPwio",
    "title": "How to design and code a scaleable solution (from monolith to microservices)",
    "tags": "Elfocrash, elfo, coding, C#, how to code, tutorial, rest, rest api, microsoft, microsoft mvp, chapsas, asp.net core 3, nick chapsas, solution arcitecture, cloud, microservices, scaling, how to scale, solution, software design, aws, azure, google cloud platform, load balancer, kafka, dotnet, .net",
    "scraped_at": 1685095346.4869325,
    "genre": "Education",
    "views": "23200",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will explain everything that you need to know about how you can scale your microservices. This video is useful for both Software Engineers and Solution Architects and touches upon everything that you need to be aware of when you are designing and coding your solution.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#scale #microservices #cloud\"",
    "lengthSeconds": "654",
    "uploadDate": "2020-03-28",
    "thumbnail_url": "https://i.ytimg.com/vi/rzjy2DDPwio/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gQ5P8WVpj30",
    "title": "Publishing and consuming messages in Azure Service Bus using .NET Core | Azure Tutorial",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, pub",
    "scraped_at": 1685095345.2539325,
    "genre": "Education",
    "views": "55543",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can publish messages into topics and queues in .NET Core and how you can also consume those messages. We will touch upon subscription filtering as well to only get notified for the messages that we are interested in.\\\\n\\\\nAzure Service Bus Explorer: https://github.com/paolosalvatori/ServiceBusExplorer\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #azure #servicebus\"",
    "lengthSeconds": "1613",
    "uploadDate": "2020-03-23",
    "thumbnail_url": "https://i.ytimg.com/vi/gQ5P8WVpj30/maxresdefault.jpg"
  },
  {
    "link": "watch?v=HrK1UlPBkEY",
    "title": "What is Azure Service Bus? (and why you might need it) | Azure Tutorial",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, pub",
    "scraped_at": 1685095346.5529063,
    "genre": "Education",
    "views": "93492",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\r\\\\nHello everybody I\\'m Nick and in this video I will explain what Microsoft Azure Service Bus is and how you can use it in your design to make awesome scaleable applications.\\\\n\\\\nGetting started with Azure Service Bus: https://azure.microsoft.com/en-gb/services/service-bus/\\\\n\\\\nAzure Service Bus is a messaging service on cloud used to connect any applications, devices, and also services running in the cloud to any other applications or services. As a result, it acts as a messaging backbone for applications available in the cloud or across any devices.\\\\n\\\\r\\\\nDon\\'t forget to comment, like and subscribe :)\\\\r\\\\n\\\\r\\\\nSocial Media:\\\\r\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\r\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\r\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\"",
    "lengthSeconds": "802",
    "uploadDate": "2020-03-17",
    "thumbnail_url": "https://i.ytimg.com/vi/HrK1UlPBkEY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9ZpMpf9dNDA",
    "title": "Getting started with Azure Blob Storage in .NET Core | Azure Tutorial",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, azure, blob storage, queue storage, azure storage, blob storage beginners guide, azure tutorial, azure guide, dotnet, .net",
    "scraped_at": 1685095347.5869064,
    "genre": "Education",
    "views": "49735",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can get started with Azure Blob Storage. Blob Storage is one of the most used Azure services and you should definitely know how you can work with it in your C# code. These examples will be done in .NET Core.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #azure #blobstorage\"",
    "lengthSeconds": "1368",
    "uploadDate": "2020-03-10",
    "thumbnail_url": "https://i.ytimg.com/vi/9ZpMpf9dNDA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=b21EQvfjvHc",
    "title": "How to securely store and load secrets using Azure Key Vault in .NET Core (using a certificate)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, pub",
    "scraped_at": 1685095346.6289334,
    "genre": "Education",
    "views": "40336",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can properly use Azure Key Vault in order to store and load secrets in your .NET Core application. There are many ways to get security wrong and only a few to get it right and this is one of the few. I will be using the certificate approach which is the most recommended one because it\\'s the most secure.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #keyvault #security\"",
    "lengthSeconds": "1822",
    "uploadDate": "2020-03-03",
    "thumbnail_url": "https://i.ytimg.com/vi/b21EQvfjvHc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=xhk9GNRuUoQ",
    "title": "Building cross platform mobile apps with Blazor (Experimental)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, for beginners, blazor tutorial, blazor fundamentals, blazor for mobile, blazor bindings, blazor native app, mobile app, cross platform mobile app, dotnet, .net",
    "scraped_at": 1685095345.3249326,
    "genre": "Education",
    "views": "10132",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will take a look at the experimental Blazor Mobile Bindings that are being used on top of Xamarin Forms in order to create a cross platform mobile application using Blazor. Keep in mind that everything is still experimental and Microsoft will need our help to improve upon this foundation.\\\\n\\\\nGive Mobile bindings a star on GitHub:\\\\nhttps://github.com/xamarin/MobileBlazorBindings\\\\n\\\\nFixes for iOS:\\\\nhttps://github.com/xamarin/MobileBlazorBindings/pull/76/files\\\\nhttps://github.com/xamarin/MobileBlazorBindings/pull/51/files\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #mobile\"",
    "lengthSeconds": "865",
    "uploadDate": "2020-02-27",
    "thumbnail_url": "https://i.ytimg.com/vi/xhk9GNRuUoQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=sM7D8biBf4k",
    "title": "How to collect metrics and create dashboards using Grafana, Prometheus and AppMetrics in .NET Core",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, dashboards, grafana, prometheus, appmetrics, .net core metrics, .net core dashboards, dotnet, .net",
    "scraped_at": 1685095346.6999328,
    "genre": "Education",
    "views": "72565",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can use AppMetrics, Prometheus and Grafana in order to collect metrics, expose them to Prometheus and then use that as a Data Source for Grafana to create beautiful dashboards.\\\\n\\\\nPrometheus is a free software application used for event monitoring and alerting. It records real-time metrics in a time series database built using a HTTP pull model, with flexible queries and real-time alerting.\\\\n\\\\nGrafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. In our scenario we will use Prometheus as the storage.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #grafana #prometheus\"",
    "lengthSeconds": "1634",
    "uploadDate": "2020-02-14",
    "thumbnail_url": "https://i.ytimg.com/vi/sM7D8biBf4k/maxresdefault.jpg"
  },
  {
    "link": "watch?v=b2zxl5zNjlA",
    "title": "How to write cleaner unit tests with Fluent Assertions in .NET Core (Framework, Standard)",
    "tags": "Elfocrash, elfo, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, js, csharp, lesson, software engineering, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, xunit, tests with xunit, unit tests, integration tests, tests in .net, fluent assertions, shouldly, unit test assert, clean unit tests, tdd, bdd, atdd, dotnet, .net",
    "scraped_at": 1685095345.3929327,
    "genre": "Education",
    "views": "16893",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will teach you how you can write cleaner unit tests assertions using the FluentAssertions Nuget package.\\\\nFluent Assertions is a set of .NET extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style unit test.\\\\n\\\\nGive FluentAssertions a star: https://github.com/fluentassertions/fluentassertions\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #fluentassertions #tests\"",
    "lengthSeconds": "770",
    "uploadDate": "2020-02-11",
    "thumbnail_url": "https://i.ytimg.com/vi/b2zxl5zNjlA/maxresdefault.jpg"
  },
  {
    "link": "watch?v=jwek4w6als4",
    "title": "How to effectively use Redis Cache in .NET Core (Framework, Standard)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, redis, cache, pub",
    "scraped_at": 1685095346.768933,
    "genre": "Education",
    "views": "86556",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can use Redis in your .NET applications the correct way. I will talk about key value pair storage but also the pub/sub aspect of Redis. We will have a subscriber for our Redis cluster and we will publish messages and see them consumed in real time. We will also enable master-replica replication and see how Redis deals with this scenario.\\\\n\\\\nRedis desktop manager: https://redisdesktop.com/\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #redis #cache\"",
    "lengthSeconds": "1119",
    "uploadDate": "2020-02-05",
    "thumbnail_url": "https://i.ytimg.com/vi/jwek4w6als4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=LcQYv0cBWk0",
    "title": "Clean mocking for unit tests using NSubstitute in .NET (Core, Framework, Standard)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, xunit, tests with xunit, unit tests, mocking in .net, moq, nunit, mocking for beginners, getting started with nsubstitute, nsubstitute, mocking with nsubstitute, dotnet, .net",
    "scraped_at": 1685095345.4609349,
    "genre": "Education",
    "views": "28068",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can get started with mocking external dependencies in unit testing using NSubstitute. NSubstitute is, in my opinion, the best mocking framework for unit tests in .NET and I highly recommend it.\\\\n\\\\nNSubstitute detailed documentation: https://nsubstitute.github.io/help/getting-started/\\\\n\\\\nIn object-oriented programming, mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #tests #mocking\"",
    "lengthSeconds": "1111",
    "uploadDate": "2020-01-29",
    "thumbnail_url": "https://i.ytimg.com/vi/LcQYv0cBWk0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9ZvDBSQa_so",
    "title": "Getting started with Mocking using Moq in .NET (Core, Framework, Standard)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest api, lesson, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, xunit, tests with xunit, unit tests, mocking in .net, mocking with moq, moq, nunit, getting started with moq, mocking for beginners, dotnet, .net",
    "scraped_at": 1685095345.5319326,
    "genre": "Education",
    "views": "161511",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can get started with mocking external dependencies in unit testing using Moq. Moq is the most popular mocking framework in .NET and even though it is not my personal favourite, I highly recommend it.\\\\n\\\\nMoq detailed documentation: https://github.com/Moq/moq4/wiki/Quickstart\\\\n\\\\nIn object-oriented programming, mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #tests #mocking\"",
    "lengthSeconds": "1330",
    "uploadDate": "2020-01-27",
    "thumbnail_url": "https://i.ytimg.com/vi/9ZvDBSQa_so/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2Wp8en1I9oQ",
    "title": "Writing tests in .NET using xUnit -  xUnit Tutorial",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, .net core for beginners, xunit, tests with xunit, unit tests, acceptance tests, integration tests, tests in .net, dotnet, .net",
    "scraped_at": 1685095345.6069062,
    "genre": "Education",
    "views": "108533",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will teach you how you can write unit tests .NET Core using the xUnit library. xUnit is the most popular testing library in .NET and it is an essential part of your skillset.\\\\n\\\\nGive xUnit a star: https://github.com/xunit/xunit\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #xunit #tests\"",
    "lengthSeconds": "1550",
    "uploadDate": "2020-01-23",
    "thumbnail_url": "https://i.ytimg.com/vi/2Wp8en1I9oQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=yXzn6HxTufM",
    "title": "How to add clean Retrying in .NET Core using Polly",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, httpclient, polly, retry, retry policy, .net core for beginners, dotnet, .net",
    "scraped_at": 1685095346.8379333,
    "genre": "Education",
    "views": "56261",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can add clean retries in your .NET Core application using the Nuget package Polly. Polly is a great package and an absolute must for your professional .NET Core application and in this video we will take a look at just the retry mechanism. There are other policies that we will cover in future videos.\\\\n\\\\nGive Polly a star: https://github.com/App-vNext/Polly\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #polly #retries\"",
    "lengthSeconds": "929",
    "uploadDate": "2020-01-20",
    "thumbnail_url": "https://i.ytimg.com/vi/yXzn6HxTufM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=9pgvX_Dk0n8",
    "title": "Resilient HttpClient using Polly and IHttpClientFactory in .NET Core 3",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, httpclient, ihttpclientfactory, factory, httpclientfactory, polly, retry, dotnet, .net",
    "scraped_at": 1685095345.6759064,
    "genre": "Education",
    "views": "40461",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can create a high performing, efficient and resilient HttpClient using .NET Core\\'s IHttpClientFactory and it\\'s support for Polly. \\\\n\\\\nA new HttpClient instance is returned each time CreateClient is called on the IHttpClientFactory. An HttpMessageHandler is created per named client. The factory manages the lifetimes of the HttpMessageHandler instances.\\\\n\\\\nIHttpClientFactory pools the HttpMessageHandler instances created by the factory to reduce resource consumption. An HttpMessageHandler instance may be reused from the pool when creating a new HttpClient instance if its lifetime hasn\\'t expired.\\\\n\\\\nPooling of handlers is desirable as each handler typically manages its own underlying HTTP connections. Creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS (Domain Name System) changes.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #polly #httpclient\"",
    "lengthSeconds": "646",
    "uploadDate": "2020-01-15",
    "thumbnail_url": "https://i.ytimg.com/vi/9pgvX_Dk0n8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=FGsx7o7e-HU",
    "title": "Creating a console-based microservice in .NET Core",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, rest api, lesson, software engineering, microsoft, microsoft mvp, .net core, nick chapsas, .net core 3, .net core 2, .net core 2.2, microservice, .net core microservice, api, .net core api, dotnet, .net",
    "scraped_at": 1685095346.9079084,
    "genre": "Education",
    "views": "22529",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can create a non-API microservice in .NET Core. We will be using an API as a based in order to benefit from the WebHost that is running behind the scenes and we will use that to expose metrics and healthchecks using AppMetrics.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #microservices\"",
    "lengthSeconds": "806",
    "uploadDate": "2020-01-08",
    "thumbnail_url": "https://i.ytimg.com/vi/FGsx7o7e"
  },
  {
    "link": "watch?v=I2PChWTwmM8",
    "title": "Adding Facebook Authentication in a .NET Core API (Login & Register)",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, csharp, rest, rest api, lesson, software engineering, microsoft, microsoft mvp, .net core, auth, authorization, jwt, jwt token, json web token, registration, user, user registration, nick chapsas, web api, facebook, facebook auth, facebook login, facebook register, access token, .net core 3, .net core 2, .net core 2.2, authentication, dotnet, .net",
    "scraped_at": 1685095345.7449062,
    "genre": "Education",
    "views": "33735",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nThe giveaway is now over. Thanks for participating.\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial I will show you how you can add Facebook Authentication in your .NET Core application. This is applicable to any .NET application but I will be using my .NET Core REST API series for this.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #facebook #auth\"",
    "lengthSeconds": "2008",
    "uploadDate": "2020-01-02",
    "thumbnail_url": "https://i.ytimg.com/vi/I2PChWTwmM8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=iTm5WVvNjWc",
    "title": "Using custom Feature Flag filters in .NET Core 3.1",
    "tags": "coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, clean architecture, clean code, asp.net core api, feature flags, featuremanagement, feature toggle, feature flag filter, flag filter, filter, .net core 3.1, dotnet, .net",
    "scraped_at": 1685095345.8129349,
    "genre": "Education",
    "views": "10694",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial we will see how use the build in custom filters of the FeatureManagement package but also how we can write our own custom ones. Feature Flags, also known as Feature Toggles, is a technique in software development that attempts to provide an alternative to maintaining multiple source-code branches (known as feature branches), such that a feature can be tested even before it is completed and ready for release. Feature toggle is used to hide, enable or disable the feature during run time. For example, during the development process, a developer can enable the feature for testing and disable it for other users.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #dotnetcore #featureflags\"",
    "lengthSeconds": "882",
    "uploadDate": "2019-12-26",
    "thumbnail_url": "https://i.ytimg.com/vi/iTm5WVvNjWc/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6EebLChouDE",
    "title": "Dynamically enabling features with Feature Flags in .NET Core 3.1",
    "tags": "coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, clean architecture, clean code, asp.net core api, feature flags, featuremanagement, feature toggle, dotnet, .net",
    "scraped_at": 1685095345.8839326,
    "genre": "Education",
    "views": "27026",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial we will see how we can dynamically enable feature is our .NET Core applications using Feature Flags. Feature Flags, also known as Feature Toggles, is a technique in software development that attempts to provide an alternative to maintaining multiple source-code branches (known as feature branches), such that a feature can be tested even before it is completed and ready for release. Feature toggle is used to hide, enable or disable the feature during run time. For example, during the development process, a developer can enable the feature for testing and disable it for other users.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#dotnet #dotnetcore #featureflags\"",
    "lengthSeconds": "704",
    "uploadDate": "2019-12-23",
    "thumbnail_url": "https://i.ytimg.com/vi/6EebLChouDE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=EWmufbVF2A4",
    "title": "Benchmarking C# code using BenchmarkDotNet",
    "tags": "coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, clean architecture, clean code, asp.net core api, code optimization, performance, performance optimization, benchmark, benchmarkdotnet, bechmark code, dotnet, .net",
    "scraped_at": 1685095345.957933,
    "genre": "Education",
    "views": "46596",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this .NET tutorial we will take a first look at benchmarking our .NET code using BenchmarkDotNet. BenchmarkDotNet is a nuget package that allows us to run benchmarks against our C# method and see exactly how fast they run or how many memory we allocate for them. It is a really interesting tool and I highly recommend that you know about it and use it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\r\\\\n\\\\n#dotnet #csharp #benchmark\"",
    "lengthSeconds": "1020",
    "uploadDate": "2019-12-16",
    "thumbnail_url": "https://i.ytimg.com/vi/EWmufbVF2A4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=m77s48tTdfU",
    "title": "Clean service decoration in .NET Core using Scrutor",
    "tags": "coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, cqrs, design patterns, clean architecture, clean code, asp.net core api, decorator, scrutor, decorate pattern, clean .net core, dotnet, .net",
    "scraped_at": 1685095346.029933,
    "genre": "Education",
    "views": "33756",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this ASP.NET Core tutorial I will show you how you can use Scrutor to decorate your services in a very clean and elegant way. We are going to take a look into a real life example. More specifically, decorating a repository with a caching decorated service without actually modifying the repository class itself.\\\\n\\\\nScrutor: https://github.com/khellang/Scrutor\\\\nAndrew Lock\\'s blog post: https://andrewlock.net/adding-decorated-classes-to-the-asp.net-core-di-container-using-scrutor/\\\\nSteve Smith\\'s blog post: https://ardalis.com/building-a-cachedrepository-in-aspnet-core\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\r\\\\n\\\\nSocial Media:\\\\r\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\r\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\r\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\r\\\\n\\\\n#dotnetcore #decorator #scrutor\"",
    "lengthSeconds": "682",
    "uploadDate": "2019-12-11",
    "thumbnail_url": "https://i.ytimg.com/vi/m77s48tTdfU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=2JzQuIvxIqk",
    "title": "Validation using MediatR's Pipeline Behaviors and FluentValidation | Clean .NET Core",
    "tags": "coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, cqrs, mediatr, design patterns, clean architecture, clean code, asp.net core api, pipeline behaviors, fluentvalidation, validation, pipeline, middleware, mediator, dotnet, .net",
    "scraped_at": 1685095346.0989063,
    "genre": "Education",
    "views": "78839",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this ASP.NET Core tutorial I will show you how you can use MediatR\\'s Pipeline Behavior feature to add domain level validation in your API in a very clean way. We will add it using a very intuitive way, without mixing it with our happy path logic in our main IRequestHandler. I will also explain how exactly Pipeline Behaviors work and why they are a perfect fit for this piece of functionality. The validation logic will use FluentValidation.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\r\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\r\\\\n\\\\n#aspnetcore #mediatr #tutorial\"",
    "lengthSeconds": "902",
    "uploadDate": "2019-12-05",
    "thumbnail_url": "https://i.ytimg.com/vi/2JzQuIvxIqk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=YzOBrVlthMk",
    "title": "Clean ASP.NET Core API using MediatR and CQRS | Setup",
    "tags": "coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, csharp, rest api, development, software engineering, dev, microsoft, .net core, asp.net core 3, cqrs, mediatr, design patterns, clean architecture, clean code, asp.net core api, dotnet, .net",
    "scraped_at": 1685095346.1709085,
    "genre": "Education",
    "views": "289703",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this ASP.NET Core tutorial I will show you how you can use CQRS and MediatR to clean up your applications. I will briefly explain what CQRS and the Mediator patterns are and how they apply in our use-case. The I will show you how you can use the MediatR package to decouple your API layer from your application layer, leading to more testable and manageable code.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\r\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\r\\\\n\\\\n#aspnetcore #mediatr #cqrs #tutorial\"",
    "lengthSeconds": "1359",
    "uploadDate": "2019-12-02",
    "thumbnail_url": "https://i.ytimg.com/vi/YzOBrVlthMk/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qe9qANk8Ecw",
    "title": "Deploying Server-Side Blazor in Azure with SignalR service | Blazor Tutorial 13",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, js, blazor tutorial, blazor for beginners, signalr, azure, azure signalr, managed signalr, azure deployment, deploy azure, dotnet, .net",
    "scraped_at": 1685095346.979908,
    "genre": "Education",
    "views": "8006",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will show you how you can deploy a server side Blazor application in Azure. Not only we will deploy the app as a web app but we also going to use the managed SignalR service to hand over all the responsibility of handling our real time events.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #azure #signalr\"",
    "lengthSeconds": "671",
    "uploadDate": "2019-11-27",
    "thumbnail_url": "https://i.ytimg.com/vi/qe9qANk8Ecw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=6MjxgbmTAAM",
    "title": "Creating a desktop application using Blazor and Electron | Blazor Tutorial 12",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, blazor authentication, js, blazor tutorial, blazor for beginners, desktop app, blazor desktop, electron, github, winforms, dotnet, .net",
    "scraped_at": 1685095346.239936,
    "genre": "Education",
    "views": "18937",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will show you how you can easily turn your Blazor application into a desktop application using Electron. Electron is an open source framework create by GitHub that allows us to create desktop apps for Windows, MacOs and Linux using web technologies. Since Blazor is a web technology as well we will be able to create standalone desktop apps using server side Blazor.\\\\n\\\\nGive Electron.NET a star on GitHub: https://github.com/ElectronNET/Electron.NET\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #electron\"",
    "lengthSeconds": "504",
    "uploadDate": "2019-11-26",
    "thumbnail_url": "https://i.ytimg.com/vi/6MjxgbmTAAM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=k_c-ErPaYa8",
    "title": "Managing Blazor state using Redux | Blazor Tutorial 11",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, blazor authentication, js, blazor tutorial, blazor for beginners, redux, flux, blazor redux, flux architecture, cqrs, event sourcing, state management, dotnet, .net",
    "scraped_at": 1685095347.247933,
    "genre": "Education",
    "views": "25158",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\n\\\\rHello everybody I\\'m Nick and in this Blazor tutorial I will show you how to use the Redux approach in order to implement more effective state application management for our Blazor application. There are many advantages in used this approach while using Blazor with the main one being that our state updates become predictable and easier to manage as our application becomes bigger. I am going to be using a GitHub open source package called Fluxor.\\\\n\\\\nGive Fluxor a star on GitHub: https://github.com/mrpmorris/blazor-fluxor\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #redux #flux\"",
    "lengthSeconds": "1187",
    "uploadDate": "2019-11-18",
    "thumbnail_url": "https://i.ytimg.com/vi/k_c"
  },
  {
    "link": "watch?v=M_FgjyoKMn0",
    "title": "How to use HTML5 Web Storage in Blazor | Blazor Tutorial 10",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, blazor authentication, js, blazor tutorial, blazor for beginners, webstorage, localstorage, sessionstorage, html5, web storage, blazored, blazor extensions, local storage, cookies, dotnet, .net",
    "scraped_at": 1685095347.314933,
    "genre": "Education",
    "views": "6920",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\n\\\\rHello everybody I\\'m Nick and in this Blazor tutorial I will show you how to use HTML5\\'s Web Storage in a Blazor application. We will take a look at what Web Storage is and we are going to use two popular packages to implement the local and the session storage.\\\\n\\\\nPackages used:\\\\nBlazored.SessionStorage - https://github.com/Blazored/SessionStorage\\\\nBlazored.LocalStorage - https://github.com/Blazored/LocalStorage\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial\"",
    "lengthSeconds": "870",
    "uploadDate": "2019-11-15",
    "thumbnail_url": "https://i.ytimg.com/vi/M_FgjyoKMn0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=m1aWGR2uKGg",
    "title": "Authorization in Server-Side Blazor | Blazor Tutorial 9",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, authentication, authorization, auth, blazor authentication, blazor auth, js, blazor tutorial, blazor for beginners, claims, roles, permissions, policies, asp.net identity, dotnet, .net",
    "scraped_at": 1685095347.0519333,
    "genre": "Education",
    "views": "19358",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will show you how to configure authorization in your server-side Blazor application. While in the previous video we took a look at authentication and how we can set it up, authorization is covering what our users are allowed to do in our Blazor application. \\\\n\\\\nLinks to the REST API series: \\\\n* Restricting endpoints with Claims | ASP.NET Core 3 \\\\u0026 2.2 REST API Tutorial 17: https://www.youtube.com/watch?v=g_8EHDQO4wI\\\\n* Restricting endpoints with Roles | ASP.NET Core 3 \\\\u0026 2.2 REST API Tutorial 18: https://www.youtube.com/watch?v=wPhRFsH8kyU\\\\n* Restricting endpoints with Authorization handlers | ASP.NET Core 3 \\\\u0026 2.2 REST API Tutorial 19: https://www.youtube.com/watch?v=juYLAFsz26Q\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #auth\"",
    "lengthSeconds": "963",
    "uploadDate": "2019-11-12",
    "thumbnail_url": "https://i.ytimg.com/vi/m1aWGR2uKGg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=NSVZa4JuTl8",
    "title": "Trying to create a Dependency Injection/IoC Container FROM SCRATCH",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, dependency injection, solid, solid principles, ioc, inversion of control, di container, dependency injection container, ioc container, from scratch, tech from scratch, dotnet, .net",
    "scraped_at": 1685095347.1189325,
    "genre": "Education",
    "views": "37835",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will try to create a dependency injection or DI container from scratch. This is also known as an IoC container or an inversion of control container. I\\'m going to do that using C# and .NET Core 3.\\\\n\\\\nIn object-oriented design, the dependency inversion principle is a specific form of decoupling software modules. When following this principle, the conventional dependency relationships established from high-level, policy-setting modules to low-level, dependency modules are reversed, thus rendering high-level modules independent of the low-level module implementation details.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\"",
    "lengthSeconds": "2051",
    "uploadDate": "2019-11-07",
    "thumbnail_url": "https://i.ytimg.com/vi/NSVZa4JuTl8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ntmV9nj4N2Y",
    "title": "How to add Authentication in Server-side Blazor | Blazor Tutorial 8",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, blazor fundamentals, authentication, authorization, auth, blazor authentication, blazor auth, js, blazor tutorial, blazor for beginners, dotnet, .net",
    "scraped_at": 1685095347.388933,
    "genre": "Education",
    "views": "54063",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will show you how to add authentication support in your server-side Blazor application. Keep in mind that this is applicable ONLY on server-side Blazor. Client side Blazor or WebAssembly Blazor will have its own video in the future. In order to implement Blazor authentication I will be using the built in ASP.NET Core Identity, Entity Framework Core and SQLite.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #auth\"",
    "lengthSeconds": "1483",
    "uploadDate": "2019-10-28",
    "thumbnail_url": "https://i.ytimg.com/vi/ntmV9nj4N2Y/maxresdefault.jpg"
  },
  {
    "link": "watch?v=zfqQ_fhmPOQ",
    "title": "Creating Forms with Validation | Blazor Tutorial 7",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, js, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, for beginners, blazor tutorial, blazor fundamentals, forms, validation, forms and validation, fluent validation, data annotations, custom validation, blazor validation, razor components, dotnet, .net",
    "scraped_at": 1685095347.6559062,
    "genre": "Education",
    "views": "18718",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s built in form component and the way we can introduce validation in those forms. We will be talking about the built in functionality only and I won\\'t be talking about Fluent Valuation or any other framework. We will be using attributes via the DataAnnotations namespace. Once we are done with this video you will be able to create awesome forms in your Blazor Single Page Applications. \\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #jsinterop\"",
    "lengthSeconds": "1201",
    "uploadDate": "2019-10-23",
    "thumbnail_url": "https://i.ytimg.com/vi/zfqQ_fhmPOQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Pdj4YOfWH00",
    "title": "JS Interop: Calling C# methods from JavaScript | Blazor Tutorial 6",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, for beginners, blazor tutorial, blazor fundamentals, js interop, js from c#, c# from js, js interoperability, interoperability, dotnet, .net",
    "scraped_at": 1685095347.7249064,
    "genre": "Education",
    "views": "15076",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s JavaScript Interop feature. I am only going to focus on calling C# methods from JS functions in this video since I already covered the opposite in the previous video in the series. JS Interop is a really powerful feature and it\\'s critical for Blazor\\'s success.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #jsinterop\"",
    "lengthSeconds": "910",
    "uploadDate": "2019-10-18",
    "thumbnail_url": "https://i.ytimg.com/vi/Pdj4YOfWH00/maxresdefault.jpg"
  },
  {
    "link": "watch?v=p4MD6ycpQpY",
    "title": "JS Interop: Calling JavaScript from C#  | Blazor Tutorial 5",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, for beginners, blazor tutorial, blazor fundamentals, js interop, js from c#, c# from js, js interoperability, interoperability, dotnet, .net",
    "scraped_at": 1685095347.7919326,
    "genre": "Education",
    "views": "27475",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s JavaScript Interop feature. I am only going to focus on calling JS function from C# methods in this video. In the next video I\\'m going to cover calling C# methods from JS functions. JS Interop is a really powerful feature and it\\'s critical for Blazor\\'s success.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial #jsinterop\"",
    "lengthSeconds": "885",
    "uploadDate": "2019-10-15",
    "thumbnail_url": "https://i.ytimg.com/vi/p4MD6ycpQpY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Ahy_R-3e5CE",
    "title": "Routing and Navigation | Blazor Tutorial 4",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, for beginners, blazor tutorial, blazor fundamentals, routing, nav, navigation, dotnet, .net",
    "scraped_at": 1685095348.0329342,
    "genre": "Education",
    "views": "19273",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s Routing and Navigation.  I\\'m going to explain how routing works and how Blazor allows us to navigate from one page to another. We will also look into some navigation related razor components and see how we can configure them.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial\"",
    "lengthSeconds": "829",
    "uploadDate": "2019-10-10",
    "thumbnail_url": "https://i.ytimg.com/vi/Ahy_R"
  },
  {
    "link": "watch?v=F1JsJZU3-Rc",
    "title": "What are Blazor Layouts? | Blazor Tutorial 3",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, js, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, razor, blazor tutorial, blazor tutorial for beginners, blazor fundamentals, blazor layouts, dotnet, .net",
    "scraped_at": 1685095347.8609326,
    "genre": "Education",
    "views": "18528",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s Layouts. Even though they look simple on the surface there are several cool things we can do with them.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial\"",
    "lengthSeconds": "548",
    "uploadDate": "2019-10-04",
    "thumbnail_url": "https://i.ytimg.com/vi/F1JsJZU3"
  },
  {
    "link": "watch?v=gjvyM240B-Q",
    "title": "Dependency Injection | Blazor Tutorial 2",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, blazor fundamentals, blazor tutorial, blazor for beginners, dependency injection, di, dotnet, .net",
    "scraped_at": 1685095347.4529326,
    "genre": "Education",
    "views": "15408",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s Dependency injection or DI. There are a few differences from the regulart .NET Core DI so it\\'s worth watching and understanding even though you might be familiar with .NET Core.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial\"",
    "lengthSeconds": "498",
    "uploadDate": "2019-10-02",
    "thumbnail_url": "https://i.ytimg.com/vi/gjvyM240B"
  },
  {
    "link": "watch?v=bh-HMCUQkn8",
    "title": "What are Razor Components? | Blazor Tutorial 1",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, blazor, webassembly, wasm, razor components, for beginners, blazor tutorial, blazor fundamentals, dotnet, .net",
    "scraped_at": 1685095347.9429355,
    "genre": "Education",
    "views": "29844",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this Blazor tutorial I will talk about Blazor\\'s Razor components. This is a tutorial for Blazor beginners and only requires C# and Razor knowledge to jump into it. This is the same across both WebAssembly Razor and Server side Blazor with SignalR\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #tutorial\"",
    "lengthSeconds": "767",
    "uploadDate": "2019-10-01",
    "thumbnail_url": "https://i.ytimg.com/vi/bh"
  },
  {
    "link": "watch?v=HFvPKmS2gig",
    "title": "Blazor server-side vs client-side (WebAssembly) | What should you choose?",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, asp.net core, javascript, js, csharp, development, software engineering, dev, microsoft, .net core, nick chapsas, chapsas, asp.net core 3, blazor, razor, mvc, razor components, blazor server",
    "scraped_at": 1685095348.1129065,
    "genre": "Education",
    "views": "88789",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will talk about Blazor. I will explain what Blazor server-side and what Blazor client-side are, their differences, their pros and cons and finally give my opinion on this new piece of technology. SignalR or WebAssembly. Let\\'s dive into it.\\\\n\\\\nLink to the Blazor Templates: https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started?view=aspnetcore-3.1\\\\u0026tabs=visual-studio\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#blazor #webassembly\"",
    "lengthSeconds": "919",
    "uploadDate": "2019-09-27",
    "thumbnail_url": "https://i.ytimg.com/vi/HFvPKmS2gig/maxresdefault.jpg"
  },
  {
    "link": "watch?v=BO2C5qAyl4w",
    "title": "Continuous Integration with GitHub Actions (CI) | ASP.NET Core 5 REST API Tutorial 29",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, continuous integration, ci, github, github actions, team city, octopus, dotnet, .net",
    "scraped_at": 1685095348.1819339,
    "genre": "Education",
    "views": "18682",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nBecome a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can set up continuous integration for your ASP.NET Core project using GitHub Actions.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\"",
    "lengthSeconds": "669",
    "uploadDate": "2019-09-25",
    "thumbnail_url": "https://i.ytimg.com/vi/BO2C5qAyl4w/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Zc9xyOgl8k4",
    "title": "Resource filtering | ASP.NET Core 5 REST API Tutorial 28",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, filtering, query string filter, dotnet, .net",
    "scraped_at": 1685095348.245906,
    "genre": "Education",
    "views": "20467",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can use query string parameters to implement resource filtering in your REST API in ASP.NET Core.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "568",
    "uploadDate": "2019-09-24",
    "thumbnail_url": "https://i.ytimg.com/vi/Zc9xyOgl8k4/maxresdefault.jpg"
  },
  {
    "link": "watch?v=bdgtYbGYsK0",
    "title": "Adding Health Checks | ASP.NET Core 5 REST API Tutorial 27",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, health check, healthcheck, web api, api, custom health check, monitoring, dotnet, .net",
    "scraped_at": 1685095348.607933,
    "genre": "Education",
    "views": "24835",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can easily add health checks in your ASP.NET Core API. ASP.NET Core comes with built in support for health-checks but I will show you how we can customize them end extend them as well.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "808",
    "uploadDate": "2019-09-10",
    "thumbnail_url": "https://i.ytimg.com/vi/bdgtYbGYsK0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=y8TcPr73Bwo",
    "title": "Test driven development (TDD) - Tutorial for Beginners",
    "tags": "Elfocrash, elfo, coding, core, C#, how to code, tutorial, javascript, js, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, nick chapsas, chapsas, tdd, test driven development, test driven development for beginners, for beginners, atdd, bdd, testing, xunit, unit testing, dotnet, .net",
    "scraped_at": 1685095349.7879326,
    "genre": "Education",
    "views": "85473",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will be talking about test driven development also known as TDD. This video will benefit any level of engineer who wants to start writing code in a TDD way. In this specific video I will be using C# and xUnit but there are similar combinations for testing frameworks across any programming language.\\\\n\\\\nThis video is part of my Software Engineering Fundamentals series.\\\\n\\\\nTest-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved so that the tests pass. This is opposed to software development that allows software to be added that is not proven to meet requirements.\\\\n\\\\nHere is a link to the repository shown in the video: http://bit.ly/ChapsTDD\\\\n\\\\nFeel free to complete steps 6 to 9 and send me the result.s\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tdd #testing #tutorial\"",
    "lengthSeconds": "1509",
    "uploadDate": "2019-09-05",
    "thumbnail_url": "https://i.ytimg.com/vi/y8TcPr73Bwo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=cKj6U4qDmgQ",
    "title": "Implementing pagination | ASP.NET Core 5 REST API Tutorial 26",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, pagination, asp.net pagination, rest api pagination, dotnet, .net",
    "scraped_at": 1685095348.6779327,
    "genre": "Education",
    "views": "37057",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can easily add pagination in your REST API in ASP.NET Core. We will use a simple approach which is easy to follow and adds the basics for a fully functional pagination. You can of course expand on it if you want.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "1570",
    "uploadDate": "2019-09-03",
    "thumbnail_url": "https://i.ytimg.com/vi/cKj6U4qDmgQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=KboCpJGa9ag",
    "title": "Response caching using Redis | ASP.NET Core 5 REST API Tutorial 25",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, response caching asp.net core, response cache, redis cache, redis, web api, dotnet, .net",
    "scraped_at": 1685095348.320933,
    "genre": "Education",
    "views": "49082",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can easily add response caching using Redis Cache in your ASP.NET Core REST API. This approach is not limited to REST APIs and can be used by any ASP.NET Core project. We will use an attribute to quickly and easily integrate with Redis.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api #redis\"",
    "lengthSeconds": "1413",
    "uploadDate": "2019-08-29",
    "thumbnail_url": "https://i.ytimg.com/vi/KboCpJGa9ag/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Zo3T_See7iI",
    "title": "Setting up ApiKey-based Authentication | ASP.NET Core 5 REST API Tutorial 24",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, asp.net core 3, api key authentication, apikey auth, authorization, api key auth .net core, for beginners, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.3919332,
    "genre": "Education",
    "views": "69502",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can set up ApiKey-based authentication in your ASP.NET Core 3 or 2.2 Api. This is not a REST API specific thing and you can do it across any ASP.NET Core project. We will follow the very simple approach of using a custom attribute for this.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "604",
    "uploadDate": "2019-08-26",
    "thumbnail_url": "https://i.ytimg.com/vi/Zo3T_See7iI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=grBTYaTGLv8",
    "title": "Creating an API SDK with Refit | ASP.NET Core 5 REST API Tutorial 23",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, api client c#, api sdk, asp.net core 3, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.4599063,
    "genre": "Education",
    "views": "19086",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video I will show you how you can create an SDK, also known as a client, for our REST API. It is a really straightforward process and we will be using Refit wihch is a package that automatically does most of the job for us.\\\\n\\\\nGive Refit a star on GitHub: http://bit.ly/ChapRefit\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api #refit\"",
    "lengthSeconds": "1212",
    "uploadDate": "2019-08-22",
    "thumbnail_url": "https://i.ytimg.com/vi/grBTYaTGLv8/maxresdefault.jpg"
  },
  {
    "link": "watch?v=BGASedyh16I",
    "title": "Extended Swagger documentation | ASP.NET Core 5 REST API Tutorial 22",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, swagger, swashbuckle swagger asp.net core, swashbuckle, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.5309064,
    "genre": "Education",
    "views": "28275",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I\\'m gonna show you how you can extend your Swagger documentation in ASP.NET Core. We will be using a couple of helper packages to achieve that but mostly we will be building upon the existing functionality of the Swashbuckle package.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "968",
    "uploadDate": "2019-08-05",
    "thumbnail_url": "https://i.ytimg.com/vi/BGASedyh16I/maxresdefault.jpg"
  },
  {
    "link": "watch?v=Ut6mRRFT2vM",
    "title": "Validating requests with FluentValidation | ASP.NET Core 5 REST API Tutorial 21",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, fluentvalidation .net core, fluentvalidation, rest api tutorial, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.745906,
    "genre": "Education",
    "views": "53525",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can validate your requests in ASP.NET Core REST API using FluentValidation. I will explain why we will use fluent validation instead of just using the built in model state and how we can abstract it\\'s responsibility in a single filter middleware.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "1022",
    "uploadDate": "2019-07-29",
    "thumbnail_url": "https://i.ytimg.com/vi/Ut6mRRFT2vM/maxresdefault.jpg"
  },
  {
    "link": "watch?v=1Dz5Lfo6mqo",
    "title": "Domain to Contract mapping with Automapper | ASP.NET Core 5 REST API Tutorial 20",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, automapper, automapper .net core, object mapping, web api tutorial c#, web api 2, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.8129325,
    "genre": "Education",
    "views": "43664",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how we can separate our domain objects from our contracts and how we can map from one another using a tool called Automapper.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "1034",
    "uploadDate": "2019-07-25",
    "thumbnail_url": "https://i.ytimg.com/vi/1Dz5Lfo6mqo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=juYLAFsz26Q",
    "title": "Restricting endpoints with Authorization handlers | ASP.NET Core 5 REST API Tutorial 19",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, authorization, policy, auth, web api, web api 2 tutorial, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095349.8569329,
    "genre": "Education",
    "views": "11711",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nSupport me on Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can use ASP.NET Core Authorization handlers to restrict specific controllers and endpoints. This is all achieved by using the built in support for policies that support custom Authorization handlers.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "602",
    "uploadDate": "2019-07-22",
    "thumbnail_url": "https://i.ytimg.com/vi/juYLAFsz26Q/maxresdefault.jpg"
  },
  {
    "link": "watch?v=wPhRFsH8kyU",
    "title": "Restricting endpoints with Roles | ASP.NET Core 5 REST API Tutorial 18",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, roles, claims, auth, authorization, authorisation, authentication, policy, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095349.9249065,
    "genre": "Education",
    "views": "13347",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nSupport me on Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can use ASP.NET Core Identity Roles to restrict specific actions. This is all achieved by using the built in Identity, which is utilized for both Authentication and Authorization.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "654",
    "uploadDate": "2019-07-18",
    "thumbnail_url": "https://i.ytimg.com/vi/wPhRFsH8kyU/maxresdefault.jpg"
  },
  {
    "link": "watch?v=g_8EHDQO4wI",
    "title": "Restricting endpoints with Claims | ASP.NET Core 5 REST API Tutorial 17",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, authorization, claims, policy, auth, authentication, identity, identity server, web api, .net 5, dotnet 5, dotnet, .net",
    "scraped_at": 1685095348.8839064,
    "genre": "Education",
    "views": "16776",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nSupport me on Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can use ASP.NET Core Identity claims and policies to restrict specific actions. This is all achieved by using simple built in Authorisation methods and services.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial Media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "656",
    "uploadDate": "2019-07-16",
    "thumbnail_url": "https://i.ytimg.com/vi/g_8EHDQO4wI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=gYy5XJRJkOo",
    "title": "Migrating to .NET Core 3 | ASP.NET Core 2.2 & 3 REST API Tutorial 16",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, migrating, .net core 3, asp.net core 3, core 3, migration, c# for beginners, c#, web api, dotnet, .net",
    "scraped_at": 1685095348.9529061,
    "genre": "Education",
    "views": "22542",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I show how easy and simple it is to migrate your ASP.NET Core 2, 2.1 and 2.2 APIs to ASP.NET Core 3. We will see what changed and how we can simply fix any migration issues without having to deal with complex problems and endless debugging.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\"",
    "lengthSeconds": "816",
    "uploadDate": "2019-07-10",
    "thumbnail_url": "https://i.ytimg.com/vi/gYy5XJRJkOo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=7roqteWLw4s",
    "title": "Integration testing | ASP.NET Core 5 REST API Tutorial 15",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, integration testing, integration tests in .net core, webapplicationfactory, xunit, testserver, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.0229328,
    "genre": "Education",
    "views": "100296",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can get started with integration tests in ASP.NET core. We will be using the in-memory TestServer method which is provided by the use of the WebApplicationFactory class. It\\'s a very cool method and I\\'d like to share it with you.\\\\n\\\\nSource code: https://gist.github.com/Elfocrash/101ffc29947832545cdaebcb259c2f44\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api #testing\"",
    "lengthSeconds": "1333",
    "uploadDate": "2019-07-06",
    "thumbnail_url": "https://i.ytimg.com/vi/7roqteWLw4s/maxresdefault.jpg"
  },
  {
    "link": "watch?v=fAtfVu569CY",
    "title": "Running in Docker | ASP.NET Core 2.2 REST API Tutorial 14",
    "tags": "Elfocrash, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, docker, docker tutorial, docker compose, microservices, dockerize, dockerize asp.net core web api, dockerize .net core application, web api, dotnet, .net",
    "scraped_at": 1685095349.089933,
    "genre": "Education",
    "views": "37123",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how we can run the ASP.NET Core REST API we\\'ve been building into Docker, using docker-compose. \\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api #docker\"",
    "lengthSeconds": "803",
    "uploadDate": "2019-06-11",
    "thumbnail_url": "https://i.ytimg.com/vi/fAtfVu569CY/maxresdefault.jpg"
  },
  {
    "link": "watch?v=AU0TIOZhGqs",
    "title": "Refreshing JWTs with Refresh Tokens | ASP.NET Core 5 REST API Tutorial 13",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, jwt, json web token, refresh token, refresh jwt, refresh jwt token c#, refresh jwt token, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.160933,
    "genre": "Education",
    "views": "57634",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nEDIT: There is a bug related to lifetime validation in this video. You can find the fix here: https://github.com/Elfocrash/Youtube.AspNetCoreTutorial/commit/a6f7d2e35c202699d7a017695fd6773864a4946b\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can implement JWT token refreshing using Refresh tokens in ASP.NET Core.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "1373",
    "uploadDate": "2019-06-04",
    "thumbnail_url": "https://i.ytimg.com/vi/AU0TIOZhGqs/maxresdefault.jpg"
  },
  {
    "link": "watch?v=-Z57Ss_uiuc",
    "title": "What is a Refresh Token and why your REST API needs it?",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, nick chapsas, chapsas, refresh token, web api, jwt, authentication, authorization, json web token, dotnet, .net",
    "scraped_at": 1685095349.9949317,
    "genre": "Education",
    "views": "109812",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will explain what a Refresh token is. We will see why your REST API needs one to achieve great security and user experience.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\n#tutorial #jwt #refreshtoken\"",
    "lengthSeconds": "293",
    "uploadDate": "2019-05-28",
    "thumbnail_url": "https://i.ytimg.com/vi/"
  },
  {
    "link": "watch?v=o8dwfI7X16E",
    "title": "User specific content with JWT claims | ASP.NET Core 5 REST API Tutorial 12",
    "tags": "2.2, development, chapsas, elfo, asp.net core, microsoft, auth, claims, asp.net core 2.1 tutorial, .net core, lesson, asp.net core tutorials for beginners, how to code, rest, core, nick chapsas, .netcore, C#, javascript, tutorial, asp.net core mvc tutorial, microsoft mvp, js, software engineering, dot net, coding, dev, asp.net, rest api, asp.net core for beginners, asp.net core for dummies, Elfocrash, csharp, asp.net core 2.0 tutorial, jwt, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.2259061,
    "genre": "Education",
    "views": "22217",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nSupport me on Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how we can use the claims that we place into a JWT in order to create user specific content.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "773",
    "uploadDate": "2019-05-26",
    "thumbnail_url": "https://i.ytimg.com/vi/o8dwfI7X16E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=APLjIrZgxyo",
    "title": "User Login using JWT (Authentication) | ASP.NET Core 5 REST API Tutorial 11",
    "tags": "asp.net core mvc tutorial, coding, dot net, auth, js, dev, C#, .netcore, 2.2, asp.net, asp.net core, development, rest, microsoft, login, asp.net core 2.2 tutorial, asp.net core tutorials for beginners, jwt, asp.net core for dummies, asp.net core 2.0 tutorial, javascript, asp.net core 2.1 tutorial, chapsas, tutorial, lesson, .net core, rest api, nick chapsas, how to code, software engineering, csharp, authorisation, microsoft mvp, authentication, web api, .net 5, dotnet 5, .net framework 5, dotnet",
    "scraped_at": 1685095349.2909064,
    "genre": "Education",
    "views": "38013",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can implement user login authorization with JWT in your ASP.NET Core REST API.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "507",
    "uploadDate": "2019-05-19",
    "thumbnail_url": "https://i.ytimg.com/vi/APLjIrZgxyo/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ARvsBUBioT0",
    "title": "User Registration and Controller Auth | ASP.NET Core 5 REST API Tutorial 10",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, lesson, software engineering, dev, microsoft, microsoft mvp, .net core, auth, authorization, jwt, jwt token, json web token, registration, user, user registration, nick chapsas, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095350.0629072,
    "genre": "Education",
    "views": "45458",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can implement user registration and controller authorization in your ASP.NET Core REST API.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "1186",
    "uploadDate": "2019-05-14",
    "thumbnail_url": "https://i.ytimg.com/vi/ARvsBUBioT0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=M6AkbBaDGJE",
    "title": "Setting up JWT support (Authentication) | ASP.NET Core 5 REST API Tutorial 9",
    "tags": "authentication, asp.net core, core, .netcore, asp.net core 2.1 tutorial, 2.2, asp.net core mvc tutorial, how to code, lesson, microsoft, Elfocrash, asp.net core for beginners, elfo, coding, dev, auth, javascript, microsoft mvp, dot net, js, asp.net core 2.0 tutorial, authorisation, authorization, asp.net, development, rest api, rest, .net core, asp.net core for dummies, tutorial, jwt, C#, csharp, asp.net core 2.2 tutorial, software engineering, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.358933,
    "genre": "Education",
    "views": "67167",
    "desc": "Subscribe: http://bit.ly/ChapsasSub\\\\nSupport me on Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can add JWT authentication support in your ASP.NET Core 2.2 REST API.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api #jwt\"",
    "lengthSeconds": "664",
    "uploadDate": "2019-05-13",
    "thumbnail_url": "https://i.ytimg.com/vi/M6AkbBaDGJE/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qDJYgGzmalQ",
    "title": "What is a JWT (JSON Web Token) and why your REST API needs it",
    "tags": "Elfocrash, elfo, coding, asp.net, .netcore, dot net, core, C#, how to code, tutorial, asp.net core, javascript, js, 2.2, csharp, rest, rest api, development, jwt, json, json web token, jwt json, header, authentication, authorisation, nick chapsas, web api, dotnet, .net",
    "scraped_at": 1685095350.1309328,
    "genre": "Education",
    "views": "19722",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will explain what is a JWT (JSON Web Token) and why your REST API needs it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nWhat is JSON Web Token, How JWT is created, Why is JWT used, Where JWT is used, What is JWT Payload, What is JWT Header.\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #jwt #auth\"",
    "lengthSeconds": "636",
    "uploadDate": "2019-04-07",
    "thumbnail_url": "https://i.ytimg.com/vi/qDJYgGzmalQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=bBSQgX0mZ5E",
    "title": "Storing and managing entities with Azure Cosmos DB | ASP.NET Core 5 REST API Tutorial 8.5",
    "tags": ".netcore, core, rest api, asp.net core, 2.2, rest, asp.net core tutorials for beginners, asp.net core 2.2 tutorial, elfo, dot net, development, Elfocrash, javascript, C#, tutorial, how to code, js, asp.net core 2.1 tutorial, asp.net core for beginners, asp.net core 2.0 tutorial, asp.net, coding, asp.net core mvc tutorial, csharp, asp.net core for dummies, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.4249089,
    "genre": "Education",
    "views": "24464",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can store and manage your entities using Azure Cosmos DB.\\\\n\\\\nGive Cosmonaut a star: https://github.com/Elfocrash/Cosmonaut\\\\nTry Azure Cosmos DB for free: https://docs.microsoft.com/en-us/azure/cosmos-db/introduction\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "955",
    "uploadDate": "2019-04-06",
    "thumbnail_url": "https://i.ytimg.com/vi/bBSQgX0mZ5E/maxresdefault.jpg"
  },
  {
    "link": "watch?v=qEmxoCOH4Uw",
    "title": "Storing and managing entities with Entity Framework Core | ASP.NET Core 5 REST API Tutorial 8",
    "tags": "rest, asp.net core mvc tutorial, development, csharp, core, 2.2, asp.net core, asp.net core 2.0 tutorial, framework, ef, coding, ef core, asp.net, .netcore, javascript, asp.net core 2.1 tutorial, entity framework, tutorial, dot net, asp.net core for beginners, asp.net core tutorials for beginners, asp.net core 2.2 tutorial, asp.net core for dummies, js, C#, rest api, elfo, entity, Elfocrash, how to code, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095350.1989324,
    "genre": "Education",
    "views": "31563",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can store and manage your entities using Entity Framework Core.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "965",
    "uploadDate": "2019-03-23",
    "thumbnail_url": "https://i.ytimg.com/vi/qEmxoCOH4Uw/maxresdefault.jpg"
  },
  {
    "link": "watch?v=pvx0tCaK0Pg",
    "title": "Deleting resources with DELETE | ASP.NET Core 5 REST API Tutorial 7",
    "tags": "development, javascript, elfo, asp.net core mvc tutorial, asp.net core, js, dot net, asp.net core 2.2 tutorial, asp.net, asp.net core for beginners, core, asp.net core for dummies, 2.2, .netcore, rest, C#, tutorial, asp.net core 2.0 tutorial, asp.net core 2.1 tutorial, how to code, coding, asp.net core tutorials for beginners, rest api, Elfocrash, csharp, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.492932,
    "genre": "Education",
    "views": "14732",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can delete a resource in a RESTful API using DELETE.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "260",
    "uploadDate": "2019-02-25",
    "thumbnail_url": "https://i.ytimg.com/vi/pvx0tCaK0Pg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=8fXgWnzfRm0",
    "title": "Updating resources with PUT | ASP.NET Core 5 REST API Tutorial 6",
    "tags": "asp.net core 2.1 tutorial, rest, asp.net, asp.net core mvc tutorial, C#, core, javascript, asp.net core for beginners, elfo, csharp, asp.net core for dummies, asp.net core, .netcore, tutorial, asp.net core 2.0 tutorial, how to code, coding, dot net, asp.net core tutorials for beginners, Elfocrash, development, 2.2, rest api, js, asp.net core 2.2 tutorial, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.5579326,
    "genre": "Education",
    "views": "18799",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can completely replace a resource in a RESTful API using PUT.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "309",
    "uploadDate": "2019-02-16",
    "thumbnail_url": "https://i.ytimg.com/vi/8fXgWnzfRm0/maxresdefault.jpg"
  },
  {
    "link": "watch?v=0CwGTcrGBwI",
    "title": "Retrieving resources with GET | ASP.NET Core 5 REST API Tutorial 5",
    "tags": "asp.net, asp.net core mvc tutorial, Elfocrash, asp.net core for beginners, asp.net core 2.2 tutorial, asp.net core tutorials for beginners, asp.net core 2.0 tutorial, rest api, javascript, dot net, development, rest, tutorial, 2.2, C#, asp.net core for dummies, asp.net core, .netcore, core, coding, csharp, asp.net core 2.1 tutorial, elfo, how to code, js, asp.net core 2.2, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.622933,
    "genre": "Education",
    "views": "24671",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can retrieve resources using the GET HTTP verb in ASP.NET Core 2.2 REST API.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "535",
    "uploadDate": "2019-02-10",
    "thumbnail_url": "https://i.ytimg.com/vi/0CwGTcrGBwI/maxresdefault.jpg"
  },
  {
    "link": "watch?v=TbDsAuJLVfg",
    "title": "Creating resources using POST | ASP.NET 5 REST API Tutorial 4",
    "tags": "asp.net core, core, .netcore, asp.net core 2.1 tutorial, asp.net core for beginners, asp.net core mvc tutorial, how to code, asp.net core 2.2 tutorial, Elfocrash, elfo, coding, javascript, dot net, js, asp.net core 2.0 tutorial, asp.net core tutorials for beginners, asp.net, rest, rest api, development, asp.net core for dummies, tutorial, 2.2, C#, csharp, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095350.2709064,
    "genre": "Education",
    "views": "36875",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can create resources using the POST HTTP verb in ASP.NET Core 2.2.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "704",
    "uploadDate": "2019-02-02",
    "thumbnail_url": "https://i.ytimg.com/vi/TbDsAuJLVfg/maxresdefault.jpg"
  },
  {
    "link": "watch?v=ESdvXlrG9zQ",
    "title": "Dependency injection and clean service registration | ASP.NET 5 REST API Tutorial 3",
    "tags": "asp.net core tutorials for beginners, javascript, asp.net core 2.1 tutorial, C#, asp.net core for dummies, tutorial, asp.net core, asp.net core mvc tutorial, dot net, development, js, coding, asp.net, csharp, asp.net core 2.0 tutorial, asp.net core 2.2 tutorial, asp.net core for beginners, elfo, rest, how to code, core, rest api, .netcore, Elfocrash, 2.2, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095350.3389328,
    "genre": "Education",
    "views": "53277",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and today I will show you how you can clean up your Startup file. We will make our service registration closed for modification and open for extension.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "548",
    "uploadDate": "2019-01-20",
    "thumbnail_url": "https://i.ytimg.com/vi/ESdvXlrG9zQ/maxresdefault.jpg"
  },
  {
    "link": "watch?v=WFEE5yVJwGU",
    "title": "Implementing versioning | ASP.NET Core 5 REST API Tutorial 2",
    "tags": "asp.net core for dummies, asp.net core 2.1 tutorial, elfo, versioning api, coding, tutorial, C#, asp.net, csharp, asp.net core 2.2, asp.net core 2.2 tutorial, asp.net core, asp.net core tutorials for beginners, core, development, javascript, Elfocrash, js, how to code, 2.2, asp.net core 2.0 tutorial, .netcore, dot net, core 2.2, asp.net core mvc tutorial, rest api, asp.net core for beginners, rest, versioning, web api, .net 5, dotnet 5, .net framework 5, dotnet, .net",
    "scraped_at": 1685095349.6889327,
    "genre": "Education",
    "views": "55100",
    "desc": "Become a Patreon and get source code access: https://www.patreon.com/nickchapsas\\\\nCheck out my courses: https://dometrain.com\\\\n\\\\nHello everybody I\\'m Nick and in this video we will talk about the importance of versioning in our API and how we can implement it.\\\\n\\\\nDon\\'t forget to comment, like and subscribe :)\\\\n\\\\nSocial media:\\\\nFollow me on GitHub: http://bit.ly/ChapsasGitHub\\\\nFollow me on Twitter: http://bit.ly/ChapsasTwitter\\\\nConnect on LinkedIn: http://bit.ly/ChapsasLinkedIn\\\\n\\\\n#tutorial #rest #api\"",
    "lengthSeconds": "700",
    "uploadDate": "2019-01-15",
    "thumbnail_url": "https://i.ytimg.com/vi/WFEE5yVJwGU/maxresdefault.jpg"
  }
]